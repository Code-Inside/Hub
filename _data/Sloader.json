{"Data":{"Blog":{"FeedItems":[{"Title":"dnSpy - a OSS IL decompiler and debugger","PublishedOn":"2017-09-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>My colleague was fighting against a nasty bug, that only occures on one machine. Unfortunatly this machine was not a development machine (no VS installed) and we didn’t want to mess with VS remote debugging, because (AFAIK) his would need some additional setup but we were not allowed to install anything.</p>\n\n<p>Soooo… he searched around and found this:</p>\n\n<h2 id=\"dnspy---a-net-assembly-editor-decompiler-and-debugger\">dnSpy - a .NET assembly editor, decompiler, and debugger</h2>\n\n<p>The title contains the major points. It is a decompiler, like IL Spy, but addionaly it has a super nice debugger and it looks like a small Visual Studio.</p>\n\n<p>Some pictures how I just decompile Paint.NET and attach the debugger:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy.png\" alt=\"x\" title=\"dnSpy without debugging\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy_start_debug.png\" alt=\"x\" title=\"Start debugging\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy_debugging.png\" alt=\"x\" title=\"Debugging\" /></p>\n\n<p>I think this is just awesome and it helped my colleague alot.</p>\n\n<h2 id=\"oss--free\">OSS &amp; Free</h2>\n\n<p>The complete project is hosted <strong><a href=\"https://github.com/0xd4d/dnSpy\">on GitHub</a></strong> and is <strong>“Open Source (GPLv3) and Free Forever”</strong></p>\n\n<p>Checkout the GitHub project page - it contains a lot more information. The tool itself was just 18mb zipped and can be run everywhere.</p>\n\n<h2 id=\"its-a-decompiler\">Its a decompiler!</h2>\n\n<p>And just to make sure you keep this in mind: The debugging works with every .NET application (at least in theory), because it decompiles the .NET IL language to C#. It is not a 1:1 debugger, but maybe it can help you.</p>\n\n<p><strong><a href=\"https://github.com/0xd4d/dnSpy\">Check out the dnSpy GitHub Site</a></strong></p>\n\n","Href":"https://blog.codeinside.eu/2017/09/30/dnspy-a-oss-il-decompiler-and-debugger/","RawContent":null},{"Title":"IdentityServer3 with WindowsAuthentication with ASP.NET WebApi & ASP.NET & WPF App","PublishedOn":"2017-08-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><strong>Please note</strong>: In my sample and in this blogpost I cover IdentityServer 3, because last year when I was working on the sample and our real implementation IdentityServer4 (a rewrite of IdentityServer 3) was in beta. My guess is, that most stuff should still apply even if you are using IdentityServer4, but I didn’t test it.</p>\n\n<p>Also: I’m not a security expert - this might be all wrong, but currently this more or less works for us. If you find something strange, please let me know!</p>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>The sample consists of the following projects:</p>\n\n<p><strong>IdentityTest.IdServerHost:</strong> That’s the central IdentityServer in our solution. It contains all “clients” &amp; “identityprovider” settings.\n<strong>IdentityTest.WinAuth:</strong> This is our Windows-Authentication provider. Because of the nature of WindowsAuth it needs to be an extra project. This needs to be hosted via IIS (or IIS Express) with Windows authentication enabled. The ASP.NET app acts as a bridge and will convert the Windows-Auth ticket into a SAML token, which can be integrated into the IdentityServer. It is more or less like a mini-ADFS.\n<strong>IdentityTest.WebApp:</strong> The WebApp itself can be used via browser and also hosts a WebApi. The WebApi is secured by the IdentityServer and secured pages will trigger the authentication against the IdServerHost. \n<strong>IdentityTest.WpfClient:</strong> With the WPFApp we want to get a AccessToken via a WebBrowser-Control from the IdServerHost and call the WebApi that is hosted and secured by the very same IdServerHost.</p>\n\n<p>The IdentityServer team did a great job and have a large <strong><a href=\"https://github.com/IdentityServer/IdentityServer3.Samples\">sample repository on GitHub</a></strong>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-08-30/overview.png\" alt=\"x\" title=\"Overview\" /></p>\n\n<p>I will talk about each part in my sample. Now lets beginn with…</p>\n\n<h3 id=\"the-idserverhost-project\">The ‘IdServerHost’ Project</h3>\n\n<p>The IdentityServerHost is a plain ASP.NET application. To include the IdentityServer3 you need to add <a href=\"https://www.nuget.org/packages/IdentityServer3/\">IdentityServer3 NuGet-Package</a>.</p>\n\n<p>The code is more or less identical with the <a href=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/WebHost%20(minimal)/WebHost\">Minimal-Sample from the IdentityServer3 team</a>, but I <strong>disabled the SSL</strong> requirements for my demo.</p>\n\n<p>Be aware: The IdentityServer use a certificate to sign the tokens, but this has nothing to do with the SSL certificate. This was a hard learning curve for me and IISExpress or something messed things up. In the end I disabled the SSL requirements <strong>for my development enviroment</strong> and could start to understand how each part is communicating with each other. \nThe signing certificate in the sample is the sample .pfx file from the offical samples.</p>\n\n<p>Remember: <strong>DO USE SSL IN PRODUCTION.</strong> Oh - and use the Cert-Store for the signing certificate as well!</p>\n\n<p><strong>Cert-Handling in IdentityServer in a nutshell</strong>: Do use SSL in production with a valid SSL certificate and setup another certificate that the IdentityServer will use to sign the tokens.</p>\n\n<p>Besides the SSL stuff the most important stuff might be the <a href=\"https://github.com/Code-Inside/Samples/blob/master/2016/IdentityTest/IdentityTest.IdServerHost/Configuration/Clients.cs\">client-registration</a> and the <a href=\"https://github.com/Code-Inside/Samples/blob/79fda88113a4736a465ab275fe0745dfc6aefa9a/2016/IdentityTest/IdentityTest.IdServerHost/Startup.cs#L45-L65\">identity-provider-registration</a>.</p>\n\n<p>The IdentityServer - as the auth-central - knows each ‘client’ and each ‘identity-provider’. Make sure all URLs are correct otherwise you will end up with errors. Even a slightly difference like ‘http://test.com/’ and ‘http://test.com’ (without the trailing slash at the end) will result in strange errors.</p>\n\n<h3 id=\"the-winauth-project\">The ‘WinAuth’ Project</h3>\n\n<p>As already written this is our Windows-Authentication provider. Of course, it is only needed if you need WinAuth. If you want to use any other provider, like a Google/Microsoft/Facebook/Twitter-Login, then this is not needed.\nIt is a bridge to the enterprise world and works quite well.</p>\n\n<p>In the project I just reference the <a href=\"https://www.nuget.org/packages/IdentityServer.WindowsAuthentication/\">IdentityServer.WindowsAuthentication</a> NuGet-Package and I’m nearly done. \nIn the config I need to insert the URL of my IdentityServer host - those two parts needs to know each other and they will exchange public keys so they can trust each other.</p>\n\n<p>For this trust-relationship the WinAuth provider has its own certificate. Actually you can reuse the same cert from the IdentityServerHost but I’m not sure if this is super secure, but it works.</p>\n\n<p>The code and sample can also be found on the offical <a href=\"https://github.com/IdentityServer/WindowsAuthentication\">GitHub repo</a></p>\n\n<h3 id=\"the-webapp-project\">The ‘WebApp’ Project</h3>\n\n<p>This project is a regular ASP.NET MVC project with WebApi 2 included. Nothing ASP.NET Core related, but the actual doing would be pretty similar.</p>\n\n<p>On this page there are two ways to interact:</p>\n\n<ul>\n  <li>Via Browser</li>\n  <li>Via the WebApi</li>\n</ul>\n\n<p><strong>Browser Auth via OpenIdConnect Auth:</strong></p>\n\n<p>The NuGet Package <a href=\"https://www.nuget.org/packages/Microsoft.Owin.Security.OpenIdConnect\">Microsoft.Owin.Security.OpenIdConnect</a> does the heavy lifting for us. In combination with the <a href=\"https://www.nuget.org/packages/Microsoft.Owin.Security.Cookies/\">Microsoft.Owin.Security.Cookies</a> NuGet package the authentication will kick in when someone access a [Authorize] marked Controller. The Cookie-Auth will preserve the identity information.</p>\n\n<p><strong>WebApi Auth:</strong></p>\n\n<p>To use the protected WebApi with any HTTP client the request must have a JWT bearer token. The implementation is super simple with this NuGet package <a href=\"https://www.nuget.org/packages/IdentityServer3.AccessTokenValidation/\">IdentityServer3.AccessTokenValidation</a>.</p>\n\n<p><strong>Setup of both auth options:</strong></p>\n\n<p>The setup is quite easy with the NuGet packages:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>public class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseIdentityServerBearerTokenAuthentication(new IdentityServerBearerTokenAuthenticationOptions\n        {\n            Authority = ConfigurationManager.AppSettings[\"Security.Authority\"],\n            RequiredScopes = new[] { \"openid\" }\n        });\n\n        app.UseCookieAuthentication(new CookieAuthenticationOptions()\n        {\n            AuthenticationType = \"cookies\",\n        });\n\n        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions()\n        {\n            AuthenticationType = \"oidc\",\n            SignInAsAuthenticationType = \"cookies\",\n            Authority = ConfigurationManager.AppSettings[\"Security.Authority\"],\n            ClientId = \"webapp\",\n            RedirectUri = ConfigurationManager.AppSettings[\"Security.RedirectUri\"],\n            ResponseType = \"id_token\",\n            Scope = \"openid all_claims\"\n        });\n    }\n}\n</code></pre>\n</div>\n\n<p>It is important to use the correct “clientIds” and URLs as configured in the IdentityServer, otherwise you will receive errors from the IdentityServer.</p>\n\n<h3 id=\"the-wpfclient-project\">The ‘WpfClient’ Project</h3>\n\n<p>This project is a small version of the original <a href=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/WpfOidcClientPop\">WpfOidcClientPop</a> sample. The idea behind this sample is that a user can sign in with his regular account.</p>\n\n<p><strong>Auth via browser:</strong></p>\n\n<p>Instead of a Loginname/Password form rendered from the WPF app itself the authentication is delegated to a embedded browser control. Another option is to delegate it to the “real” installed browser, but this is another topic. \nThe Microsoft Account login in Visual Studio is made that way or think of any popular “Facebook-Login” mobile app on your phone: The auth-process is basically a typical Web signin.</p>\n\n<p>This scenario is also convered as a offical <a href=\"https://tools.ietf.org/wg/oauth/draft-ietf-oauth-native-apps/\">OpenID Connect specification</a>. In WPF your best and easiest choice would be the <a href=\"https://github.com/IdentityModel/IdentityModel.OidcClient2\">IdentityModel.OidcClient2</a> package.</p>\n\n<p><strong>Auth “Steps”</strong></p>\n\n<p>The first step in the sample project is to aquire a access token from the IdentityServer. The actual implementation is thanks to the OidcClient quite simple as you can see <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L44-L49\">here</a>.</p>\n\n<p>The OidcClient will try to get the needed accesstoken in the silent mode first (this can be configured) and if this fails a embedded browser will be rendered and the user needs to sign in there. After a successful signin you will get a <strong>accesstoken and refreshtoken</strong>.</p>\n\n<p><strong>Sample note:</strong> If you try this on your local machine the auth-window should not appear, because it will just do a “silent” windows auth login.</p>\n\n<p><strong>Multiple IdentityProvider:</strong> If you configure multiple identity provider, a simple designed identity selection will appear in the embedded browser window.</p>\n\n<p>After the intial sign in you can regenerate new accesstokens via the refreshtoken.</p>\n\n<p>With the accesstoken <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L95-L99\">we craft a HTTP request</a> to our beloved WebApi and write use the token in the authorization header and finally we are done.</p>\n\n<p><strong>Things to consider:</strong></p>\n\n<p>It is important <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L77-L83\">to setup the OIDCClient</a> the correct way with the values that you specified in your IdentityServer configuration. Also you should read about OpenID scopes because they are linked to the actual result. Without the correct scope you might not get a accesstoken or refreshtoken.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-08-30/wpf.png\" alt=\"x\" title=\"wpf\" /></p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<p>With these 4 projects we have a quite mighty solution created. We can still use Windows Auth for enterprise needs, we can protect WebApis and WebPages via a central Identity solution and also use “native” apps. The IdentityServer itself has a wide range of configuration possibilities.</p>\n\n<p>If you start doing something in this direction I would point you to the <a href=\"https://github.com/IdentityServer/IdentityServer4\">IdentityServer4</a>, because new is always better, right?</p>\n\n<h1 id=\"github-link\">GitHub Link</h1>\n\n<p>The full sample can be found on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/IdentityTest\">GitHub</a>.</p>\n\n<p>Hope this helps.</p>\n\n","Href":"https://blog.codeinside.eu/2017/08/30/identityserver3-webapi-webapp-wpfapp-ohmy/","RawContent":null},{"Title":"How to convert .crt & .key files to a .pfx","PublishedOn":"2017-07-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The requirements are simple: You will need the .cer with the corresponding .key file and need to download <a href=\"https://wiki.openssl.org/index.php/Binaries\">OpenSSL</a>.</p>\n\n<p>If you are using Windows <strong>without the awesome Linux Subsystem</strong>, take the latest pre-compiled version <strong>for Windows</strong> <a href=\"https://indy.fulgan.com/SSL/\">from this site</a></p>\n\n<p>Otherwise with <strong>Bash on Windows</strong> you can just use OpenSSL via its “native” environment. <em>Thanks for the hint @kapsiR</em></p>\n\n<p>After the download run this command:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>   openssl pkcs12 -export -out domain.name.pfx -inkey domain.name.key -in domain.name.crt\n</code></pre>\n</div>\n\n<p>This will create a <strong>domain.name.pfx</strong>. As far as I remember you will be asked to set a password for the generated private .pfx part.</p>\n\n<p>If you are confused with .pfx, .cer, .crt take a look at this <a href=\"http://www.gtopia.org/blog/2010/02/der-vs-crt-vs-cer-vs-pem-certificates/\">nice description blogpost</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2017/07/31/how-to-convert-crt-and-key-to-pfx/","RawContent":null},{"Title":"Non-cryptographic hash functions for .NET","PublishedOn":"2017-06-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Creating hashs is quite common to check if content X has changed without looking at the whole content of X. \nGit for example uses SHA1-hashs for each commit. SHA1 itself is a pretty old cryptographic hash function, but in the case of Git there might have been better alternatives available, because the “to-be-hashed” content is not crypto relevant - it’s just content marker. Well… in the case of Git the current standard is SHA1, which works, but a ‘better’ way would be to use non-cryptographic functions for non-crypto purposes.</p>\n\n<h2 id=\"why-you-should-not-use-crypto-hashs-for-non-crypto\">Why you should not use crypto-hashs for non-crypto</h2>\n\n<p>I discovered this topic via a Twitter-conversation and it started with this <a href=\"https://twitter.com/sfeldman/status/804984253985370112\">Tweet</a>:</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">Bend Message Deduplication on <a href=\"https://twitter.com/hashtag/azure?src=hash\">#azure</a> <a href=\"https://twitter.com/hashtag/servicebus?src=hash\">#servicebus</a> to Your Will <a href=\"https://t.co/zjIQFjt2c9\">https://t.co/zjIQFjt2c9</a></p>&mdash; Sean Feldman (@sfeldman) <a href=\"https://twitter.com/sfeldman/status/804984253985370112\">3. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p><a href=\"https://twitter.com/clemensv/status/805499766264172548\">Clemens Vasters</a> then came and pointed out why it would be better to use non-crypto hash functions:</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">Rationale: Any use of broken crypto hashes may trip up security review processes.</p>&mdash; Clemens Vasters 🇪🇺 (@clemensv) <a href=\"https://twitter.com/clemensv/status/805499766264172548\">4. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>The reason makes perfect sense for me - next step: What other choice are available?</p>\n\n<h2 id=\"non-cryptographic-hash-functions-in-net\">Non-cryptographic hash functions in .NET</h2>\n\n<p>If you are googleing around you will find many different hashing algorithm, like <a href=\"https://en.wikipedia.org/wiki/Jenkins_hash_function\">Jenkins</a> or <a href=\"https://en.wikipedia.org/wiki/MurmurHash\">MurmurHash</a>.</p>\n\n<p>Sean Feldman, who more or less started the Twitter discussion mentioned a very good library for .NET developers:</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">for the hashing function, I think I&#39;ll lead readers to a better option here <a href=\"https://t.co/LDiJuLD5A5\">https://t.co/LDiJuLD5A5</a></p>&mdash; Sean Feldman (@sfeldman) <a href=\"https://twitter.com/sfeldman/status/805516688816910336\">4. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>The author of this awesome package is <a href=\"https://github.com/brandondahler\">Brandon Dahler</a>, who created .NET versions of the most well known algorithm and published them as NuGet packages.</p>\n\n<p>The source and everything can be found on <strong><a href=\"https://github.com/brandondahler/Data.HashFunction/\">GitHub</a></strong>.</p>\n\n<h2 id=\"lessons-learned\">Lessons learned</h2>\n\n<p>If you want to hash something and it is not crypto relevant, then it would be better to look at one of those Data.HashFunctions - some a pretty crazy fast.</p>\n\n<p>I’m not sure which one is ‘better’ - if you have some opinions please let me know. Brandon created a small description of each algorithm on the <strong><a href=\"http://datahashfunction.azurewebsites.net/\">Data.HashFunction documentation page</a></strong>.</p>\n\n<p><em>(my blogging backlog is quite long, so I needed 6 month to write this down ;) )</em></p>\n","Href":"https://blog.codeinside.eu/2017/06/30/non-cryptographic-hash-functions-for-dotnet/","RawContent":null},{"Title":"Using Visual Studio Code & Team Foundation Version Control (TFVC)","PublishedOn":"2017-05-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Recently we start working on a Angular 4 app but all other parts of the application (e.g. the backend stuff) were stored in a good old TFVC based repository (inside a Team Foundation Server 2015) . \nUnfortunately building an Angular app with the full blown Visual Studio with the “default” Team Explorer workflow is not really practical.\nAnother point for using Visual Studio Code was that most other online resources about learning Angular are using VS Code.</p>\n\n<p>Our goal was to keep <strong>one</strong> repository, otherwise it would be harder to build and maintain.</p>\n\n<h2 id=\"first-plan-migrate-to-git\">First plan: Migrate to Git</h2>\n\n<p>First we tried to migrate our <strong>complete</strong> code base to Git with this <a href=\"https://github.com/git-tfs/git-tfs\">generally awesome tool</a>. Unfortunately for us it failed because of our quite large branch-tree. I tried it on a smaller code base and it worked without any issues.</p>\n\n<p>At this point we needed another solution, because we wanted to get started on the actual application - so we tried to stick with TFVC.</p>\n\n<p><strong>Important:</strong> I always would recommend Git over TFVC, because it’s the way our industry is currently moving and at some point in the future we will do this too.</p>\n\n<p><strong>If you have similar problems like us: Read on!</strong></p>\n\n<h2 id=\"second-plan-get-the-tfvc-plugin-working-in-visual-studio-code\">Second plan: Get the TFVC plugin working in Visual Studio Code</h2>\n\n<p>Good news: Since <a href=\"https://blogs.msdn.microsoft.com/visualstudioalm/2017/04/12/official-release-of-tfvc-support-for-visual-studio-code/\">April 2017</a> there is a Visual Studio Team Services extension for Visual Studio Code that also supports TFVC!</p>\n\n<p>Requirements:</p>\n\n<ul>\n  <li>Team Foundation Server 2015 Update 2</li>\n  <li>A existing <strong>local</strong> workspace configuration (at least currently, check this <a href=\"https://github.com/Microsoft/vsts-vscode/issues/176\">GitHub issue</a> for further information)</li>\n  <li>The actual <a href=\"https://github.com/Microsoft/vsts-vscode\">extension</a></li>\n</ul>\n\n<h2 id=\"be-aware-local-workspaces\">Be aware: Local Workspaces!</h2>\n\n<p>Even I’m using TFS since a couple of years I just recently discovered that the TFS supports to different “workflows”. The “default” workflow always needs a connection to the TFS to checkout files etc. \nThere is an alternative mode called “local” mode which seems to work like SVN. The difference is, that you can create a local file and the TFVC-client will “detect” those changes. Read more about the differences <a href=\"https://www.visualstudio.com/en-us/docs/tfvc/decide-between-using-local-server-workspace\">here</a>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-05-29/local-workspace.png\" alt=\"x\" title=\"Local Workspace setting\" /></p>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>In our OnPremise TFS 2015 world I just needed only this configuration line in my user settings:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>...\n\"tfvc.location\": \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Professional\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TeamFoundation\\\\Team Explorer\\\\TF.exe\",\n...\n</code></pre>\n</div>\n\n<h2 id=\"action\">Action!</h2>\n\n<p>Now when I point VS Code to my local workspace folder, the TFVC plugin will kick in and I see the familiar “change”-tracking:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-05-29/changetracking.png\" alt=\"x\" title=\"Working with the extension\" /></p>\n\n<p>It is not perfect, because I still need to setup and “manage” (e.g. get the history etc.) via the full blown Visual Studio, but with this setup it is “do-able”.</p>\n","Href":"https://blog.codeinside.eu/2017/05/29/using-vscode-and-tfvc/","RawContent":null},{"Title":".NET CultureInfo in Windows 10","PublishedOn":"2017-04-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Did you know that the CultureInfo behavior with <strong>“unkown”</strong> cultures has changed with Windows 10?</p>\n\n<p>I stumbled two times about this “problem” - so this is enough to write a short blogpost about it.</p>\n\n<h2 id=\"demo-code\">Demo Code</h2>\n\n<p>Lets use this democode:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    try\n    {\n\n\n        // ok on Win10, but not on pre Win10 if culture is not registred\n        CultureInfo culture1 = new CultureInfo(\"foo\");\n        CultureInfo culture2 = new CultureInfo(\"xyz\");\n        CultureInfo culture3 = new CultureInfo(\"en-xy\");\n\n        // not ok even on Win 10 - exception\n        CultureInfo culture4 = new CultureInfo(\"foox\");\n\n    }\n    catch (Exception exc)\n    {\n\n    }\n</code></pre>\n</div>\n\n<h2 id=\"windows-10-case\">Windows 10 Case</h2>\n\n<p>If you run this code under Windows 10 it should fail for the “foox” culture, because it doesn’t seem to be a valid culture anyway.</p>\n\n<p>“culture1”, “culture2”, “culture3” are all <strong>valid</strong> cultures in the Windows 10 world, but are resolved with <strong>Unkown Locale</strong> and <strong>LCID 4096</strong>.</p>\n\n<p><em>I guess Windows will look for a 2 or 3 letter ISO style language, and “foox” doesn’t match this pattern.</em></p>\n\n<h2 id=\"pre-windows-10---eg-running-on-win-server-2012r2\">Pre Windows 10 - e.g. running on Win Server 2012R2</h2>\n\n<p>If you would run the code unter Windows Server 2012 R2 it would fail on the first culture, because there is no “foo” culture registred.</p>\n\n<h2 id=\"problem\">“Problem”</h2>\n\n<p>The main “problem” is that this behavior could lead to some production issues if you develop with Windows 10 and the software is running on a Win 2012 server.</p>\n\n<p><strong>If</strong> you are managing “language” content in your application, be aware of this “limitation” on older Windows versions.</p>\n\n<p>I discovered this problem while debugging our backend admin application. With this ASP.NET frontend it is possible to add or manage “localized” content and the dropdown for the possible language listed a whole bunch of very special, but “Unkown locale” cultures. So we needed to filter out all LCID 4096 cultures to ensure it would run under all Windows versions.</p>\n\n<h2 id=\"msdn\">MSDN</h2>\n\n<p>This behavior is also documented on <strong><a href=\"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.lcid%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\">MSDN</a></strong></p>\n\n<p>The <strong><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd373745(v=vs.85).aspx\">“Unkown culture” LCID 4096</a></strong> was introduced with Windows Vista, but only with Windows 10 it will be “easy” usable within the .NET Framework.</p>\n\n","Href":"https://blog.codeinside.eu/2017/04/23/net-cultureinfo-in-windows10/","RawContent":null},{"Title":"How we moved to Visual Studio 2017","PublishedOn":"2017-03-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-03-28/vs.png\" alt=\"x\" title=\"VS 2017 installer\" /></p>\n\n<p>Visual Studio 2017 has arrived and because of .NET Core and other goodies we wanted to switch fast to the newest release with our product <a href=\"http://oneoffixx.com/\">OneOffixx</a>.</p>\n\n<h2 id=\"company--product-environment\">Company &amp; Product Environment</h2>\n\n<p>In our solution we use some VC++ projects (just for Office Development &amp; building a .NET shim), Windows Installer XML &amp; many C# projects for desktop or ASP.NET stuff.</p>\n\n<p>Our builds are scripted with <strong><a href=\"http://cakebuild.net\">CAKE</a></strong> (see here for some more blogposts about [CAKE}(https://blog.codeinside.eu/2017/02/13/create-nuget-packages-with-cake/) and us the TFS vNext Build to orchestrate everything.</p>\n\n<h2 id=\"step-1-update-the-development-workstations\">Step 1: Update the Development Workstations</h2>\n\n<p>The first step was to update my local dev enviroment and install Visual Studio 2017.</p>\n\n<p>After the installation I started VS and opened our solution and because we have some WIX projects we needed the most recent <strong><a href=\"http://wixtoolset.org/releases/\">Wix 3.11 toolset &amp; the VS 2017 extension</a></strong>.</p>\n\n<h2 id=\"step-2-vc-update\">Step 2: VC++ update</h2>\n\n<p>We wanted a clean VS 2017 enviroment, so we decided to use the most recent <strong>VC++ 2017 runtime</strong> for our VC++ projects.</p>\n\n<h2 id=\"step-3-project-update\">Step 3: project update</h2>\n\n<p>In the past we had some issues that MSBuild used the wrong MSBuild version. Maybe this step is not needed, but we pointed all .csproj files to the newest <strong>MSBuild ToolVersion 15.0</strong>.</p>\n\n<h2 id=\"step-4-cake-update\">Step 4: CAKE update</h2>\n\n<p>The last step was to update the CAKE.exe (which is controlled by us and not automatically downloaded via a build script) to 0.18.</p>\n\n<h2 id=\"step-5-minor-build-script-changes\">Step 5: Minor build script changes</h2>\n\n<p>We needed to adjust some paths (e.g. to the Windows SDK for signtool.exe) and ensure that we are using the most recent MSBuild.exe.</p>\n\n<h2 id=\"step-6-create-a-new-build-agent\">Step 6: Create a new Build-Agent</h2>\n\n<p>We decided to create a <strong><a href=\"https://blog.codeinside.eu/2016/08/10/adding-a-new-windowsagent-to-tfs2015-build/\">new TFS Build-Agent</a></strong> and do the usual build agent installation, imported the code-cert and do some magic because of some C++/COM-magic (don’t ask… COM sucks.)</p>\n\n<h2 id=\"recap\">Recap</h2>\n\n<p>Besides the C++/COM/magic issue (see above) the migration was pretty easy and now our team works with Visual Studio 2017.</p>\n\n","Href":"https://blog.codeinside.eu/2017/03/27/how-we-moved-to-vs-2017/","RawContent":null},{"Title":"HowTo: Get User Information & Group Memberships from Active Directory via C#","PublishedOn":"2017-03-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>I had to find a way to access all group memberships from a given Active Directory user. The problem here is, that groups may contain other groups and I needed a list of “all” applied group memberships - directly or indirectly.</p>\n\n<p>The “fastest” solution (without querying each group) is to use the <strong><a href=\"https://msdn.microsoft.com/en-us/library/ms680275(v=vs.85).aspx\">Token-Groups attribute</a></strong>, which already does this magic for us. \nThis list should contain <strong>all</strong> applied groups.</p>\n\n<p>The code would also allow to read any other AD property, e.g. the UPN or names etc.</p>\n\n<h2 id=\"code\">Code</h2>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"ListAllGroupsViaTokenGroups:\");\n\n        List&lt;string&gt; result = new List&lt;string&gt;();\n\n        try\n        {\n            result = ListAllGroupsViaTokenGroups(\"USERNAME\", \"DOMAIN\");\n\n            foreach (var group in result)\n            {\n                Console.WriteLine(group);\n            }\n        }\n        catch (Exception exc)\n        {\n            Console.WriteLine(exc.Message);\n        }\n\n        Console.Read();\n    }\n\n  \n    private static List&lt;string&gt; ListAllGroupsViaTokenGroups(string username, string domainName)\n    {\n        List&lt;string&gt; result = new List&lt;string&gt;();\n\n        using (PrincipalContext domainContext = new PrincipalContext(ContextType.Domain, domainName))\n        using (var searcher = new DirectorySearcher(new DirectoryEntry(\"LDAP://\" + domainContext.Name)))\n        {\n            searcher.Filter = String.Format(\"(&amp;(objectClass=user)(sAMAccountName={0}))\", username);\n            SearchResult sr = searcher.FindOne();\n\n            DirectoryEntry user = sr.GetDirectoryEntry();\n\n            // access to other user properties, via user.Properties[\"...\"]\n\n            user.RefreshCache(new string[] { \"tokenGroups\" });\n\n            for (int i = 0; i &lt; user.Properties[\"tokenGroups\"].Count; i++)\n            {\n                SecurityIdentifier sid = new SecurityIdentifier((byte[])user.Properties[\"tokenGroups\"][i], 0);\n                NTAccount nt = (NTAccount)sid.Translate(typeof(NTAccount));\n\n                result.Add(nt.Translate(typeof(NTAccount)).ToString() + \" (\" + sid + \")\");\n            }\n        }\n\n        return result;\n    }\n\n}\n</code></pre>\n</div>\n\n<p>Hope this will help someone in the future.</p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2017/ADLookupWithGroups\">Code @ GitHub</a></strong></p>\n","Href":"https://blog.codeinside.eu/2017/03/02/howto-get-user-information-and-groups-from-ad/","RawContent":null},{"Title":"Create NuGet packages with Cake","PublishedOn":"2017-02-13T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This blogpost is a follow up to these <strong><a href=\"http://cakebuild.net/\">Cake (C# Make)</a></strong> related blogpost:</p>\n\n<ul>\n  <li><a href=\"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/\">Building with Cake</a></li>\n  <li><a href=\"https://blog.codeinside.eu/2017/02/07/build-and-run-xunit-tests-with-cake/\">Build &amp; run xUnit tests with Cake</a></li>\n</ul>\n\n<h2 id=\"scenario\">Scenario</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-13/proj.png\" alt=\"x\" title=\"Demo proj\" /></p>\n\n<p>Let’s say we have this project structure. The “Config”, “Result” and “Engine” projects contains a corresponding .nuspec, like this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;package</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;metadata&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>Sloader.Config<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>$version$<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Sloader.Config<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;authors&gt;</span>Code Inside Team<span class=\"nt\">&lt;/authors&gt;</span>\n    <span class=\"nt\">&lt;owners&gt;</span>Code Inside Team<span class=\"nt\">&lt;/owners&gt;</span>\n    <span class=\"nt\">&lt;licenseUrl&gt;</span>https://github.com/Code-Inside/Sloader/blob/master/LICENSE<span class=\"nt\">&lt;/licenseUrl&gt;</span>\n    <span class=\"nt\">&lt;projectUrl&gt;</span>https://github.com/Code-Inside/Sloader<span class=\"nt\">&lt;/projectUrl&gt;</span>\n    <span class=\"nt\">&lt;requireLicenseAcceptance&gt;</span>false<span class=\"nt\">&lt;/requireLicenseAcceptance&gt;</span>\n    <span class=\"nt\">&lt;description&gt;</span>Sloader Config<span class=\"nt\">&lt;/description&gt;</span>\n    <span class=\"nt\">&lt;releaseNotes&gt;</span>\n      ## Version 0.1 ##\n      Init\n    <span class=\"nt\">&lt;/releaseNotes&gt;</span>\n    <span class=\"nt\">&lt;copyright&gt;</span>Copyright 2017<span class=\"nt\">&lt;/copyright&gt;</span>\n    <span class=\"nt\">&lt;tags&gt;</span>Sloader<span class=\"nt\">&lt;/tags&gt;</span>\n    <span class=\"nt\">&lt;dependencies</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/metadata&gt;</span>\n<span class=\"nt\">&lt;/package&gt;</span>\n</code></pre>\n</div>\n\n<p>Nothing fancy - pretty normal NuGet stuff, but be aware of the “$version$” variable. This variable is called a <a href=\"https://docs.microsoft.com/de-de/nuget/schema/nuspec#replacement-tokens\">“replacement-token”</a>. When the NuGet package is created and it detects such a replacement-token, it will search for the AssemblyVersion (or other replacement-token sources).</p>\n\n<p><strong>Versioning in NuGet:</strong></p>\n\n<p>I’m not a NuGet expert, but you should also versioning your assembly info, otherwise some systems may have trouble to update your dll. The version inside the package can be different from the actual assembly version, but you should manage booth or use this replacement-token-mechanic.</p>\n\n<h2 id=\"goal\">Goal</h2>\n\n<p>The goal is to create a NuGet package for each target project with Cake.</p>\n\n<h2 id=\"buildcake\">build.cake</h2>\n\n<p>The usage in Cake is pretty much the same as with the normal <strong><a href=\"https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference#pack\">nuget.exe pack</a></strong> command \nThe sample only shows the actual cake target - see the older blogposts for a more complete example:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Task(\"BuildPackages\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n\t.IsDependentOn(\"RunTests\")\n    .Does(() =&gt;\n{\n    var nuGetPackSettings = new NuGetPackSettings\n\t{\n\t\tOutputDirectory = rootAbsoluteDir + @\"\\artifacts\\\",\n\t\tIncludeReferencedProjects = true,\n\t\tProperties = new Dictionary&lt;string, string&gt;\n\t\t{\n\t\t\t{ \"Configuration\", \"Release\" }\n\t\t}\n\t};\n\n    MSBuild(\"./src/Sloader.Config/Sloader.Config.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Config/Sloader.Config.csproj\", nuGetPackSettings);\n    MSBuild(\"./src/Sloader.Result/Sloader.Result.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Result/Sloader.Result.csproj\", nuGetPackSettings);\n    MSBuild(\"./src/Sloader.Engine/Sloader.Engine.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Engine/Sloader.Engine.csproj\", nuGetPackSettings);\n});\n</code></pre>\n</div>\n\n<p>Easy, right? The most interesting part here is the <a href=\"http://cakebuild.net/api/Cake.Common.Tools.NuGet/NuGetAliases/EF4ED944\">NuGetPack</a> command. Before we invoke this command we need to make sure that we build the last recent version - to enforce that we just rebuild each project in release mode.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-13/result.png\" alt=\"x\" title=\"NuGet packages!\" /></p>\n\n<p>The console output should make the flow pretty clear:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>PS C:\\Users\\Robert\\Documents\\GitHub\\Sloader&gt; .\\build.ps1 -t BuildPackages\nPreparing to run build script...\nRunning build script...\nAnalyzing build script...\nProcessing build script...\nInstalling tools...\nCompiling build script...\n\n========================================\nClean\n========================================\nExecuting task: Clean\nCleaning directory C:/Users/Robert/Documents/GitHub/Sloader/artifacts\nFinished executing task: Clean\n\n========================================\nRestore-NuGet-Packages\n========================================\nExecuting task: Restore-NuGet-Packages\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nAll packages listed in packages.config are already installed.\nFinished executing task: Restore-NuGet-Packages\n\n========================================\nBuildTests\n========================================\nExecuting task: BuildTests\nStart Building Test: Sloader.Config.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config.dll\n  Sloader.Config.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config\n  .Tests.dll\nStart Building Test: Sloader.Result.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result.dll\n  Sloader.Result.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result\n  .Tests.dll\nStart Building Test: Sloader.Engine.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Config.dll\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Result.dll\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine.dll\n  Sloader.Engine.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine\n  .Tests.dll\nFinished executing task: BuildTests\n\n========================================\nRunTests\n========================================\nExecuting task: RunTests\nStart Running Tests\nxUnit.net Console Runner (64-bit .NET 4.0.30319.42000)\n  Discovering: Sloader.Config.Tests\n  Discovered:  Sloader.Config.Tests\n  Starting:    Sloader.Config.Tests\n  Finished:    Sloader.Config.Tests\n  Discovering: Sloader.Engine.Tests\n  Discovered:  Sloader.Engine.Tests\n  Starting:    Sloader.Engine.Tests\n  Finished:    Sloader.Engine.Tests\n  Discovering: Sloader.Result.Tests\n  Discovered:  Sloader.Result.Tests\n  Starting:    Sloader.Result.Tests\n  Finished:    Sloader.Result.Tests\n=== TEST EXECUTION SUMMARY ===\n   Sloader.Config.Tests  Total: 23, Errors: 0, Failed: 0, Skipped: 0, Time: 0.554s\n   Sloader.Engine.Tests  Total: 17, Errors: 0, Failed: 0, Skipped: 0, Time: 1.070s\n   Sloader.Result.Tests  Total:  4, Errors: 0, Failed: 0, Skipped: 0, Time: 1.061s\n                                --          -          -           -        ------\n                   GRAND TOTAL: 44          0          0           0        2.684s (5.697s)\nFinished executing task: RunTests\n\n========================================\nBuildPackages\n========================================\nExecuting task: BuildPackages\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:09.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" on node 1 (Build target(s))\n.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release\\Sloader.Config.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.22\nAttempting to build package from 'Sloader.Config.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release'.\nUsing 'Sloader.Config.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Config.0.2.1.nupkg'.\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:10.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" on node 1 (Build target(s))\n.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release\\Sloader.Result.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.24\nAttempting to build package from 'Sloader.Result.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release'.\nUsing 'Sloader.Result.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Result.0.2.1.nupkg'.\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:12.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" on node 1 (Build target(s))\n.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (1) is building \"C:\\Users\\R\nobert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (2) on node 1 (default targets).\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release\\Sloader.Config.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (default targ\nets).\n\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (1) is building \"C:\\Users\\R\nobert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (3) on node 1 (default targets).\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release\\Sloader.Result.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (default targ\nets).\n\nBclBuildEnsureBindingRedirects:\nSkipping target \"BclBuildEnsureBindingRedirects\" because all output files are up-to-date with respect to the input file\ns.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\n_CopyAppConfigFile:\nSkipping target \"_CopyAppConfigFile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\bin\\Release\\Sloader.Engine.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.54\nAttempting to build package from 'Sloader.Engine.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\bin\\Release'.\nUsing 'Sloader.Engine.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Engine.0.2.1.nupkg'.\nFinished executing task: BuildPackages\n\nTask                          Duration\n--------------------------------------------------\nClean                         00:00:00.1083837\nRestore-NuGet-Packages        00:00:00.7808530\nBuildTests                    00:00:02.6296445\nRunTests                      00:00:05.9397822\nBuildPackages                 00:00:05.2679058\n--------------------------------------------------\nTotal:                        00:00:14.7265692\n</code></pre>\n</div>\n","Href":"https://blog.codeinside.eu/2017/02/13/create-nuget-packages-with-cake/","RawContent":null},{"Title":"Build & run xUnit tests with Cake","PublishedOn":"2017-02-07T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Last year I already covered the <strong><a href=\"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/\">basic usage of Cake</a></strong>, which stands for “C# Make”. This time we want to build and run <strong><a href=\"https://xunit.github.io/\">xUnit</a></strong> tests with Cake.</p>\n\n<h2 id=\"scenario\">Scenario</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-07/proj.png\" alt=\"x\" title=\"Demo proj\" /></p>\n\n<p>Let’s say we have this project structure. Be aware that all our tests have the suffix “Tests” in the project name.</p>\n\n<p>The files are organized like this, so we have all “Tests” in a “tests” folder and the actual code under “src”:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>src/Sloader.Config\nsrc/Sloader.Engine\nsrc/Sloader.Hosts.Console\nsrc/Sloader.Result\ntests/Sloader.Config.Tests\ntests/Sloader.Engine.Tests\ntests/Sloader.Result.Tests\n.gitignore\nbuild.cake\nbuild.ps1\nLICENSE\nSloader.sln\n</code></pre>\n</div>\n\n<h2 id=\"goal\">Goal</h2>\n\n<p>Now we want to build all tests projects and run them with the xUnit console runner. Be aware that there are multiple ways of doing it, but I found this quite good.</p>\n\n<h2 id=\"buildcake\">build.cake</h2>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>#tool \"nuget:?package=xunit.runner.console\"\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// PREPARATION\n//////////////////////////////////////////////////////////////////////\n\n// Define directories.\nvar artifactsDir  = Directory(\"./artifacts/\");\nvar rootAbsoluteDir = MakeAbsolute(Directory(\"./\")).FullPath;\n\n//////////////////////////////////////////////////////////////////////\n// TASKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does(() =&gt;\n{\n    CleanDirectory(artifactsDir);\n});\n\nTask(\"Restore-NuGet-Packages\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =&gt;\n{\n    NuGetRestore(\"./Sloader.sln\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n\n     \n});\n\nTask(\"BuildTests\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n\tvar parsedSolution = ParseSolution(\"./Sloader.sln\");\n\n\tforeach(var project in parsedSolution.Projects)\n\t{\n\t\n\tif(project.Name.EndsWith(\".Tests\"))\n\t\t{\n        Information(\"Start Building Test: \" + project.Name);\n\n        MSBuild(project.Path, new MSBuildSettings()\n                .SetConfiguration(\"Debug\")\n                .SetMSBuildPlatform(MSBuildPlatform.Automatic)\n                .SetVerbosity(Verbosity.Minimal)\n                .WithProperty(\"SolutionDir\", @\".\\\")\n                .WithProperty(\"OutDir\", rootAbsoluteDir + @\"\\artifacts\\_tests\\\" + project.Name + @\"\\\"));\n\t\t}\n\t\n\t}    \n\n});\n\nTask(\"RunTests\")\n    .IsDependentOn(\"BuildTests\")\n    .Does(() =&gt;\n{\n    Information(\"Start Running Tests\");\n    XUnit2(\"./artifacts/_tests/**/*.Tests.dll\");\n});\n\n//////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Default\")\n    .IsDependentOn(\"RunTests\");\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n</code></pre>\n</div>\n\n<h2 id=\"explanation-buildtests\">Explanation: BuildTests?</h2>\n\n<p>The default target “Default” will trigger “RunTests”, which depend on “BuildTests”.</p>\n\n<p>Inside the “BuildTests”-target we use a handy helper from Cake and we parse the .sln file and search all “Test”-projects.\nWith that information we can build each test individually and don’t have to worry over “overlapping” files. \nThe output of this build will be saved at <strong>“artifacts/_tests”</strong>.</p>\n\n<h2 id=\"running-xunit\">Running xUnit</h2>\n\n<p>To run <a href=\"http://cakebuild.net/dsl/xunit-v2/\">xUnit</a> we have to include the runner at the top of the cake file:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>#tool \"nuget:?package=xunit.runner.console\"\n</code></pre>\n</div>\n\n<p>Now we can just invoke XUnit2 and scan for all Tests.dlls and we are done:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>XUnit2(\"./artifacts/_tests/**/*.Tests.dll\");\n</code></pre>\n</div>\n\n<h2 id=\"result\">Result</h2>\n\n<p>The console output should make the flow pretty clear:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>PS C:\\Users\\Robert\\Documents\\GitHub\\Sloader&gt; .\\build.ps1\nPreparing to run build script...\nRunning build script...\nAnalyzing build script...\nProcessing build script...\nInstalling tools...\nCompiling build script...\n\n========================================\nClean\n========================================\nExecuting task: Clean\nCreating directory C:/Users/Robert/Documents/GitHub/Sloader/artifacts\nFinished executing task: Clean\n\n========================================\nRestore-NuGet-Packages\n========================================\nExecuting task: Restore-NuGet-Packages\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nAll packages listed in packages.config are already installed.\nFinished executing task: Restore-NuGet-Packages\n\n========================================\nBuildTests\n========================================\nExecuting task: BuildTests\nStart Building Test: Sloader.Config.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config.dll\n  Sloader.Config.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config\n  .Tests.dll\nStart Building Test: Sloader.Result.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result.dll\n  Sloader.Result.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result\n  .Tests.dll\nStart Building Test: Sloader.Engine.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Config.dll\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Result.dll\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine.dll\n  Sloader.Engine.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine\n  .Tests.dll\nFinished executing task: BuildTests\n\n========================================\nRunTests\n========================================\nExecuting task: RunTests\nStart Running Tests\nxUnit.net Console Runner (64-bit .NET 4.0.30319.42000)\n  Discovering: Sloader.Config.Tests\n  Discovered:  Sloader.Config.Tests\n  Starting:    Sloader.Config.Tests\n  Finished:    Sloader.Config.Tests\n  Discovering: Sloader.Engine.Tests\n  Discovered:  Sloader.Engine.Tests\n  Starting:    Sloader.Engine.Tests\n  Finished:    Sloader.Engine.Tests\n  Discovering: Sloader.Result.Tests\n  Discovered:  Sloader.Result.Tests\n  Starting:    Sloader.Result.Tests\n  Finished:    Sloader.Result.Tests\n=== TEST EXECUTION SUMMARY ===\n   Sloader.Config.Tests  Total: 22, Errors: 0, Failed: 0, Skipped: 0, Time: 0.342s\n   Sloader.Engine.Tests  Total:  9, Errors: 0, Failed: 0, Skipped: 0, Time: 0.752s\n   Sloader.Result.Tests  Total:  4, Errors: 0, Failed: 0, Skipped: 0, Time: 0.475s\n                                --          -          -           -        ------\n                   GRAND TOTAL: 35          0          0           0        1.569s (3.115s)\nFinished executing task: RunTests\n\n========================================\nDefault\n========================================\nExecuting task: Default\nFinished executing task: Default\n\nTask                          Duration\n--------------------------------------------------\nClean                         00:00:00.0155255\nRestore-NuGet-Packages        00:00:00.5065704\nBuildTests                    00:00:02.1590662\nRunTests                      00:00:03.2443534\nDefault                       00:00:00.0061325\n--------------------------------------------------\nTotal:                        00:00:05.9316480\n</code></pre>\n</div>\n","Href":"https://blog.codeinside.eu/2017/02/07/build-and-run-xunit-tests-with-cake/","RawContent":null},{"Title":"GitHub API: Create or update files","PublishedOn":"2017-01-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This blogpost covers a pretty basic GitHub topic: Creating and updating content on GitHub. Of course, there are many ways to do it - e.g. you could do the full Git-ceremony and it would work with all Git hosts, but in my case I just wanted to target the <a href=\"https://developer.github.com/v3/\"><strong>offical GitHub API</strong></a>.</p>\n\n<h2 id=\"prerequisite-a-github-user-repo-and-token\">Prerequisite: A GitHub User, Repo and Token</h2>\n\n<p>To use this code you will need write access to a GitHub repository and you should have a valid <a href=\"https://github.com/settings/tokens\">GitHub token</a>.</p>\n\n<h2 id=\"code\">Code</h2>\n\n<p>The most simple way to communicate with the <a href=\"https://developer.github.com/v3/\">GitHub API</a> is by using the <a href=\"https://www.nuget.org/packages/Octokit/\">Octokit SDK</a> (from GitHub).</p>\n\n<p>Description:\nInside the try-block we try to <a href=\"https://developer.github.com/v3/repos/contents/#get-contents\">get the target file</a>, if it is already committed in the repo the API will return the last commit SHA.</p>\n\n<p>With this SHA it is possible to <a href=\"https://developer.github.com/v3/repos/contents/#update-a-file\">create a new commit to do the actual update</a>.</p>\n\n<p>If the file was not found, <a href=\"https://developer.github.com/v3/repos/contents/#create-a-file\">we create the file</a>. I’m not a huge fan of this try/catch block, but didn’t found any other way to check if the file is comitted or not (please give me a hint if this is wrong ;))</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Octokit;\n\nnamespace CreateOrUpdateGitHubFile\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Task.Run(async () =&gt;\n            {\n                var ghClient = new GitHubClient(new ProductHeaderValue(\"Octokit-Test\"));\n                ghClient.Credentials = new Credentials(\"ACCESS-TOKEN\");\n\n                // github variables\n                var owner = \"OWNER\";\n                var repo = \"REPO\";\n                var branch = \"BRANCH\";\n\n                var targetFile = \"_data/test.txt\";\n\n                try\n                {\n                    // try to get the file (and with the file the last commit sha)\n                    var existingFile = await ghClient.Repository.Content.GetAllContentsByRef(owner, repo, targetFile, branch);\n\n                    // update the file\n                    var updateChangeSet = await ghClient.Repository.Content.UpdateFile(owner, repo, targetFile,\n                       new UpdateFileRequest(\"API File update\", \"Hello Universe! \" + DateTime.UtcNow, existingFile.First().Sha, branch));\n                }\n                catch (Octokit.NotFoundException)\n                {\n                    // if file is not found, create it\n                    var createChangeSet = await ghClient.Repository.Content.CreateFile(owner,repo, targetFile, new CreateFileRequest(\"API File creation\", \"Hello Universe! \" + DateTime.UtcNow, branch));\n                }\n\n                \n                \n            }).Wait();\n        }\n    }\n}\n</code></pre>\n</div>\n\n<p>The demo code is also available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2017/CreateOrUpdateGitHubFile\"><strong>GitHub</strong></a>.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2017/01/02/create-or-update-files-via-the-github-api/","RawContent":null},{"Title":"DbProviderFactories: Write database agnostic ADO.NET code","PublishedOn":"2016-12-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Recently I needed to write a module that needs to connect to a wide range of SQL-DBs, e.g. MySQL, MS SQL, Oracle etc.</p>\n\n<h2 id=\"problem-most-providers-will-use-their-concret-classes\">Problem: Most providers will use their concret classes</h2>\n\n<p>If you look at the C# example on the <a href=\"https://dev.mysql.com/doc/connector-net/en/connector-net-programming-connecting-open.html\">MySQL dev page</a> you will see the MsSql-Namespace and classes:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>MySql.Data.MySqlClient.MySqlConnection conn;\nstring myConnectionString;\n\nmyConnectionString = \"server=127.0.0.1;uid=root;\" +\n    \"pwd=12345;database=test;\";\n\ntry\n{\n    conn = new MySql.Data.MySqlClient.MySqlConnection();\n    conn.ConnectionString = myConnectionString;\n    conn.Open();\n}\ncatch (MySql.Data.MySqlClient.MySqlException ex)\n{\n    MessageBox.Show(ex.Message);\n}\n</code></pre>\n</div>\n\n<p>The same classes will probably not work for a MS SQL database.</p>\n\n<h2 id=\"solution-use-the-dbproviderfactories\">“Solution”: Use the DbProviderFactories</h2>\n\n<p>For example if you install the <a href=\"https://www.nuget.org/packages/MySql.Data\">MySql-NuGet package</a> you will also get this little enhancement to you app.config:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;system.data&gt;\n  &lt;DbProviderFactories&gt;\n    &lt;remove invariant=\"MySql.Data.MySqlClient\" /&gt;\n    &lt;add name=\"MySQL Data Provider\" invariant=\"MySql.Data.MySqlClient\" description=\".Net Framework Data Provider for MySQL\" type=\"MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d\" /&gt;\n  &lt;/DbProviderFactories&gt;\n&lt;/system.data&gt;\n</code></pre>\n</div>\n\n<p>Now we can get a reference to the MySql client via the DbProviderFactories:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>using System;\nusing System.Data;\nusing System.Data.Common;\n\nnamespace DbProviderFactoryStuff\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.WriteLine(\"All registered DbProviderFactories:\");\n                var allFactoryClasses = DbProviderFactories.GetFactoryClasses();\n\n                foreach (DataRow row in allFactoryClasses.Rows)\n                {\n                    Console.WriteLine(row[0] + \": \" + row[2]);\n                }\n\n                Console.WriteLine();\n                Console.WriteLine(\"Try to access a MySql DB:\");\n\n                DbProviderFactory dbf = DbProviderFactories.GetFactory(\"MySql.Data.MySqlClient\");\n                using (DbConnection dbcn = dbf.CreateConnection())\n                {\n                    dbcn.ConnectionString = \"Server=localhost;Database=testdb;Uid=root;Pwd=Pass1word;\";\n                    dbcn.Open();\n                    using (DbCommand dbcmd = dbcn.CreateCommand())\n                    {\n                        dbcmd.CommandType = CommandType.Text;\n                        dbcmd.CommandText = \"SHOW TABLES;\";\n\n                        // parameter...\n                        //var foo = dbcmd.CreateParameter();\n                        //foo.ParameterName = \"...\";\n                        //foo.Value = \"...\";\n\n                        using (DbDataReader dbrdr = dbcmd.ExecuteReader())\n                        {\n                            while (dbrdr.Read())\n                            {\n                                Console.WriteLine(dbrdr[0]);\n                            }\n                        }\n                    }\n                }\n            }\n            catch (Exception exc)\n            {\n                Console.WriteLine(exc.Message);\n            }\n\n            Console.ReadLine();\n\n        }\n    }\n}\n</code></pre>\n</div>\n\n<p>The most important line is this one:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>DbProviderFactory dbf = DbProviderFactories.GetFactory(\"MySql.Data.MySqlClient\");\n</code></pre>\n</div>\n\n<p>Now with the <a href=\"https://msdn.microsoft.com/en-us/library/system.data.common.dbproviderfactory(v=vs.110).aspx\"><strong>DbProviderFactory</strong></a> from the MySql client we can access the MySql database without using any MySql-specific classes.</p>\n\n<p>There are a couple of “in-built” db providers registered, like the MS SQL provider or ODBC stuff.</p>\n\n<p>The above code will output something like this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>All registered DbProviderFactories:\nOdbc Data Provider: System.Data.Odbc\nOleDb Data Provider: System.Data.OleDb\nOracleClient Data Provider: System.Data.OracleClient\nSqlClient Data Provider: System.Data.SqlClient\nMicrosoft SQL Server Compact Data Provider 4.0: System.Data.SqlServerCe.4.0\nMySQL Data Provider: MySql.Data.MySqlClient\n</code></pre>\n</div>\n\n<h2 id=\"other-solutions\">Other solutions</h2>\n\n<p>Of course there are other solutions - some OR-Mapper like the EntityFramework have a provider model which might also work, but this one here is a pretty basic approach.</p>\n\n<h2 id=\"sql-commands\">SQL Commands</h2>\n\n<p>The tricky bit here is that you need to make sure that your SQL commands work on your database - this is <strong>not a silver bullet</strong>, it <strong>just lets you connect and execute SQL commands to any ‘registered’ database</strong>.</p>\n\n<p>The full demo code is also available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/DbProviderFactoryStuff\"><strong>GitHub</strong></a>.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2016/12/31/dbproviderfactory-write-database-agnostic-adonet-code/","RawContent":null},{"Title":"Enable SSL with custom domains on GitHub Pages via Cloudflare","PublishedOn":"2016-11-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Two weeks ago I decided (finally!) that I should enable SSL on this blog.</p>\n\n<h2 id=\"problem-github-pages-with-a-custom-domain\">Problem: GitHub Pages with a custom domain</h2>\n\n<p>This blog is hosted on GitHub Pages with a custom domain, which currently doesn’t support SSL out of the box. If you stick with a github.io domain SSL is not a problem.</p>\n\n<h2 id=\"cloudflare-to-the-rescure\">Cloudflare to the rescure</h2>\n\n<p>I decided to take a deeper look at <strong><a href=\"https://www.cloudflare.com\">Cloudflare</a></strong>, which provides DNS, CDN and other “network”-related services. For the “main” service Cloudflare serves as the DNS for your domain and is like a proxy.</p>\n\n<p>With this setup you have some nice benefits:</p>\n\n<ul>\n  <li>A free SSL certificate (AFAIK you can also use your own cert if you need)</li>\n  <li>A CDN cache</li>\n  <li>DDOS protection</li>\n  <li>“Analytics”</li>\n</ul>\n\n<p>Be aware: This is just the <strong>free plan</strong>.</p>\n\n<p>And everything is pretty easy to manage via the web interface.</p>\n\n<h3 id=\"setup\">Setup</h3>\n\n<p>The first step is to register at Cloudflare &amp; setup your domain. After the first step you need to change the name server for your domain to Cloudflares server.</p>\n\n<p>All your domain belonging can now be managed inside Cloudflare:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-11-14/dns.png\" alt=\"x\" title=\"DNS\" /></p>\n\n<h3 id=\"setting-up-some-rules\">Setting up some rules</h3>\n\n<p>When your DNS changes are done (which can take a couple of hours) you might want to introduce some basic rules. I use these settings, which enforces HTTPS and Cloudflare cache:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-11-14/rules.png\" alt=\"x\" title=\"Rules\" /></p>\n\n<h3 id=\"done-or-nearly-done\">Done… or nearly done.</h3>\n\n<p>Now we have done the “Cloudflare-part”. The next step is to make sure that everything on your page uses HTTPS instead of HTTP to avoid “mixed content”-errors.</p>\n\n<p>Some notes from my own “migration”:</p>\n\n<ul>\n  <li>If you have Google Analytics - make sure you change the property-settings to the HTTPS URL</li>\n  <li>If you use Disqus you <strong>need</strong> to migrate your comments from the HTTP url to the HTTPS URL. There is a migrate tool available, which uses a CSV file.</li>\n</ul>\n\n<h2 id=\"other-solutions\">Other solutions…</h2>\n\n<p>As far as I know there are other, similar, providers out there and of course you can host the page yourself.</p>\n\n<p>Cloudflare is an easy solution if you are willing to hand of the DNS settings of your domain.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/11/14/ssl-with-custom-domains-on-gh-pages-via-cloudflare/","RawContent":null},{"Title":"Writing loops in T-SQL","PublishedOn":"2016-10-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The topic is quite old, but I found it really helpful, so be warned.</p>\n\n<h2 id=\"scenario-iterate-over-a-result-set-and-insert-it-in-a-new-table-in-t-sql\">Scenario: Iterate over a result set and insert it in a new table in T-SQL</h2>\n\n<p>I had to write a SQL migration script to move date from an old table into a new table with a new primary key.</p>\n\n<p><em>Update! I discovered that my problem would have been solved with a much simpler SQL script (INSERT INTO x …(SELECT … FROM Y)). So my example here is pretty dumb - sorry if this confuses you, but I will keep the blogpost to show the mechanics. Thanks Mark!</em></p>\n\n<p>Here was/is my resulting script using <strong><a href=\"https://msdn.microsoft.com/en-us/library/ms180169.aspx\">T-SQL Cursors</a></strong>:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>DECLARE @TemplateId as uniqueidentifier;\nDECLARE @UserId as uniqueidentifier;\n\nDECLARE @OldTemplateFavCursor as CURSOR;\n\nSET @OldTemplateFavCursor = CURSOR FOR\nSELECT UserTemplate.[Template_Id], UserTemplate.[User_Id] FROM UserTemplate;\n \nOPEN @OldTemplateFavCursor;\nFETCH NEXT FROM @OldTemplateFavCursor INTO @TemplateId, @UserId;\n \nWHILE @@FETCH_STATUS = 0\nBEGIN\n INSERT INTO dbo.[UserFavoriteTemplate]\n           ([Id]\n           ,[TemplateId]\n           ,[UserId])\n     VALUES\n           (NEWID()\n           ,@TemplateId\n           ,@UserId)\n\nFETCH NEXT FROM @OldTemplateFavCursor INTO @TemplateId, @UserId;\nEND\n \nCLOSE @OldTemplateFavCursor;\nDEALLOCATE @OldTemplateFavCursor;\n</code></pre>\n</div>\n\n<h2 id=\"explanation\">Explanation</h2>\n\n<p>In the first couple of lines we just declare some variables.</p>\n\n<p>In this particular script we want to move the “TemplateId” &amp; “UserId” from the table “UserTemplate” into the target table “UserFavoriteTemplate”, but I also want to store an additional GUID as Id.</p>\n\n<p>This line will select our current data into the cursor:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>SET @OldTemplateFavCursor = CURSOR FOR SELECT UserTemplate.[Template_Id], UserTemplate.[User_Id] FROM UserTemplate;\n</code></pre>\n</div>\n\n<p>With the “OPEN”, “FETCH NEXT” and “CLOSE” we move the cursor and inside the “WHILE” we can do our migration.</p>\n\n<p>The syntax seems (from a C# perspective) strange, but works well for this scenario.</p>\n\n<h2 id=\"performance-consideration\">Performance consideration</h2>\n\n<p>I wouldn’t recommend this approach for large scale migrations or actual production code because I heard that the performance is not as great as some clever joins or other T-SQL magic.</p>\n\n<h2 id=\"make-sure-you-really-need-this\">Make sure you really need this</h2>\n\n<p>You can do some clever joins with SQL - make sure you really need this approach. My example here is not a clever one, so use this feature wisely. (again - thanks to Mark for the comment!)</p>\n\n<p><strong>Thanks Christopher for your help!</strong></p>\n","Href":"https://blog.codeinside.eu/2016/10/31/loops-in-tsql/","RawContent":null},{"Title":"Lets convert a WPF app to the Universal Windows Platform","PublishedOn":"2016-09-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"project-centennial---running-desktop-apps-in-the-uwp-world\">Project Centennial - running desktop apps in the UWP world</h2>\n\n<p>Last year Microsoft revealed the plans to run and distribute desktop apps (basically all apps ever written for Windows) in the Universal-Windows-Platform “universe”. The project titel was <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=51691\">“Project Centennial”</a> and a year later the tooling seems to be ok-ish. So, let’s try something simple and convert a simple WPF app to UWP.</p>\n\n<h2 id=\"limitations-with-this-approach\">Limitations with this approach</h2>\n\n<p>Be aware that even if you can “convert” your WPF app this way you will get a UWP-ish app. The executable will only run <strong>on a normal Windows Desktop System</strong>. The app will <strong>not work on a Windows Phone, Xbox or HoloLens</strong> - at least not now.</p>\n\n<p>Also keep in mind that certain operations might fail and that the outcome of some operations might suprise you. The app itself will run in a kind of sandbox. Calls to the file system or registry will be faked. Details can be found <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-behind-the-scenes\">here</a>.</p>\n\n<p>As far as I know from a couple of hours playing around:</p>\n\n<ul>\n  <li>Changes to the Registry will not leak out of the sandbox, but for the app it will be seen as ok and is persistent</li>\n  <li>Changes to Well-Known-Folders (e.g. %AppData%) will not leak out of the sandbox, but for the app it will be seen as ok and is persistent</li>\n  <li>Some operation can leak out to the actual desktop, e.g. start another programm.</li>\n</ul>\n\n<h2 id=\"the-desktop-app-converter\">The Desktop App Converter</h2>\n\n<p>If you have an existing installer or setup you might want to take a look at the [desktop app converter](https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-run-desktop-app-converter. This utility will convert the installer to a UWP package.</p>\n\n<p><a href=\"https://mtaulty.com/2016/09/29/a-quick-skip-through-the-desktop-app-converter/\">A quick walk through can be found on Mike Taultys blog</a>.</p>\n\n<h2 id=\"step-by-step---from-wpf-source-to-uwp-app\">Step by Step - from WPF source to UWP app</h2>\n\n<p>The important steps from the WPF app to a UWP app are also <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-manual-conversion\">documented in the MSDN</a>.</p>\n\n<p>But let’s start with a <strong>simple WPF app (running on .NET 4.6.1)</strong> - this is the MainWindow.xaml</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;Window x:Class=\"WpfToUwpTestApp.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfToUwpTestApp\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow - WpfToUwpTestApp\" Height=\"350\" Width=\"525\"&gt;\n    &lt;StackPanel&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click1\"&gt;Write in Registry&lt;/Button&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click2\"&gt;Write in AppData&lt;/Button&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click3\"&gt;Open HTTP Address&lt;/Button&gt;\n\n    &lt;/StackPanel&gt;\n&lt;/Window&gt;\n</code></pre>\n</div>\n\n<p>The code behind:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>public partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n    }\n\n    private void Button_Click1(object sender, RoutedEventArgs e)\n    {\n        RegistryKey key = Registry.CurrentUser.OpenSubKey(\"Software\", true);\n\n        key.CreateSubKey(\"WpfToUwpTestApp\");\n        key = key.OpenSubKey(\"WpfToUwpTestApp\", true);\n\n\n        key.CreateSubKey(\"ItWorks\");\n        key = key.OpenSubKey(\"ItWorks\", true);\n\n        key.SetValue(\"ItWorks\", \"true\");\n    }\n\n    private void Button_Click2(object sender, RoutedEventArgs e)\n    {\n        string roaming = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n\n        string appFolder = System.IO.Path.Combine(roaming, \"WpfToUwpTestApp\");\n\n        string file = System.IO.Path.Combine(appFolder, \"Test.txt\");\n\n        if (Directory.Exists(appFolder) == false)\n        {\n            Directory.CreateDirectory(appFolder);\n        }\n\n        File.WriteAllText(file, \"Hello World!\");\n    }\n\n    private void Button_Click3(object sender, RoutedEventArgs e)\n    {\n        Process.Start(\"http://www.google.com\");\n    }\n}\n</code></pre>\n</div>\n\n<p>Pretty simple, right? Those three operations came just to my mind. In general I wouldn’t use the Registry at all, but I had a use case in mind where I need to access the Registry.</p>\n\n<p>I also added a couple of dummy store images (from the default UWP app project template) - my solution looks like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/sln.png\" alt=\"x\" title=\"Solution\" /></p>\n\n<p>When we build the .csproj the output should look like this:</p>\n\n<ul>\n  <li>WpfToUwpTestApp.exe</li>\n  <li>appxmanifest.xml</li>\n  <li>Assets/StoreLogo.png</li>\n  <li>Assets/Square150x150Logo.scale-200.png</li>\n  <li>Assets/Square44x44Logo.scale-200.png</li>\n</ul>\n\n<h2 id=\"the-appmanifestxml\">The appmanifest.xml</h2>\n\n<p>The next step is to create the <strong>appmanifest.xml</strong> - on the <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-manual-conversion\">MSDN there is a handy template</a>. The Desktop App Converter does the same thing and tries to create this file automatically, but it’s not that hard to set it by hand:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;Package</span>\n   <span class=\"na\">xmlns=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\"</span>\n   <span class=\"na\">xmlns:uap=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/uap/windows10\"</span>\n   <span class=\"na\">xmlns:rescap=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;Identity</span> <span class=\"na\">Name=</span><span class=\"s\">\"WpfToUwpTestApp\"</span>\n    <span class=\"na\">ProcessorArchitecture=</span><span class=\"s\">\"x64\"</span>\n    <span class=\"na\">Publisher=</span><span class=\"s\">\"CN=Robert\"</span>\n    <span class=\"na\">Version=</span><span class=\"s\">\"1.0.0.0\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;Properties&gt;</span>\n    <span class=\"nt\">&lt;DisplayName&gt;</span>WpfToUwpTestApp<span class=\"nt\">&lt;/DisplayName&gt;</span>\n    <span class=\"nt\">&lt;PublisherDisplayName&gt;</span>Robert<span class=\"nt\">&lt;/PublisherDisplayName&gt;</span>\n    <span class=\"nt\">&lt;Description&gt;</span>No description entered<span class=\"nt\">&lt;/Description&gt;</span>\n    <span class=\"nt\">&lt;Logo&gt;</span>Assets/StoreLogo.png<span class=\"nt\">&lt;/Logo&gt;</span>\n  <span class=\"nt\">&lt;/Properties&gt;</span>\n  <span class=\"nt\">&lt;Resources&gt;</span>\n    <span class=\"nt\">&lt;Resource</span> <span class=\"na\">Language=</span><span class=\"s\">\"en-us\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Resources&gt;</span>\n  <span class=\"nt\">&lt;Dependencies&gt;</span>\n    <span class=\"nt\">&lt;TargetDeviceFamily</span> <span class=\"na\">Name=</span><span class=\"s\">\"Windows.Desktop\"</span> <span class=\"na\">MinVersion=</span><span class=\"s\">\"10.0.14316.0\"</span> <span class=\"na\">MaxVersionTested=</span><span class=\"s\">\"10.0.14316.0\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Dependencies&gt;</span>\n  <span class=\"nt\">&lt;Capabilities&gt;</span>\n    <span class=\"nt\">&lt;rescap:Capability</span> <span class=\"na\">Name=</span><span class=\"s\">\"runFullTrust\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Capabilities&gt;</span>\n  <span class=\"nt\">&lt;Applications&gt;</span>\n    <span class=\"nt\">&lt;Application</span> <span class=\"na\">Id=</span><span class=\"s\">\"Test\"</span> <span class=\"na\">Executable=</span><span class=\"s\">\"WpfToUwpTestApp.exe\"</span> <span class=\"na\">EntryPoint=</span><span class=\"s\">\"Windows.FullTrustApplication\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;uap:VisualElements</span>\n       <span class=\"na\">BackgroundColor=</span><span class=\"s\">\"#464646\"</span>\n       <span class=\"na\">DisplayName=</span><span class=\"s\">\"WpfToUwpTestApp\"</span>\n       <span class=\"na\">Square150x150Logo=</span><span class=\"s\">\"Assets/Square150x150Logo.scale-200.png\"</span>\n       <span class=\"na\">Square44x44Logo=</span><span class=\"s\">\"Assets/Square44x44Logo.scale-200.png\"</span>\n       <span class=\"na\">Description=</span><span class=\"s\">\"WpfUwpWriteInRegistry - Desc\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/Application&gt;</span>\n  <span class=\"nt\">&lt;/Applications&gt;</span>\n<span class=\"nt\">&lt;/Package&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"create-the-appappx-package\">Create the App.appx package</h2>\n\n<p>Now we are ready to create the appx package. You need the Windows 10 SDK to do this.</p>\n\n<p>To simplify things, I copied the needed files from the build output to a folder called _App.</p>\n\n<p>To create the package, invoke the following command:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\makeappx.exe\" pack -d \"%~dp0_App\" -p \"%~dp0App.appx\"\n</code></pre>\n</div>\n\n<p>The result is a unsigned appx package called “App”.</p>\n\n<h2 id=\"create-a-valid-pfx-one-time-only\">Create a valid pfx (one time only)</h2>\n\n<p>In the following step we need a valid pfx to sign the package. For development you can use this command to create a pfx:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\makecert.exe\" -r -h 0 -n \"CN=Robert\" -eku 1.3.6.1.5.5.7.3.3 -pe -sv App.pvk App.cer \n\n\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\pvk2pfx.exe\" -pvk App.pvk -spc App.cer -pfx App.pfx -po apptest\n</code></pre>\n</div>\n\n<p>After this you should see a “App.pfx” in the folder. I’m not 100% sure if this step is really needed, but I needed to do it, otherwise I couldn’t install the app:</p>\n\n<p>Now click on the pfx and enter the password “apptest” and import it in the “Trusted Root CAs”:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/trust.png\" alt=\"x\" title=\"Importing the pfx\" /></p>\n\n<h2 id=\"sign-appappx\">Sign App.appx</h2>\n\n<p>Now we need to sign the package and we are done:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe\" sign /f \"App.pfx\" -fd SHA256 /p apptest \"App.appx\"\n</code></pre>\n</div>\n\n<h2 id=\"install-the-app\">Install the App!</h2>\n\n<p>Now you can double click on the appx package and the installer will show up:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/install.png\" alt=\"x\" title=\"install the app\" /></p>\n\n<h2 id=\"running-the-app\">Running the App</h2>\n\n<p>And there is our beauty:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/app.png\" alt=\"x\" title=\"running the app\" /></p>\n\n<h2 id=\"exploring-the-sandbox\">Exploring the sandbox:</h2>\n\n<p>Remember our 3 methods? The results of those three calls are:</p>\n\n<ul>\n  <li>Write to the Registry: Seems to work for the app, but (as expected) the registry value will not leak out of the “sandbox”</li>\n  <li>Write to %appdata%: Seems to work for the app, but the data value will not leak out of the “sandbox”</li>\n  <li>Open a browser: The default browser will be invoked for a HTTP url.</li>\n</ul>\n\n<p>It was my first try to convert a (simple) WPF app to UWP and the result is interesting.</p>\n\n<p>Hope my first steps in this world might help you!</p>\n\n<p>The code and a handy readme.txt is available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/WpfToUwpTestApp\">GitHub</a>.</p>\n\n<h2 id=\"from-the-comments-fun-with-registydat-files\">From the comments: Fun with registy.dat files:</h2>\n\n<p>James Hancock/John Galt discovered a nice registy trick. His goal was to “fake” a given registry key, so that the converted UWP app can see a “virtual” registry key. This can be done with a file named “registry.dat”.</p>\n\n<p>The registry.dat seems to be the source and target of all write actions inside the app:</p>\n\n<p>“The virtual registery is always the registry.dat. if you don’t provide a default version then one is created on first use for you.</p>\n\n<p>But if you do, then yes you can deploy whatever entries you want as a starting point for your app otherwise the starting point is whatever that computer currently has in the real registry.”</p>\n\n<p>You can create such registry.dat files via RegEdit &amp; export it as registry hive. Be aware, that my test run wasn’t successful, but I hope to get working sample. Until that I hope James comments will be helpful.</p>\n","Href":"https://blog.codeinside.eu/2016/09/30/lets-convert-a-wpf-app-to-uwp-via-the-uwp-bridge/","RawContent":null},{"Title":"TFS 2015: Adding a new Windows Build Agent","PublishedOn":"2016-08-10T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"the-tfs-2015-build-system\">The TFS 2015 Build System</h2>\n\n<p>The build system before TFS 2015 was based on a pretty arcane XAML workflow engine which was manageable, but not fun to use. With TFS 2015 a new build system was implemented, which behave pretty much the same way as other build systems (e.g. TeamCity or AppVeyor).</p>\n\n<p>The “build workflow” is based on a simple “task”-concept.</p>\n\n<p>There are many related topics in the TFS world, e.g. Release-Management, but this blogpost will just focus on the “Getting the system ready”-part.</p>\n\n<h2 id=\"tfs-build-agents\">TFS Build Agents</h2>\n\n<p>Like the other parts of Microsoft the TFS is now also in the cross-platform business. The build system in TFS 2015 is capable of building a huge range of languages. All you need is a \ncompatible build agent.</p>\n\n<p>My (simple) goal was to build a .NET application on a Windows build agent via the new TFS 2015 build system.</p>\n\n<h2 id=\"step-1-adding-a-new-build-agent\">Step 1: Adding a new build agent</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/adding-buildagent.png\" alt=\"Important - Download Agent\" title=\"Important - Download Agent\" />.</p>\n\n<p>This one is maybe the hardest part. Instead of a huge TFS-Agent-Installer.msi you need to navigate inside the TFS control panel to the <strong>“Agent pool”</strong>-tab.</p>\n\n<p>You need at least one pool and need to click the “Download Agent” button.</p>\n\n<h2 id=\"step-2-configure-the-agent\">Step 2: Configure the agent</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/config-buildagent.png\" alt=\"Configuration\" title=\"Configuration\" />.</p>\n\n<p>The .zip package contains the actual build agent executable and a .cmd file.</p>\n\n<p>Invoke the <strong>“ConfigureAgent.cmd”</strong>-file:</p>\n\n<p>We run those agents as Windows Service (which was one of the last config-questions) and are pretty happy with the system.</p>\n\n<h2 id=\"step-3-you-are-done\">Step 3: You are done</h2>\n\n<p>Now your new build agent should appear under the given build agent pool:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/resulting-buildagent.png\" alt=\"TFS Build Agents\" title=\"TFS Build Agents\" />.</p>\n\n<h2 id=\"msdn-link\">MSDN Link</h2>\n\n<p>After googleing around I also found the <strong><a href=\"https://www.visualstudio.com/en-us/docs/build/agents/windows\">corresponding TFS HowTo</a></strong>, which describes more or less the complete setup. Well… now it is documented on MSDN and this blog. Maybe this will help my future-self ;)</p>\n","Href":"https://blog.codeinside.eu/2016/08/10/adding-a-new-windowsagent-to-tfs2015-build/","RawContent":null},{"Title":"CAKE: Building solutions with C# & Roslyn","PublishedOn":"2016-07-09T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-07-09/cake.png\" alt=\"x\" title=\"CAKE - C# Make\" /></p>\n\n<h2 id=\"cake---c-make\">CAKE - C# Make</h2>\n\n<ul>\n  <li>A DSL for build tasks (e.g. build following projects, copy stuff, deploy stuff etc.)</li>\n  <li>It’s just C# code that gets compiled via Roslyn</li>\n  <li><a href=\"https://github.com/cake-build/cake\">Active community, OSS &amp; written in C#</a></li>\n  <li>You can get CAKE via <a href=\"https://www.nuget.org/packages/Cake\">NuGet</a></li>\n  <li>Before we begin you might want to check out the actual website of <a href=\"http://cakebuild.net/\">CAKE</a></li>\n  <li>Cross Platform support</li>\n</ul>\n\n<p>Our goal: Building, running tests, package NuGet Packages etc.</p>\n\n<h2 id=\"related-msbuild-and-fake-blogposts\">Related: MSBuild and FAKE blogposts</h2>\n\n<p>I already did a couple of MSBuild and FAKE related blogposts, so if you are interested on these topics as well go ahead (some are quite old, there is a high chance that some pieces might not apply anymore):</p>\n\n<ul>\n  <li><a href=\"http://blog.codeinside.eu/2010/12/15/howto-msbuild-stylecop/\">MSBuild &amp; Stylecop</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/12/howto-build-msbuild-solutions/\">MSBuild &amp; Building solutions</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/21/howto-msdeploy-msbuild/\">MSBuild &amp; MSDeploy</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/24/howto-open-mstest-with-msbuild-2/\">MSBuild &amp; MSTest 1</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/29/howto-open-mstest-with-msbuild/\">MSBuild &amp; MSTest 2</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2011/01/06/howto-msbuild-nuit/\">MSBuild &amp; NUnit</a></li>\n  <li>\n    <p><a href=\"http://blog.codeinside.eu/2010/12/06/howto-web-config-transformations-with-msbuild/\">MSBuild &amp; Web.config Transformations</a></p>\n  </li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/23/fake-building-with-fake/\">“FAKE: Building C# projects without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/24/fake-running-xunit-tests-with-fake/\">“FAKE: Running xUnit Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/06/21/fake-create-nuget-packages/\">“FAKE: Create NuGet Packages without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/08/30/fake-running-mstest-tests-with-fake/\">“FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2016/06/12/fake-build-aspnet-projects-with-webconfig-transform/\">“FAKE: Build ASP.NET projects with web.config transformation (and without knowing a tiny bit of F#)”</a></li>\n</ul>\n\n<p>Ok… now back to CAKE.</p>\n\n<h2 id=\"lets-start-with-the-basics-building\">Let’s start with the basics: Building</h2>\n\n<p>I created a pretty simple WPF app and <a href=\"http://cakebuild.net/docs/tutorials/setting-up-a-new-project\">followed these instructions</a>.</p>\n\n<h2 id=\"the-buildcake-script\">The build.cake script</h2>\n\n<p>My script is a simplified version <a href=\"https://github.com/cake-build/example/blob/master/build.cake\">of this build script</a>:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// ARGUMENTS\nvar target = Argument(\"target\", \"Default\");\n\n// TASKS\nTask(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n    NuGetRestore(\"CakeExampleWithWpf.sln\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n      MSBuild(\"CakeExampleWithWpf.sln\", settings =&gt;\n        settings.SetConfiguration(\"Release\"));\n\n});\n\n// TASK TARGETS\nTask(\"Default\").IsDependentOn(\"Build\");\n\n// EXECUTION\nRunTarget(target);\n</code></pre>\n</div>\n\n<p>If you know FAKE or MSBuild, this is more or less the same structure. You define tasks, which may depend on other tasks. At the end you invoke one task and the dependency chain will do its work.</p>\n\n<h2 id=\"invoke-buildcake\">Invoke build.cake</h2>\n\n<p>The “build.ps1” will invoke “tools/cake.exe” with the input file “build.cake”.</p>\n\n<p><strong>“build.ps1” is just a helper.</strong> \nThis Powershell script will download nuget.exe and download the CAKE NuGet-Package and extract it under a /tools folder. If you don’t have problems with binary files in your source control, you don’t need this Powershell script.</p>\n\n<h2 id=\"our-first-cake-script\">Our first CAKE script!</h2>\n\n<p>The output is very well formatted and should explain the mechanics behind it good enough:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Time Elapsed 00:00:02.86\nFinished executing task: Build\n\n========================================\nDefault\n========================================\nExecuting task: Default\nFinished executing task: Default\n\nTask                          Duration\n--------------------------------------------------\nRestore-NuGet-Packages        00:00:00.5192250\nBuild                         00:00:03.1315658\nDefault                       00:00:00.0113019\n--------------------------------------------------\nTotal:                        00:00:03.6620927\n</code></pre>\n</div>\n\n<p>The first steps are pretty easy and it’s much easier than MSBuild and feels good if you know C#.</p>\n\n<p>The super simple intro code can be found on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/CakeIntro\"><strong>GitHub</strong></a>.</p>\n","Href":"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/","RawContent":null},{"Title":"FAKE: Build ASP.NET projects with web.config transformation (and without knowing a tiny bit of F#)","PublishedOn":"2016-06-12T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><em>This is a follow-up to my other FAKE posts:</em></p>\n\n<ul>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/23/fake-building-with-fake/\">“FAKE: Building C# projects without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/24/fake-running-xunit-tests-with-fake/\">“FAKE: Running xUnit Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/06/21/fake-create-nuget-packages/\">“FAKE: Create NuGet Packages without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/08/30/fake-running-mstest-tests-with-fake/\">“FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F#”</a></li>\n</ul>\n\n<h2 id=\"whats-the-difference-between-a-aspnet-and-other-projects\">What’s the difference between a ASP.NET and other projects?</h2>\n\n<p>The most obvious difference is that the output is a bunch of dlls and content files. Additionally you might have a <strong>web.debug.config or web.release.config</strong> in your source folder.</p>\n\n<p>Both files are important, because they are used during a Visual-Studio build as a <a href=\"https://msdn.microsoft.com/en-us/library/dd465326(v=vs.110).aspx\"><strong>Web.Config Transformation</strong></a>.</p>\n\n<p>With a normal build the transformation will not kick in, so we need a way to trigger the transformation “manually”.</p>\n\n<h2 id=\"project-overview\">Project Overview</h2>\n\n<p>The sample project consists of one ASP.NET project and the .fsx file.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-06-12/project.png\" alt=\"x\" title=\"Project Overview\" /></p>\n\n<p>The “released” web.config should cover this 3 main transformation parts:</p>\n\n<ul>\n  <li>DefaultConnectionString to ‘ReleaseSQLServer’</li>\n  <li>No “debug”-attribute on system.web</li>\n  <li>developmentMode-AppSetting set to ‘true’</li>\n</ul>\n\n<p><strong>Web.Release.config</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;configuration</span> <span class=\"na\">xmlns:xdt=</span><span class=\"s\">\"http://schemas.microsoft.com/XML-Document-Transform\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;connectionStrings&gt;</span>\n    <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"DefaultConnection\"</span>\n      <span class=\"na\">connectionString=</span><span class=\"s\">\"ReleaseSQLServer\"</span>\n      <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"SetAttributes\"</span> <span class=\"na\">xdt:Locator=</span><span class=\"s\">\"Match(name)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/connectionStrings&gt;</span>\n\n  <span class=\"nt\">&lt;appSettings&gt;</span>\n    <span class=\"nt\">&lt;add</span> <span class=\"na\">key=</span><span class=\"s\">\"developmentMode\"</span> <span class=\"na\">value=</span><span class=\"s\">\"true\"</span> <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"SetAttributes\"</span>\n         <span class=\"na\">xdt:Locator=</span><span class=\"s\">\"Match(key)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/appSettings&gt;</span>\n  \n  <span class=\"nt\">&lt;system.web&gt;</span>\n    <span class=\"nt\">&lt;compilation</span> <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"RemoveAttributes(debug)\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/system.web&gt;</span>\n<span class=\"nt\">&lt;/configuration&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"the-fake-script\">The FAKE script</h2>\n\n<p>We reuse the MSBuild-Helper from FAKE and inject a couple of “Publish”-related stuff, which will trigger the transformation.</p>\n\n<p><strong>A few remarks:</strong> In the “normal” WebDeploy-World you would have a PublishProfile and it would end up with a .zip-file and a couple of other files that fill in parameters like the ConnectionString. With this MSBuild command I mimik a part of this behavior and use the temporary output as our main artifact. In my most apps I use web.config transformations only for “easy” stuff (e.g. remove the debug attribute) - if you are doing fancy stuff and the output is not what you want, please let me know.</p>\n\n<p><strong>This MSBuild command <em>should</em> apply all your web.config transformations.</strong></p>\n\n<p><strong>Publish a ASP.NET project</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>...\nTarget \"BuildWebApp\" (fun _ -&gt;\ntrace \"Building WebHosted Connect...\"\n!! \"**/*.csproj\"\n |&gt; MSBuild artifactsBuildDir \"Package\"\n    [\"Configuration\", \"Release\"\n     \"Platform\", \"AnyCPU\"\n     \"AutoParameterizationWebConfigConnectionStrings\", \"False\"\n     \"_PackageTempDir\", (@\"..\\\" + artifactsDir + @\"Release-Ready-WebApp\")\n     ]\n |&gt; Log \"AppBuild-Output: \"\n)\n...\n</code></pre>\n</div>\n\n<h3 id=\"autoparameterizationwebconfigconnectionstrings-or-how-to-get-rid-of-replacabletoken_\">“AutoParameterizationWebConfigConnectionStrings” or how to get rid of $(ReplacableToken_…</h3>\n\n<p><em>Blogpost updated on 2016-07-18</em></p>\n\n<p>A friend told me that his transformed web.config contained “$(ReplaceableToken_…)” strings. It seems that “connectionStrings” are treated specially. If you have a connectionString in your web.config and don’t set <a href=\"http://stackoverflow.com/questions/7207689/how-to-get-rid-of-replacabletoken-in-web-config-completely\">“AutoParameterizationWebConfigConnectionStrings=False”</a> you will get something like that:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;connectionStrings&gt;\n  &lt;!-- Not the result we are looking for :-/ --&gt;\n  &lt;add name=\"DefaultConnection\" connectionString=\"$(ReplacableToken_DefaultConnection-Web.config Connection String_0)\" providerName=\"System.Data.SqlClient\" /&gt;\n&lt;/connectionStrings&gt;\n</code></pre>\n</div>\n\n<p>I would say this is not the result you are expecting. With the “AutoParameterizationWebConfigConnectionStrings=False” parameter it should either do a transformation or leave the default-connectionString value in the result.</p>\n\n<p><em>Thanks to Timur Zanagar! I completely missed this issue.</em></p>\n\n<h2 id=\"result\">Result</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-06-12/output.png\" alt=\"x\" title=\"Output\" /></p>\n\n<p>This build will produce two artifacts - the build-folder just contains the normal build output, but <strong>without</strong> a web.config transformation.</p>\n\n<p>The other folder contains a ready to deploy web application, <strong>with the web.release.config applied</strong>.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;connectionStrings&gt;\n  &lt;add name=\"DefaultConnection\" connectionString=\"ReleaseSQLServer\" providerName=\"System.Data.SqlClient\" /&gt;\n&lt;/connectionStrings&gt;\n&lt;appSettings&gt;\n  ...\n  &lt;add key=\"developmentMode\" value=\"true\" /&gt;\n&lt;/appSettings&gt;\n&lt;system.web&gt;\n  ...\n&lt;/system.web&gt;\n</code></pre>\n</div>\n\n<p>You can find the complete <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/LetsUseFake-AspNet\">sample &amp; build script on GitHub</a>.</p>\n","Href":"https://blog.codeinside.eu/2016/06/12/fake-build-aspnet-projects-with-webconfig-transform/","RawContent":null},{"Title":"Copy to clipboard with Javascript","PublishedOn":"2016-05-12T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"clipboard-current-state-of-the-art\">Clipboard? Current state of the art…</h2>\n\n<p>I think everybody knows the clipboard. The goal is that we can store text inside the users clipboard, so he can just paste it. Most sites uses either Flash or some sort of mini-popup with a pre-selected text inside a textarea.</p>\n\n<p>Both ways are not super user friendly and Flash is definitely done.</p>\n\n<h2 id=\"clipboard-api\">Clipboard API?</h2>\n\n<p>Currently there are some draft specs for a real clipboard API, but as far as I know, it’s far from <a href=\"http://caniuse.com/#feat=clipboard\">done</a>.</p>\n\n<p><strong>The good news:</strong> For our use case there is a pretty handy workaround available, which I found on <a href=\"http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\">StackOverflow</a>.</p>\n\n<h2 id=\"the-code\">The code:</h2>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;script&gt;\n    function detectIE() {\n        var ua = window.navigator.userAgent;\n\n        var msie = ua.indexOf('MSIE ');\n        if (msie &gt; 0) {\n            // IE 10 or older =&gt; return version number\n            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        var trident = ua.indexOf('Trident/');\n        if (trident &gt; 0) {\n            // IE 11 =&gt; return version number\n            var rv = ua.indexOf('rv:');\n            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        // other browser or edge\n        return false;\n    }\n\n    // source: http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\n    // enhancement with special case for IEs, otherwise the temp textarea will be visible\n    function copyTextToClipboard(text) {\n        if (detectIE()) {\n            try {\n                window.clipboardData.setData('Text', text);\n                console.log('Copying text command via IE-setData');\n            } catch (err) {\n                console.log('Oops, unable to copy via IE-setData');\n            }\n        }\n        else {\n\n            var textArea = document.createElement(\"textarea\");\n\n            //\n            //  This styling is an extra step which is likely not required. \n            //\n            // Why is it here? To ensure:\n            // 1. the element is able to have focus and selection.\n            // 2. if element was to flash render it has minimal visual impact.\n            // 3. less flakyness with selection and copying which might occur if\n            //    the textarea element is not visible.\n            //\n            // The likelihood is the element won't even render, not even a flash,\n            // so some of these are just precautions. \n            // \n            // However in IE the element\n            // is visible whilst the popup box asking the user for permission for\n            // the web page to copy to the clipboard. To prevent this, we are using \n            // the detectIE workaround.\n\n            // Place in top-left corner of screen regardless of scroll position.\n            textArea.style.position = 'fixed';\n            textArea.style.top = 0;\n            textArea.style.left = 0;\n\n            // Ensure it has a small width and height. Setting to 1px / 1em\n            // doesn't work as this gives a negative w/h on some browsers.\n            textArea.style.width = '2em';\n            textArea.style.height = '2em';\n\n            // We don't need padding, reducing the size if it does flash render.\n            textArea.style.padding = 0;\n\n            // Clean up any borders.\n            textArea.style.border = 'none';\n            textArea.style.outline = 'none';\n            textArea.style.boxShadow = 'none';\n\n            // Avoid flash of white box if rendered for any reason.\n            textArea.style.background = 'transparent';\n\n\n            textArea.value = text;\n\n            document.body.appendChild(textArea);\n\n            textArea.select();\n\n            try {\n                var successful = document.execCommand('copy');\n                var msg = successful ? 'successful' : 'unsuccessful';\n                console.log('Copying text command was ' + msg);\n            } catch (err) {\n                console.log('Oops, unable to copy');\n            }\n\n            document.body.removeChild(textArea);\n        }\n\n    }\n&lt;/script&gt;\n</code></pre>\n</div>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<p>The usage is pretty simple, just call copyToClipboard, e.g.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;button type=\"button\" onclick=\"copyTextToClipboard('Foobar!')\"&gt;\n\tSet Foobar to clipboard\n&lt;/button&gt;\n</code></pre>\n</div>\n\n<h2 id=\"documentexeccommandcopy\">document.execCommand(‘copy’)</h2>\n\n<p>This API is a bit strange, because it only works for visible elements and IE might render a small warning. To get rid of this effect we use a older IE-only API. “document.execCommand” is not limited to copy - there are some nice ideas around it. The <strong><a href=\"https://developer.mozilla.org/de/docs/Web/API/Document/execCommand\">Mozilla site</a></strong> has a large documentation about this function.</p>\n\n<p>A full demo is available on <strong><a href=\"https://jsfiddle.net/uxozxb04/1/\">JSFiddle</a></strong> and the code is stored on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/clipboardjs\"><strong>GitHub</strong></a></p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2016/05/12/copy-to-clipboard-with-javascript/","RawContent":null},{"Title":"Get the Windows 10 or 8 accent color in WPF","PublishedOn":"2016-04-26T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-04-26/windows-accent.png\" alt=\"x\" title=\"Windows Color Options\" />.</p>\n\n<h2 id=\"windows-accent-color\">Windows Accent Color</h2>\n\n<p>Since Windows 8 users can choose a system accent color. The color can be seen on the window borders of the default apps and it can be pretty easy be used inside a <a href=\"http://firstfloorsoftware.com/news/win10-dev-using-systemaccentcolor\">UWP App</a>.</p>\n\n<h2 id=\"how-to-get-the-accent-color-in-wpf\">How to get the accent color in WPF?</h2>\n\n<p><strong>Option 1: SystemParameters.WindowGlassBrush - not 100% the same color</strong></p>\n\n<p>As far as I know there are several ways to get the color code, one easy but <strong>not 100% correct</strong> way is to use the <a href=\"https://msdn.microsoft.com/en-us/library/system.windows.systemparameters.windowglassbrush.aspx\">SystemParameters.WindowGlassBrush</a> property that was introduced in .NET 4.5.</p>\n\n<p>Sadly, the color is not 100% correct - I have no idea where this “similar”, but not identical color is used and why the API is returning this color.</p>\n\n<p>It seems this is just a wrapper around the <strong>undocumented</strong> DwmGetColorizationParameters Win32 API.</p>\n\n<p><strong>Option 2: GetImmersiveColorFromColorSetEx</strong></p>\n\n<p>I found this solution <a href=\"https://gist.github.com/paulcbetts/3c6aedc9f0cd39a77c37\">here</a>, which is just a wrapper around the <strong>GetImmersiveColorFromColorSetEx</strong> Win32 API.</p>\n\n<p><strong>Option 3: Registry, DwmGetColorizationParameters</strong></p>\n\n<p>The last option would be to read the Registry values - I found some hints on this <a href=\"http://pinvoke.net/default.aspx/dwmapi/DwmGetColorizationParameters.html\">site</a>, but I wouldn’t recommend it, because it is more or less undocumented and might break in the future. So we will use option 1 or 2.</p>\n\n<p><strong>Usage:</strong></p>\n\n<p>The usage of both options is pretty easy (at least with the option 2 code provided) :</p>\n\n<div class=\"language-cs highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"c1\">// https://gist.github.com/paulcbetts/3c6aedc9f0cd39a77c37\n</span>    <span class=\"kt\">var</span> <span class=\"n\">accentColor</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">SolidColorBrush</span><span class=\"p\">(</span><span class=\"n\">AccentColorSet</span><span class=\"p\">.</span><span class=\"n\">ActiveSet</span><span class=\"p\">[</span><span class=\"s\">\"SystemAccent\"</span><span class=\"p\">]);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">Code</span><span class=\"p\">.</span><span class=\"n\">Background</span> <span class=\"p\">=</span> <span class=\"n\">accentColor</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">Code</span><span class=\"p\">.</span><span class=\"n\">Text</span> <span class=\"p\">=</span> <span class=\"s\">\"AccentColorSet Immersive 'SystemAccent' \"</span> <span class=\"p\">+</span> <span class=\"n\">accentColor</span><span class=\"p\">.</span><span class=\"n\">Color</span><span class=\"p\">.</span><span class=\"nf\">ToString</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// Available in .NET 4.5\n</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">SystemProperties</span><span class=\"p\">.</span><span class=\"n\">Background</span> <span class=\"p\">=</span> <span class=\"n\">SystemParameters</span><span class=\"p\">.</span><span class=\"n\">WindowGlassBrush</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">SystemProperties</span><span class=\"p\">.</span><span class=\"n\">Text</span> <span class=\"p\">=</span> <span class=\"s\">\"SystemParameters.WindowGlassBrush \"</span> <span class=\"p\">+</span> <span class=\"p\">((</span><span class=\"n\">SolidColorBrush</span><span class=\"p\">)</span><span class=\"n\">SystemParameters</span><span class=\"p\">.</span><span class=\"n\">WindowGlassBrush</span><span class=\"p\">).</span><span class=\"n\">Color</span><span class=\"p\">.</span><span class=\"nf\">ToString</span><span class=\"p\">();</span>\n</code></pre>\n</div>\n\n<p><strong>Result:</strong></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-04-26/wpf-result.png\" alt=\"x\" title=\"WPF result\" />.</p>\n\n<p><del>As you can see, the lower color does match the border color instead of the first option. Crazy, right?</del> ¯\\_(ツ)_/¯</p>\n\n<p><strong>From the comments:</strong> As Yves Goergen pointed out, the resulting color <strong>does not</strong> exactly match the <strong>border color</strong>, but it <strong>does match the system accent color</strong>, which is ok. I would guess that the border has some chrome behavior attached so that the color is slightly different.</p>\n\n<p>The full code is on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/WpfGetWindows10AccentColor\"><strong>GitHub</strong></a></p>\n\n<p>Hope this helps.</p>\n\n","Href":"https://blog.codeinside.eu/2016/04/26/get-the-windows-10-or-8-accent-color-from-wpf/","RawContent":null},{"Title":"Debugging .NET based Windows Error Reports (WER)","PublishedOn":"2016-03-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-23/crash.gif\" alt=\"x\" title=\"Windows App Crash\" />.</p>\n\n<h2 id=\"the-last-hope-windows-error-reports\">The last hope: Windows Error Reports</h2>\n\n<p>The “Windows Error Report” (WER) is automatically generated by Windows and can be seen in the Eventlog. In most cases, you might see some other - debugging friendlier - event logs. If there is a event log from with the source “.NET Runtime”, then use this first. Windows Error Reports are at first a bit strange to read.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-23/eventlog-wer.png\" alt=\"x\" title=\"Windows Error Report\" /></p>\n\n<p><strong>Small, but important hint:</strong>\nI strongly recommend that you should use some logging libraries inside your application as well.</p>\n\n<p>If you still don’t have a clue where your application breaks or those other event logs are missing the WER can be used to see where the exception is thrown in your .NET application.</p>\n\n<h2 id=\"windows-error-report-for-net-apps\">Windows Error Report for .NET Apps</h2>\n\n<p>A typical Windows Error Report could look like this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Fault bucket 129047406839, type 5\nEvent Name: CLR20r3\nResponse: Not available\nCab Id: 0\n\nProblem signature:\nP1: BreakStuff.App.exe\nP2: 1.0.0.0\nP3: 56eb2416\nP4: BreakStuff.App\nP5: 1.0.0.0\nP6: 56eb2416\nP7: 5\nP8: a\nP9: FatalError\nP10: \n\nAttached files:\nC:\\Users\\Robert\\AppData\\Local\\Temp\\WERE708.tmp.WERInternalMetadata.xml\nC:\\Users\\Robert\\AppData\\Local\\Temp\\WERF4B5.tmp.appcompat.txt\nC:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WERF4D5.tmp.dmp\nC:\\Users\\Robert\\AppData\\Local\\Temp\\WERF65D.tmp.WERDataCollectionFailure.txt\nC:\\ProgramData\\Microsoft\\Windows\\WER\\ReportQueue\\AppCrash_BreakStuff.App.e_1952fbbdf8ecceaa6e9af5c44339210849f4774_b2bbc455_cab_7634f669\\memory.hdmp\nWERGenerationLog.txt\n</code></pre>\n</div>\n\n<p>Each <a href=\"https://blogs.msdn.microsoft.com/oanapl/2009/01/30/windows-error-reporting-and-clr-integration/\">P holds some exception location information</a>:</p>\n\n<p><strong>P1: “BreakStuff.App.exe” = App name or host process</strong> e.g. your.exe or Outlook.exe for a .NET addin.</p>\n\n<p><strong>P2: “1.0.0.0” = Version of the executabe</strong></p>\n\n<p><strong>P3: “56eb2416” = Timestamp of the executable</strong></p>\n\n<p><strong>P4: “BreakStuff.App” = Faulting assembly and module name</strong></p>\n\n<p><strong>P5: “1.0.0.0”</strong> = Version of the faulting module</p>\n\n<p><strong>P6: “56eb2416” = Timestamp of the faulting module</strong></p>\n\n<p><strong>P7: “5” = MethodDef</strong> – MethodDef token for the faulting method, after stripping off the high byte. This is the faulting method in your code. <em>Super important!</em></p>\n\n<p><strong>P8: “a” = IL offset</strong> - in hex, in combination with P7 will it show you the <em>exact position of the exception</em> in your method.</p>\n\n<p><strong>P9: “FatalError”</strong> = Exception type</p>\n\n<p>P1-P3 should be easy to understand and nothing new to you. If you have a bigger application P4 might lead to the correct namespace/assembly.</p>\n\n<p>Most important to find the real source is P7 &amp; P8 - I will show you how to read it.</p>\n\n<h2 id=\"p7-finding-the-methoddef-token-with-ildasmexe\">P7: Finding the MethodDef token with ILDASM.exe</h2>\n\n<p>P7 tells you in which method the exception occurred. The number shown in P7 is the method token, which is the IL representation of your actual method in code. To see the real method name we need a tool.</p>\n\n<p>As far as I know you could try to use WinDbg, but I was too stupid to use it correctly - ildasm.exe does also work for our use case. To get the method token you need “ildasm.exe”, which is included in the .NET SDK, which is part of the Windows SDK.</p>\n\n<p>On a Windows 10 machine, with <a href=\"https://dev.windows.com/en-us/downloads/windows-10-sdk\">the SDK</a> installed, you can use this version:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6 Tools\\ildasm.exe\n</code></pre>\n</div>\n\n<p>For ILDASM it is not important if the actual .NET app is using .NET 4.6 or any other version.</p>\n\n<p>“ildasm.exe” itself is not a beauty, but works. Now open your assembly from <strong>P4</strong> with this tool.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-23/ildsam.png\" alt=\"x\" title=\"using ildsam to get the method token\" /></p>\n\n<p>To see the tokens, press <strong>CTRL + M</strong> and search for <strong>P7</strong>.</p>\n\n<p>In my case I see this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Method #2 (06000005) \n-------------------------------------------------------\n\tMethodName: ButtonBase_OnClick (06000005)\n\tFlags     : [Private] [HideBySig] [ReuseSlot]  (00000081)\n\tRVA       : 0x0000208c\n\tImplFlags : [IL] [Managed]  (00000000)\n\tCallCnvntn: [DEFAULT]\n\thasThis \n\tReturnType: Void\n\t2 Arguments\n\t\tArgument #1:  Object\n\t\tArgument #2:  Class System.Windows.RoutedEventArgs\n\t2 Parameters\n\t\t(1) ParamToken : (08000001) Name : sender flags: [none] (00000000)\n\t\t(2) ParamToken : (08000002) Name : e flags: [none] (00000000)\n</code></pre>\n</div>\n\n<p>Take a look at the method description: 0600000 <strong>5</strong> - the 0600000 is the high byte (whatever that means… - just search for the number, I bet you will find something.)</p>\n\n<p><em>BigBasti helped me in the comments to describe the high byte:\nBig numbers which need more than one byte to store the value have high bytes (most significant bytes) and low bytes (least significant bytes) - you need to know this to make sure you load the sequence of bytes in the correct order. - Thanks!</em></p>\n\n<p>Ok - now we know the actual method. The exception occurs in the ButtonBase_OnClick method!</p>\n\n<h2 id=\"p8-finding-the-exact-position-of-the-faulting-code-with-ilspy\">P8: Finding the exact position of the faulting code with ILSpy</h2>\n\n<p>Now we need to look at the methods IL. You can use <a href=\"http://ilspy.net/\">ILSpy</a> or any other .NET decompiler (ildasm is not very comfortable, we only used it to get the method name). \nIf you choosed ILSpy make sure you switch from the C# view to IL view and go to the faulting method:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-23/ilspy-code.png\" alt=\"x\" title=\"ILSpy\" /></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// Method begins at RVA 0x208c\n// Code size 11 (0xb)\n.maxstack 8\n\nIL_0000: ldstr \"I'm dead!\"\nIL_0005: call void [mscorlib]System.Environment::FailFast(string)\nIL_000a: ret\n} // end of method MainWindow::ButtonBase_OnClick\n</code></pre>\n</div>\n\n<p>As you might remember - P8 pointed to “a”, which is the IL_000a instruction.</p>\n\n<p>Mission accomplished: Exception source found! Yay!</p>\n\n<h2 id=\"big-picture\">Big picture</h2>\n\n<p>I never thought I had to read the internal IL, but we had one weird case where no log files were generated and we used this trick to get to the source of the exception.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-23/bigpicture.png\" alt=\"x\" title=\"Big Picture of WER debugging\" /></p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/BreakStuff\">My breaking Sample Code on GitHub</a></strong></p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/03/23/debugging-dotnet-based-windows-error-reports/","RawContent":null},{"Title":"XML Autocompletion with AvalonEdit","PublishedOn":"2016-03-13T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"avalonedit\">AvalonEdit</h2>\n\n<p>AvalonEdit is a text editor WPF control, used and created by the <a href=\"http://www.icsharpcode.net/OpenSource/SD/Default.aspx\">SharpDevelop team</a>. It comes with some nice features, like code folding support, text highlighting and infrastructure for advanced features like autocompletion.</p>\n\n<p>Read more about AvalonEdit on the <a href=\"http://avalonedit.net/\">offical site</a>.</p>\n\n<p>To install AvalonEdit, just create a WPF project and install the <a href=\"https://www.nuget.org/packages/AvalonEdit/\">AvalonEdit NuGet package</a>.</p>\n\n<h2 id=\"our-scenario\">Our Scenario</h2>\n\n<p>We use AvalonEdit to edit XML configurations, but it can be used with any language. This blogpost will only take a look at our XML-scenario.</p>\n\n<h2 id=\"xml-autocomplete-or-intellisense\">XML Autocomplete or “IntelliSense”</h2>\n\n<p>AvalonEdit only ships with Syntax-Highlighting for XML - but nothing more. To get something like Tag-Autocompletion or even something like “IntelliSense” I had to combine different code pieces and write something new. So… the daily business of any programmer.</p>\n\n<h3 id=\"xml-tag-completion---with-code-from-sharpdevelop-and-xsemmel\">XML Tag-Completion - with Code from SharpDevelop and Xsemmel</h3>\n\n<p>Modern text editors will autocomplete given XML tags, e.g. if I type the closing element for “&lt;foo” it will create something like “<foo></foo>” and set the cursor inside the element.\nTo get to this feature we need to know which XML tag we are currently try to write - this issue can be solved with some magic RegEx0.</p>\n\n<p>The good part: This is already a solved problem. I discovered a very clever XmlParser on the <strong><a href=\"https://github.com/icsharpcode/SharpDevelop/tree/master/src/AddIns/DisplayBindings/XmlEditor\">SharpDevelop GitHub Repo</a></strong> and another one from the <strong><a href=\"https://xsemmel.codeplex.com/\">Xsemmel Project</a></strong>.</p>\n\n<p>I use code from both projects and integrated it in my sample project. And I hope I didn’t break the license by doing it - if yes I did it unintentional. Each code part is marked with the source and the copyright notes are included as well.</p>\n\n<p>Anyway: <strong>Huge credits are going to both projects.</strong></p>\n\n<h3 id=\"what-i-get-from-those-libraries\">What I get from those libraries?</h3>\n\n<p>Both libraries are clever enough to parse XML - or even “invalid” XML, and return the current position inside the XML tree. The code from Xsemmel also helped me with the “pure” tag completion.</p>\n\n<p>My merged XmlParser will return me the needed information for autocompletion or even “IntelliSense”-like features.</p>\n\n<h3 id=\"xml-intellisense---whats-the-source-of-the-intellisense\">XML “IntelliSense” - What’s the source of the “IntelliSense”?</h3>\n\n<p>To present some clever autocomplete actions, we need a source for this information. The good thing about XML is, that there is a huge range of related standards around it. The idea is simple:</p>\n\n<p>Using an <strong>existing XML Schema</strong> should do the trick. I already blogged about it <strong><a href=\"http://blog.codeinside.eu/2016/03/06/parsing-xml-schemas-in-dotnet/\">here</a></strong>.</p>\n\n<h3 id=\"putting-those-pieces-together\">Putting those pieces together:</h3>\n\n<p>I created a WPF project, included the AvalonEdit NuGet package and the code portions I already mentioned. The performance in the animation is a bit slow, because I wanted to show you what the XmlParser is doing in the background - this can be seen at the bottom of the application.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-13/xmleditor.gif\" alt=\"x\" title=\"AvalonEdit with XML Autocompletion\" />.</p>\n\n<p>You don’t need to “query” the document everytime you change the cursor - so in real life the performance hit is not very noticeable.</p>\n\n<p>As I already mentioned in the XSD-blogpost: XML Namespaces will not work with this implementation. As far as I know the SharpDevelop code should understand namespaces, but at least my XSD parser is not smart enough.</p>\n\n<h3 id=\"the-logic\">The logic</h3>\n\n<p>The most interesting logic happens in the <a href=\"https://github.com/Code-Inside/Samples/blob/master/2016/XmlIntelliSense/XmlIntelliSense.App/MainWindow.xaml.cs#L40\">TextEntered-EventHandler</a>.</p>\n\n<p>The “&gt;” and “/” key is interesting for the simple tag autocompletion. The “XsdParser”-Result is used when you hit the “&lt;” key or “ “ as long as you are inside a tag for attribute autocompletion.</p>\n\n<h3 id=\"good-enough\">“Good enough”</h3>\n\n<p>My implementation is far away from perfection, but should be good enough for most simple cases. As I already mentioned, the heavy lifting is done by code from SharpDevelop or Xsemmel. My sample is self-contained and only relies on the AvalonEdit NuGet package and the standard WPF.</p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/XmlIntelliSense\">Full Sample Code on GitHub</a></strong></p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/03/13/xml-autocompletion-with-avalonedit/","RawContent":null},{"Title":"Parsing XML Schemas in .NET","PublishedOn":"2016-03-06T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"xml-schemas\">XML Schemas</h2>\n\n<p>XML can be very verbose and seems to be old-fashioned, but the good part around XML is, that there is a hugh pile of standardized mechanics around it. \nTo query XML documents you can use <a href=\"https://en.wikipedia.org/wiki/XPath\">XPath</a>, for transforming <a href=\"https://en.wikipedia.org/wiki/XSLT\">XSLT</a> and for validation <strong><a href=\"https://en.wikipedia.org/wiki/XML_Schema_(W3C)\">XML Schemas</a></strong> or in short a “XSD” (XML Schema Definition).</p>\n\n<h2 id=\"parsing-the-xsd-tree\">Parsing the XSD Tree</h2>\n\n<p>A XSD is just a XML document itself that describes the your valid XML document tree. Because its just a normal XML document (with a fancy XML-namespace), you could parse it via the normal XDocument, but things are way easier for you when you look at the <a href=\"https://msdn.microsoft.com/de-de/library/system.xml.schema(v=vs.110).aspx\">System.Xml.Schema-Namespace</a>.</p>\n\n<h2 id=\"code\">Code</h2>\n\n<p>The basic code was taken from <a href=\"https://msdn.microsoft.com/en-us/library/ms255932(v=vs.110).aspx\">the MSDN</a> and I added the recursive part to get all possible elements.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>/// &lt;summary&gt;\n/// Code based on https://msdn.microsoft.com/en-us/library/ms255932(v=vs.110).aspx\n/// &lt;/summary&gt;\nclass Program\n{\n    public static void AnalyseSchema(XmlSchemaSet set)\n    {\n        // Retrieve the compiled XmlSchema object from the XmlSchemaSet\n        // by iterating over the Schemas property.\n        XmlSchema customerSchema = null;\n        foreach (XmlSchema schema in set.Schemas())\n        {\n            customerSchema = schema;\n        }\n\n        // Iterate over each XmlSchemaElement in the Values collection\n        // of the Elements property.\n        foreach (XmlSchemaElement element in customerSchema.Elements.Values)\n        {\n            RecursiveElementAnalyser(\" \", element);\n        }\n\n    }\n\n    public static void RecursiveElementAnalyser(string prefix, XmlSchemaElement element)\n    {\n        string elementName = prefix + element.Name;\n\n        string dataType = element.ElementSchemaType.TypeCode.ToString();\n\n        Console.WriteLine(elementName + \" (\" + dataType + \")\");\n\n        // Get the complex type of the Customer element.\n        XmlSchemaComplexType complexType = element.ElementSchemaType as XmlSchemaComplexType;\n\n        if (complexType != null)\n        {\n            // If the complex type has any attributes, get an enumerator \n            // and write each attribute name to the console.\n            if (complexType.AttributeUses.Count &gt; 0)\n            {\n                IDictionaryEnumerator enumerator =\n                    complexType.AttributeUses.GetEnumerator();\n\n                while (enumerator.MoveNext())\n                {\n                    XmlSchemaAttribute attribute =\n                        (XmlSchemaAttribute)enumerator.Value;\n\n                    string attrDataType = attribute.AttributeSchemaType.TypeCode.ToString();\n\n                    string attrName = string.Format(prefix + \"(Attr:: {0}({1}))\", attribute.Name, attrDataType);\n\n                    Console.WriteLine(attrName);\n                }\n            }\n\n            // Get the sequence particle of the complex type.\n            XmlSchemaSequence sequence = complexType.ContentTypeParticle as XmlSchemaSequence;\n\n            if (sequence != null)\n            {\n                // Iterate over each XmlSchemaElement in the Items collection.\n                foreach (var childElement in sequence.Items)\n                {\n                    var xmlSchemaElement = childElement as XmlSchemaElement;\n                    if (xmlSchemaElement != null)\n                    {\n                        RecursiveElementAnalyser(\" \" + prefix, xmlSchemaElement);\n                    }\n                    else\n                    {\n                        // support for XmlSchemaChoise element list\n                        var choice = childElement as XmlSchemaChoice;\n                        if (choice != null)\n                        {\n                            foreach (var choiceElement in choice.Items)\n                            {\n                                var xmlChoiceSchemaElement = choiceElement as XmlSchemaElement;\n                                if (xmlChoiceSchemaElement != null)\n                                {\n                                    RecursiveElementAnalyser(\" \" + prefix, xmlChoiceSchemaElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        XmlSchemaSet schemas = new XmlSchemaSet();\n        schemas.Add(\"\", XmlReader.Create(new StringReader(File.ReadAllText(\"Schema.xsd\"))));\n        schemas.Compile();\n        AnalyseSchema(schemas);\n        Console.ReadLine();\n    }\n}\n</code></pre>\n</div>\n\n<p>Output:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-06/xsd.png\" alt=\"x\" title=\"XSD Tree from Code\" /></p>\n\n<p>You should see the possible XML elements, attributes and their datatypes, but you have access to all specified schema information from the XSD that you want.</p>\n\n<h2 id=\"xml-namespaces\">XML Namespaces</h2>\n\n<p>XML namespaces are powerful, but can also be pretty complicated for everyone who needs to parse your XML. I guess you could put some evil XML namespaces inside the XSD and things will break with my code. \nJust be aware of this issue if you are dealing with namespaces.</p>\n\n<h2 id=\"visual-studio-tooling\">Visual Studio Tooling</h2>\n\n<p>I discovered that Visual Studio ships with a pretty nice XSD editor. But you don’t need to craft the XSD by hand,there are many tools out there that can generate XSDs based on existing XML documents.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-06/vs.png\" alt=\"x\" title=\"Visual Studio XSD Tree\" /></p>\n\n<h2 id=\"sample-xsd\">Sample XSD</h2>\n\n<p>I added the XSD Sample from the <a href=\"https://msdn.microsoft.com/en-us/library/bb675181.aspx\">MSDN</a> in the demo project. If you found an issue, just let me know.</p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/XsdParser\">Full Sample Code on GitHub</a></strong></p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/03/06/parsing-xml-schemas-in-dotnet/","RawContent":null},{"Title":"Using FontAwesome in UWP apps","PublishedOn":"2016-03-05T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"fontawesome-in-wpf-and-fonts-in-uwp\">FontAwesome in WPF and Fonts in UWP</h2>\n\n<p>I blogged about <a href=\"http://blog.codeinside.eu/2015/01/07/using-fontawesome-with-wpf/\">how to use FontAwesome in WPF</a> last year and wrote a short blogpost about the nice <a href=\"http://blog.codeinside.eu/2016/01/31/working-with-fonticons-in-uwp/\">FontIcon class in UWP</a>. \nWith the help of the FontIcon class I could include the FontAwesome glyphs, but working with the unicodes is not very dev friendly.</p>\n\n<h2 id=\"bringing-fontawesomewpf-to-the-uwp-universe---oss-rocks\">Bringing FontAwesome.WPF to the UWP universe - OSS rocks!</h2>\n\n<p>The goal was pretty clear: I would like to have the excellent FontAwesome.WPF NuGet package working on UWP. \nSo I created an issue on the <a href=\"https://github.com/charri/Font-Awesome-WPF/issues/230\">FontAwesome.WPF GitHub repo</a> and some contributions later the <a href=\"http://www.nuget.org/packages/FontAwesome.UWP/\">FontAwesome.UWP NuGet package</a> was born.</p>\n\n<p>_Thanks to everyone who was involved!__</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-05/nuget.png\" alt=\"x\" title=\"FontAwesome.UWP NuGet package\" /></p>\n\n<h2 id=\"using-fontawesome-in-uwp\">Using FontAwesome in UWP…</h2>\n\n<p>As you might imaging - the usage is now pretty easy after including the FontAwesome.UWP NuGet package.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;Page\n    x:Class=\"UwpDemo.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:UwpDemo\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:fa=\"using:FontAwesome.UWP\"\n    mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\"&gt;\n        &lt;fa:FontAwesome Icon=\"Flag\" FontSize=\"90\" Foreground=\"Chartreuse\" HorizontalAlignment=\"Center\" /&gt;\n    &lt;/Grid&gt;\n&lt;/Page&gt;\n</code></pre>\n</div>\n\n<p>Result:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-05/demo.png\" alt=\"x\" title=\"FontAwesome on UWP\" /></p>\n\n<p>Pretty nice and it was a good collaboration - big thanks to <a href=\"https://github.com/charri\">Thomas Charriere</a>, who is the maintainer behind the project.</p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/UwpFontAwesome/UwpDemo\">Demo Project on our GitHub Sample repo</a></strong></p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/03/05/using-fontawesome-in-uwp-apps/","RawContent":null},{"Title":"Using Travis CI for GitHub Pages builds","PublishedOn":"2016-03-03T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-03/travisci.png\" alt=\"x\" title=\"Travis CI Logo\" /></p>\n\n<h2 id=\"short-recap-github-pages--jekyll\">Short recap: GitHub Pages &amp; Jekyll</h2>\n\n<p>This blog is powered by <a href=\"https://pages.github.com/\">GitHub Pages</a>, which uses <a href=\"https://jekyllrb.com/\">Jekyll</a> in the background. Jekyll is a static website generator, which means that this page is “build” and has no server-side rendering logic when you hit the page - it’s pure static HTML, CSS and JS.</p>\n\n<p>You could run Jekyll on your local box and publish the sites to GitHub Pages - I prefer a pure “GitHub Page”-based model. Actually I don’t even have Jekyll installed on my PC. <a href=\"http://blog.codeinside.eu/2014/09/13/How-We-Moved-From-Wordpress-To-Jekyll-On-Windows/\">I wrote a small blogpost about running Jekyll on Windows if you are interested</a>.</p>\n\n<h2 id=\"travis-ci\"><strong><a href=\"http://travis-ci.org\">Travis CI</a></strong></h2>\n\n<p>As you might imaging - during the build stuff can break. In this case GitHub will send you a very short “error” email via mail. To get a more detailed report, <a href=\"https://help.github.com/articles/viewing-jekyll-build-error-messages/\">GitHub suggests to use Travis CI</a>, which is the main topic of this blogpost.</p>\n\n<h2 id=\"travis-ci-setup\">Travis CI Setup</h2>\n\n<p>The basic setup is pretty simple, but I had some issues - the last step is not very good documented - and that’s why I decided to blog about it.</p>\n\n<h3 id=\"1-login-to-travis-ci-and-sync-your-account\">1. Login to Travis CI and “sync” your account</h3>\n\n<p>You will need to login to Travis CI with your GitHub account. This will kick in a “sync”. After a short period you should see all your repositories on your profile page:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-03/travisci-1.png\" alt=\"x\" title=\"Travis CI Profile Page\" /></p>\n\n<h3 id=\"2-enable-the-desired-project-on-travis-ci\">2. Enable the desired project on Travis CI</h3>\n\n<p>Just flip on the switch on your profil page for the desired project and Travis will watch the repository for any changes.</p>\n\n<h3 id=\"3-adding-a-gemfile-and-a-travisyml-file-to-your-project\">3. Adding a Gemfile and a .travis.yml file to your project</h3>\n\n<p>To build GitHub Page stuff via Travis you will need a <a href=\"https://github.com/Code-Inside/Blog/blob/gh-pages/Gemfile\">Gemfile</a> and a <a href=\"https://github.com/Code-Inside/Blog/blob/gh-pages/.travis.yml\">.tarvis.yml</a>.\nMy current files are pretty basic and a copy from the GitHub Pages Help site, with <strong>one important exception</strong>…</p>\n\n<h3 id=\"4-targeting-the-correct-branch\">4. Targeting the correct branch</h3>\n\n<p>The last step is to ensure that Travis CI will search for the correct branch. In my case, I only have the “gh-pages” branch, but Travis CI will look for a “master” branch.</p>\n\n<p>To configure Travis CI to use the correct “gh-pages” branch you will need this config section inside the .yml:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>branches:\n only:\n - gh-pages  \n</code></pre>\n</div>\n\n<p>After this setup you should already see the finished Travis CI build:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-03-03/travisci-2.png\" alt=\"x\" title=\"Travis CI Build Page\" /></p>\n\n<p><strong>Important:</strong> The output of the build will not be copied over to GitHub - at this stage it is just a “safety net”. If you want to publish from Travis CI, there are many blogposts out there that describe this topic.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/03/03/using-travis-ci-for-github-page-builds/","RawContent":null},{"Title":"Pretty Print XML in .NET","PublishedOn":"2016-02-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"pretty-print\">Pretty Print</h2>\n\n<p>The term “pretty print” describes that a document is more or less human readable formatted. So instead of this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;Foo&gt;&lt;Bar&gt;&lt;Buzz&gt;&lt;/Buzz&gt;&lt;/Bar&gt;&lt;/Foo&gt;\n</code></pre>\n</div>\n\n<p>You might want to get this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;Foo&gt;\n  &lt;Bar&gt;\n    &lt;Buzz&gt;&lt;/Buzz&gt;\n  &lt;/Bar&gt;\n&lt;/Foo&gt;\n</code></pre>\n</div>\n\n<p>Many editors support this feature - but we want to do it in code.</p>\n\n<h2 id=\"pretty-print-xml-with-net\">Pretty Print XML with .NET</h2>\n\n<p>The code is really simple, because XDocument does the heavy lifting for us.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>var xDocument = XDocument.Parse(input);\nstring formattedXml = xDocument.ToString();\n\n// Force XML Declaration if present\nif (xDocument.Declaration != null)\n{\n  formattedXml = xDocument.Declaration + Environment.NewLine + formattedXml;\n}\nreturn formattedXml;\n</code></pre>\n</div>\n\n<p>This should work in most cases - there might be some issues with comments or maybe special XML chars. If you have a better idea, please let me know.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/02/28/pretty-print-xml-in-dotnet/","RawContent":null},{"Title":"ExpensiveMeeting - a Universal Windows Platform OSS app using Template10","PublishedOn":"2016-02-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"expensivemeeting\">ExpensiveMeeting</h2>\n\n<p>The app - which is just a fun project and shouldn’t be taken too seriously -  is like a stopwatch for meetings. \nBut instead of the pure time it shows you also the burned money for your meeting, because time is money, right?</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-02-28/app.png\" alt=\"x\" title=\"ExpensiveMeeting app\" /></p>\n\n<p>Don’t worry: The app is free and no ads are shown.</p>\n\n<p><strong><a href=\"https://www.microsoft.com/store/apps/9NBLGGH5PVW9\">Windows Store Download</a></strong></p>\n\n<h2 id=\"behind-the-scenes-universal-windows-platfrom-uwp\">Behind the scenes: Universal Windows Platfrom (UWP)</h2>\n\n<p>The app itself is a UWP app, which means it runs on Windows 10, Windows IoT, Windows Mobile 10 (or is it Phone?) and maybe in the future on Xbox One. \nTo see the app running on my phone, without touching the code at all, was pure fun. I really like the UWP approach.</p>\n\n<h2 id=\"behind-the-scenes-template10\">Behind the scenes: Template10</h2>\n\n<p>Starting from scratch can be fun, but to shorten the development time I used the nice <strong><a href=\"http://aka.ms/template10\">Template10</a></strong> template, which gives me the typical hamburger app layout. \nThe project can be found on <a href=\"https://github.com/Windows-XAML/Template10\">GitHub</a> and has a very active community.</p>\n\n<h2 id=\"behind-the-scenes-all-code-on-github\">Behind the scenes: All Code on GitHub</h2>\n\n<p>I decided to work in the open on <strong><a href=\"https://github.com/Code-Inside/ExpensiveMeeting\">GitHub</a></strong>, so if you are interested on the actual code, just take a look and do whatever you want to do.</p>\n\n<p>If you have ideas or found bugs I would appreciate your help:\nJust create an <strong><a href=\"https://github.com/Code-Inside/ExpensiveMeeting/issues\">issue</a></strong> or send a pull request.</p>\n","Href":"https://blog.codeinside.eu/2016/02/28/expensivemeeting-a-uwp-oss-app-using-template10/","RawContent":null},{"Title":"Shipping Visual C++ 2015 redistributable DLLs with your app or how to do an app-local deployment","PublishedOn":"2016-02-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"small-warning-im-not-a-c-dev\">Small warning: I’m not a C++ dev</h2>\n\n<p>We use VC++ just for a very small part of our application, but this part needs the VC++ 2015 runtime “installed” on the client, but we don’t want the UAC install dialog. \nSo - let’s take a look how we can solve this problem.</p>\n\n<p>And if I write something stupid here - please let me know.</p>\n\n<h2 id=\"ways-to-deploy-vc-2015\">Ways to deploy VC++ 2015</h2>\n\n<p>There are three ways to deploy the runtime:</p>\n\n<ul>\n  <li>Install it via the standalone VCRedist installer. This is probably the most known way, but requires elevated permissions because the file will be installed to System32.</li>\n  <li>Install it via a merge module. If you already have an installer, you can include the needed .msm files in your own installer, but this will also require elevated permissions because the files will be also installed to System32.</li>\n  <li>Deploy it with your app as app-local deployment. We will cover this in this blogpost, because <strong>we don’t want to touch anything that needs elevated permissions</strong>.</li>\n</ul>\n\n<p>If you want to read more about the first two ways, the <a href=\"https://msdn.microsoft.com/en-us/library/ms235299.aspx\">MSDN</a> might be a good place to start.</p>\n\n<h2 id=\"app-local-deployment-of-the-vc-2015-runtime\">App-Local deployment of the VC++ 2015 runtime</h2>\n\n<p>All what you need is already (if you are using Windows 10 &amp; Visual Studio 2015) installed on your dev machine. Otherwise you will need to download the Windows 10 SDK and Visual Studio 2015.</p>\n\n<p>Depending on your application, you will need to ship <strong>all</strong> dlls from the following folders with your application (= the dll/exe/whatever that needs the runtime) :</p>\n\n<p><strong>x86 applications</strong></p>\n\n<ul>\n  <li>C:\\Program Files (x86)\\Windows Kits\\10\\Redist\\ucrt\\DLLs\\x86</li>\n  <li>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x86\\Microsoft.VC140.CRT</li>\n</ul>\n\n<p><strong>x64 applications</strong></p>\n\n<ul>\n  <li>C:\\Program Files (x86)\\Windows Kits\\10\\Redist\\ucrt\\DLLs\\x64</li>\n  <li>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x64\\Microsoft.VC140.CRT</li>\n</ul>\n\n<p>The <a href=\"https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/\">“Universal CRT”</a> consists of many dlls and all are required. You have to copy them to your application folder and it should just work.</p>\n\n<p>As far as I know, if a user has installed the runtime via VCRedist or the merge modules the files inside System32 will be picked.</p>\n\n<p>I found this solution <a href=\"https://social.msdn.microsoft.com/Forums/sqlserver/en-US/d8f0acf9-5d4c-408d-8cea-c201fd61b9b7/local-deployment-of-redist-dlls-no-longer-works-with-visual-studio-2015?forum=visualstudiogeneral\">here</a> and it seems to work just fine - no UAC prompt. Yay.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2016/02/23/ship-vcredist-2015-with-your-app-aka-applocal-deploy/","RawContent":null},{"Title":"Working with FontIcons in UWP","PublishedOn":"2016-01-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"fonticons-in-uwp\">FontIcons in UWP</h2>\n\n<p>Microsoft ships one builtin UWP (Universal Windows Platform) <a href=\"https://msdn.microsoft.com/EN-US/library/windows/apps/windows.ui.xaml.controls.symbol.aspx\"><strong>SymbolIcon</strong></a> class.</p>\n\n<p>The good thing about such FontIcons is, that you can scale and change the appearances very nice and don’t need a bunch of image assets for your icons.</p>\n\n<p>The down side is, that those icons are just a font… so no multicolor option.</p>\n\n<p>The builtin SymbolIcon usage is pretty easy:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;SymbolIcon Symbol=\"Accept\" /&gt;\n</code></pre>\n</div>\n\n<h2 id=\"using-fonticon-to-serve-other-font-eg-fontawesome\">Using FontIcon to serve other font e.g. FontAwesome</h2>\n\n<p>Microsoft ships another simple class, the <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.fonticon.glyph\"><strong>FontIcon</strong></a> class.</p>\n\n<h3 id=\"including-the-font\">Including the font</h3>\n\n<p>You will need the actual Font-File, e.g. a .otf file. This file must be included in your project as <strong>Content</strong>.</p>\n\n<p>After that the usage is pretty simple if you know the correct syntax:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;FontIcon FontFamily=\"./fontawesome.otf#FontAwesome\" Glyph=\"&amp;#xf0b2;\"&gt;&lt;/FontIcon&gt;\n</code></pre>\n</div>\n\n<p>The Glyph-Property is the HexCode for the target char.</p>\n\n<p>Pretty important, but I’m not a Font-Expert, so maybe this is “normal”</p>\n<ul>\n  <li>The #FontAwesome must be set.</li>\n  <li>\n    <p>In XAML the Glyph must be in this form</p>\n\n    <p>“”</p>\n  </li>\n  <li>\n    <p>From Code, the value must be unicode, e.g.</p>\n\n    <p>Test.Glyph = “\\uf0b2”;</p>\n  </li>\n</ul>\n\n<p>Instead of the “./…” path syntax you could also use something like this:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;FontIcon FontFamily=\"ms-appx:///fontawesome.otf#FontAwesome\" Glyph=\"&amp;#xf0b2;\"&gt;&lt;/FontIcon&gt;\n</code></pre>\n</div>\n\n<h2 id=\"result\">Result</h2>\n\n<p>The result is hopefully that you see the correct icon… right?</p>\n\n<p>BTW, we try to bring <a href=\"https://github.com/charri/Font-Awesome-WPF/issues/23\">FontAwesome to UWP</a> with a simple NuGet package.</p>\n\n<p>And thanks to <a href=\"https://twitter.com/Alex_Witkowski/status/692134058051178502\">Alexander Witkowski</a> for the suggestion of the FontIcon class - I didn’t know that this is part of the SDK.</p>\n\n<h2 id=\"demo-code\">Demo-Code</h2>\n\n<p>I made a pretty small UWP Demo, which can be viewed on our <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/FontAwesomeDemo\">Samples-Repo</a>.</p>\n","Href":"https://blog.codeinside.eu/2016/01/31/working-with-fonticons-in-uwp/","RawContent":null},{"Title":"Serving embedded resources with ASP.NET WebApi","PublishedOn":"2015-12-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"embedded-files-why\">Embedded files? Why?</h2>\n\n<p>In a normal Web-Application all files are somehow stored as files in the app directory, but sometimes it could be handy to embed those files.</p>\n\n<p>One scenario could be that you have a “library”, which can be integrated in a larger application. If you don’t want to pull over all files and you <strong>just want to expose a single assembly</strong> (for example as NuGet package) embedded resources might come handy.</p>\n\n<h2 id=\"demo-application\">Demo-Application</h2>\n\n<p>My demo application is a simple ConsoleApp, which a selfhosting WebAPI and two Controllers (Demo and Pages):</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2015-12-31/embeddedresources-structure.png\" alt=\"x\" title=\"VS Structure\" /></p>\n\n<p>Important is, that my “target” html and css file are marked as <strong>Embedded Resource</strong>.</p>\n\n<h2 id=\"routing\">Routing</h2>\n\n<p>In my sample I have created on “PageController”, which accepts all requests that seems to target the embedded files.</p>\n\n<p>Registration:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>public class Startup\n{\n    public void Configuration(IAppBuilder appBuilder)\n    {\n        HttpConfiguration config = new HttpConfiguration();\n\n        config.MapHttpAttributeRoutes();\n\n        config.Routes.MapHttpRoute(\n            name: \"ApiV1\",\n            routeTemplate: \"api/v1/{controller}/{id}\",\n            defaults: new { id = RouteParameter.Optional }\n            );\n\n        config.Routes.MapHttpRoute(\n           name: \"PageController\",\n           routeTemplate: \"{*anything}\",\n           defaults: new { controller = \"Page\", uri = RouteParameter.Optional });\n\n        appBuilder.UseWebApi(config);\n    }\n\n}\n</code></pre>\n</div>\n\n<h2 id=\"the-pagecontroller\">The “PageController”</h2>\n\n<p>This controller will try to read the HTTP GET PathAndQuery and will look inside the assembly resources for something with the same name.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>public class PageController : ApiController\n{\n    private const string ResourcePath = \"SelfHostWithBetterRouting.Pages{0}\";\n\n    public static string GetStreamContent(string folderAndFileInProjectPath)\n    {\n        var asm = Assembly.GetExecutingAssembly();\n        var resource = string.Format(ResourcePath, folderAndFileInProjectPath);\n\n        using (var stream = asm.GetManifestResourceStream(resource))\n        {\n            if (stream != null)\n            {\n                var reader = new StreamReader(stream);\n                return reader.ReadToEnd();\n            }\n        }\n        return String.Empty;\n    }\n\n\n    public HttpResponseMessage Get()\n    {\n        var virtualPathRoot = this.Request.GetRequestContext().VirtualPathRoot;\n        string filename = this.Request.RequestUri.PathAndQuery;\n\n        // remove SERVER/appname from request to get the relative filename\n        if (virtualPathRoot != \"/\")\n        {\n            filename = filename.ToLowerInvariant().Replace(virtualPathRoot.ToLowerInvariant(), string.Empty);\n        }\n        \n        // input as /page-assets/js/scripts.js\n        if (filename == \"/\" || filename == \"\")\n        {\n            filename = \".index.html\";\n        }\n\n        // folders will be seen as \"namespaces\" - so replace / with the .\n        filename = filename.Replace(\"/\", \".\");\n        // resources can't be named with -, so it will be replaced with a _\n        filename = filename.Replace(\"-\", \"_\");\n\n        var mimeType = System.Web.MimeMapping.GetMimeMapping(filename);\n\n        var fileStreamContent = GetStreamContent(filename);\n\n        if (string.IsNullOrWhiteSpace(fileStreamContent))\n        {\n            throw new Exception(string.Format(\"Can't find embedded file for '{0}'\", filename));\n        }\n\n        if (virtualPathRoot != \"/\")\n        {\n            fileStreamContent = fileStreamContent.Replace(\"~/\", virtualPathRoot + \"/\");\n        }\n        else\n        {\n            fileStreamContent = fileStreamContent.Replace(\"~/\", virtualPathRoot);\n        }\n\n        var response = new HttpResponseMessage();\n        response.Content = new StringContent(fileStreamContent);\n        response.Content.Headers.ContentType = new MediaTypeHeaderValue(mimeType);\n        return response;\n    }\n\n}\t\n</code></pre>\n</div>\n\n<h2 id=\"mix-the-pagecontroller-and-normal-webapi-controllers\">Mix the “PageController” and normal WebAPI Controllers</h2>\n\n<p>In my sample the “PageController” will catch all requests that are not handled by other controllers, so you could even serve a general 404 page.</p>\n\n<h2 id=\"hosting-in-iis\">Hosting in IIS</h2>\n\n<p>If you host this inside an IIS it will not work out of the box, because the IIS itself tries to serve static content. One easy option would be to include this inside your web.config:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;!-- prevent IIS from serving embeddded stuff --&gt;\n&lt;location path=\"pages\"&gt;\n    &lt;system.webServer&gt;\n        &lt;handlers&gt;\n            &lt;add name=\"nostaticfile\" path=\"*\" verb=\"GET\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" /&gt;\n        &lt;/handlers&gt;\n    &lt;/system.webServer&gt;\n&lt;/location&gt;\n</code></pre>\n</div>\n\n<p>With this web.config setting in place the request should route through your code.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p>The self hosting WebAPI returns the “index.html” and the linked “site.css” - all embedded inside the assembly:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2015-12-31/embeddedresources-result.png\" alt=\"x\" title=\"Result of Democode\" /></p>\n\n<p>In an <a href=\"http://blog.codeinside.eu/2015/09/29/wpf-chrome-embedded-and-webapi-selfhosting/\">older blogpost</a> I used a similar approach, but the routing part is now “better” solved.</p>\n\n<p>Hope this helps!</p>\n\n<p>The code is also available on <strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2015/SelfHostWithBetterRoutingForEmbeddedResources\">GitHub</a></strong>.</p>\n","Href":"https://blog.codeinside.eu/2015/12/31/serving-embedded-resources-with-aspnet-webapi/","RawContent":null}],"ResultType":"Feed"},"GitHubEventsOrg":{"Events":[{"Id":"6658554714","Type":"PushEvent","CreatedAt":"2017-09-30T20:47:30","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/501048a9a9373505ec6360add6959dc77868751c...cb4dc55960579663df696c1bc7155e5eb0a6d830","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6658545168","Type":"PushEvent","CreatedAt":"2017-09-30T20:40:06","Actor":"robertmuehsig","Repository":"Code-Inside/Samples","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Samples/compare/b635580a4966b1b77c93a8b682389c6cf06d2da6...df9b0809e1e40d7eb31e9fcb4a906e88bfdca668","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/Samples","RelatedBody":null},{"Id":"6658537426","Type":"PushEvent","CreatedAt":"2017-09-30T20:33:48","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/a6a550da30c551c739db7da7221005d8cc95db27...501048a9a9373505ec6360add6959dc77868751c","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6658533609","Type":"PushEvent","CreatedAt":"2017-09-30T20:30:54","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/6148e3add2446d17ea9b740249673f5faf88344b...a6a550da30c551c739db7da7221005d8cc95db27","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6657435222","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:36","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/a967065a9df473ea2a1df65138ef8a46fe7539a0...61f73f42f20b8167862cc54888ca85eae46144cf","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657435148","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:31","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/386e3097fa796ab75a72a3c500183b1f8eaedc86...a967065a9df473ea2a1df65138ef8a46fe7539a0","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657435083","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:27","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/68ab78608579afe1d19b2ef50462d34b39916bdf...386e3097fa796ab75a72a3c500183b1f8eaedc86","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657435037","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:25","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/df769d3a0fea4843622318c877e83730ae4b60b8...68ab78608579afe1d19b2ef50462d34b39916bdf","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657434947","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:21","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/f8826802343d7544d0fee4e16901850b7012742a...df769d3a0fea4843622318c877e83730ae4b60b8","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657434750","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:11","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/93f75c1c40a17d5c0738d87c76b1f77e2b681c5c...f8826802343d7544d0fee4e16901850b7012742a","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6657434745","Type":"PushEvent","CreatedAt":"2017-09-30T05:30:11","Actor":"Code-Inside-Bot","Repository":"Code-Inside/Hub","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Hub/compare/f5240d09c04f65e94c426b94f8a23eb784021a98...c117d34c3abd74d05267e1aa9479e572350be888","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Hub","RelatedBody":null},{"Id":"6652935125","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:36","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/abf185ef561f083981425dc1aa320401f2aa5f8f...93f75c1c40a17d5c0738d87c76b1f77e2b681c5c","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934956","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:31","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/1107946fd940ffc0a2c2cf448b4f1593fcfad90a...abf185ef561f083981425dc1aa320401f2aa5f8f","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934866","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:28","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/b024e626b154ca722a517c417ae8b8536b2087dc...1107946fd940ffc0a2c2cf448b4f1593fcfad90a","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934726","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:24","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/e99ec9bc98e4cd7bd661a20a1bb74b7d380605e3...b024e626b154ca722a517c417ae8b8536b2087dc","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934566","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:20","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/36fd3226e9163c6f105430d25063a4d6fa57a10b...e99ec9bc98e4cd7bd661a20a1bb74b7d380605e3","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934246","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:12","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/c4b71cc50ed728699380a8f989b6473904068fee...36fd3226e9163c6f105430d25063a4d6fa57a10b","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6652934170","Type":"PushEvent","CreatedAt":"2017-09-29T05:30:10","Actor":"Code-Inside-Bot","Repository":"Code-Inside/Hub","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Hub/compare/7ee47cba76220f346555f96e5c52a5784e3d9599...f5240d09c04f65e94c426b94f8a23eb784021a98","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Hub","RelatedBody":null},{"Id":"6647622239","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:39","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/7da1916ffe70603935ea5b58ee0d8ce9377e3938...c4b71cc50ed728699380a8f989b6473904068fee","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647622034","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:33","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/8dd89c6f3613c60236ed79a897001035ae791f73...7da1916ffe70603935ea5b58ee0d8ce9377e3938","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647621867","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:29","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/8d873ebb0744a361f5633e23811b11ddcf58d230...8dd89c6f3613c60236ed79a897001035ae791f73","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647621760","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:26","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/e6a5003a2e8570b012ee564ef7b04f03445f76fe...8d873ebb0744a361f5633e23811b11ddcf58d230","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647621532","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:21","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/0adb027cec592670e63c54334eb19b4b6edb86c9...e6a5003a2e8570b012ee564ef7b04f03445f76fe","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647621174","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:13","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/f03ba746487c107d2e09947526a9e23aa520ed1d...0adb027cec592670e63c54334eb19b4b6edb86c9","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6647621052","Type":"PushEvent","CreatedAt":"2017-09-28T05:30:10","Actor":"Code-Inside-Bot","Repository":"Code-Inside/Hub","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Hub/compare/a4bd70445f6143a92bd932421239c29e55412064...7ee47cba76220f346555f96e5c52a5784e3d9599","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Hub","RelatedBody":null},{"Id":"6642099724","Type":"PushEvent","CreatedAt":"2017-09-27T05:30:38","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/b39a34a7e759cede841b3b881f8d8aadca48fc65...f03ba746487c107d2e09947526a9e23aa520ed1d","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6642099549","Type":"PushEvent","CreatedAt":"2017-09-27T05:30:33","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/a6e9d99c34c052ebf25437ba53583c890acc600b...b39a34a7e759cede841b3b881f8d8aadca48fc65","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6642099373","Type":"PushEvent","CreatedAt":"2017-09-27T05:30:28","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/fc9e6b0c1017dcc933c5dd5d324fef2342bab26f...a6e9d99c34c052ebf25437ba53583c890acc600b","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6642099252","Type":"PushEvent","CreatedAt":"2017-09-27T05:30:25","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/8b8f8eec8b9a5d82b866a231829f2868c7924d88...fc9e6b0c1017dcc933c5dd5d324fef2342bab26f","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6642099114","Type":"PushEvent","CreatedAt":"2017-09-27T05:30:21","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/75fd30afe14edaaa04c755bf0583c51f39fad884...8b8f8eec8b9a5d82b866a231829f2868c7924d88","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null}],"ResultType":"GitHubEvent"},"GitHubEventsUser":{"Events":[{"Id":"6658554714","Type":"PushEvent","CreatedAt":"2017-09-30T20:47:30","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/501048a9a9373505ec6360add6959dc77868751c...cb4dc55960579663df696c1bc7155e5eb0a6d830","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6658545168","Type":"PushEvent","CreatedAt":"2017-09-30T20:40:06","Actor":"robertmuehsig","Repository":"Code-Inside/Samples","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Samples/compare/b635580a4966b1b77c93a8b682389c6cf06d2da6...df9b0809e1e40d7eb31e9fcb4a906e88bfdca668","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/Samples","RelatedBody":null},{"Id":"6658537426","Type":"PushEvent","CreatedAt":"2017-09-30T20:33:48","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/a6a550da30c551c739db7da7221005d8cc95db27...501048a9a9373505ec6360add6959dc77868751c","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6658534011","Type":"PushEvent","CreatedAt":"2017-09-30T20:31:12","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/jekyll-demo/compare/9033786d97b1e81e50191c703aa281b42e97c28e...dcf7c1e19a15aaa96ea36f2cc8606af99e0cd4f4","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6658533609","Type":"PushEvent","CreatedAt":"2017-09-30T20:30:54","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/6148e3add2446d17ea9b740249673f5faf88344b...a6a550da30c551c739db7da7221005d8cc95db27","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"6658509630","Type":"WatchEvent","CreatedAt":"2017-09-30T20:12:23","Actor":"robertmuehsig","Repository":"0xd4d/dnSpy","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred 0xd4d/dnSpy","RelatedBody":null},{"Id":"6649697143","Type":"PushEvent","CreatedAt":"2017-09-28T14:04:07","Actor":"robertmuehsig","Repository":"robertmuehsig/hallo-basta","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/hallo-basta/compare/3f6e26edfbdaf864539eb2037fd21fd6263b8fe1...cdbaea66d032d20e4df26c16f1094db9c50efb4e","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/hallo-basta","RelatedBody":null},{"Id":"6649693776","Type":"PushEvent","CreatedAt":"2017-09-28T14:03:29","Actor":"robertmuehsig","Repository":"robertmuehsig/hallo-basta","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/hallo-basta/compare/f64a927154e237adec68bf9bc5e9eabb193de785...3f6e26edfbdaf864539eb2037fd21fd6263b8fe1","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/hallo-basta","RelatedBody":null},{"Id":"6649685087","Type":"CreateEvent","CreatedAt":"2017-09-28T14:01:50","Actor":"robertmuehsig","Repository":"robertmuehsig/hallo-basta","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/hallo-basta/tree/master","RelatedDescription":"Created branch \"master\" at robertmuehsig/hallo-basta","RelatedBody":null},{"Id":"6649684991","Type":"CreateEvent","CreatedAt":"2017-09-28T14:01:49","Actor":"robertmuehsig","Repository":"robertmuehsig/hallo-basta","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Created repository \"\" at robertmuehsig/hallo-basta","RelatedBody":null},{"Id":"6640853341","Type":"PushEvent","CreatedAt":"2017-09-26T21:47:58","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/fde31eef43992ca5a397dbb3fc7e1d02cedb5c02...a8287a394c6b63d306d18efe84214ba903d47bec","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6640786906","Type":"PushEvent","CreatedAt":"2017-09-26T21:30:45","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/4927374d18bdc1e581c0b7315675f15baae60d0f...fde31eef43992ca5a397dbb3fc7e1d02cedb5c02","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6640263057","Type":"PushEvent","CreatedAt":"2017-09-26T19:36:35","Actor":"robertmuehsig","Repository":"robertmuehsig/test","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/test/compare/54772b86a4d5a75888ab7474d650a36dd28b8002...469647da153fb633c2e150843501e1497a52cc5b","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/test","RelatedBody":null},{"Id":"6640261770","Type":"CreateEvent","CreatedAt":"2017-09-26T19:36:19","Actor":"robertmuehsig","Repository":"robertmuehsig/test","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/test/tree/master","RelatedDescription":"Created branch \"master\" at robertmuehsig/test","RelatedBody":null},{"Id":"6640260651","Type":"CreateEvent","CreatedAt":"2017-09-26T19:36:06","Actor":"robertmuehsig","Repository":"robertmuehsig/test","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Created repository \"\" at robertmuehsig/test","RelatedBody":null},{"Id":"6634946624","Type":"PushEvent","CreatedAt":"2017-09-25T20:27:05","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/jekyll-demo/compare/0d5ec332bb6031aa95530ed1ce2b7b8c8f1c50cc...9033786d97b1e81e50191c703aa281b42e97c28e","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6634938255","Type":"CreateEvent","CreatedAt":"2017-09-25T20:25:08","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/jekyll-demo/tree/master","RelatedDescription":"Created branch \"master\" at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6634936409","Type":"CreateEvent","CreatedAt":"2017-09-25T20:24:42","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Created repository \"\" at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6634736720","Type":"CreateEvent","CreatedAt":"2017-09-25T19:38:30","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/jekyll-demo/tree/master","RelatedDescription":"Created branch \"master\" at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6634733749","Type":"CreateEvent","CreatedAt":"2017-09-25T19:37:47","Actor":"robertmuehsig","Repository":"robertmuehsig/jekyll-demo","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Created repository \"\" at robertmuehsig/jekyll-demo","RelatedBody":null},{"Id":"6627023370","Type":"IssueCommentEvent","CreatedAt":"2017-09-22T22:23:15","Actor":"robertmuehsig","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/246#issuecomment-331574152","RelatedDescription":"Commented on issue \"Docx into SQL Server table\" (#246) at OfficeDev/Open-XML-SDK","RelatedBody":"As a \"warning\": The OpenXML element \"graph\" and the different parts can be overwhelming at the beginning. For such \"extraction\" scenarios we often use the [FlatOpc-Format](https://blogs.msdn.microsoft.com/ericwhite/2008/09/29/the-flat-opc-format/). The flat opc is basically a \"flat\" xml representations of all parts. Or even simpler: This gives you a giant string that represents the complete document. \r\nNow you could just use a XPath to select your desired content."},{"Id":"6627013677","Type":"PushEvent","CreatedAt":"2017-09-22T22:19:22","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/2aa6a1379de738165b43b53c9c7dae0a8528d617...ab0f9f279fc308ac24d6f80d2a6f36b44ad8bfe7","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6627011664","Type":"PushEvent","CreatedAt":"2017-09-22T22:18:35","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/566f163078e29ec4dfbc9daf8408ddaa3b27f559...2aa6a1379de738165b43b53c9c7dae0a8528d617","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6627006412","Type":"PushEvent","CreatedAt":"2017-09-22T22:16:36","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/1d131439e24d1fb6384e4027d12ce05a8a44964f...566f163078e29ec4dfbc9daf8408ddaa3b27f559","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6623656573","Type":"IssueCommentEvent","CreatedAt":"2017-09-22T08:15:33","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4718#issuecomment-331382226","RelatedDescription":"Commented on issue \"Show dependent packages for a given package on the details page\" (#4718) at NuGet/NuGetGallery","RelatedBody":"I'm not sure if this \"Tag-cloud\" dependents visualization is helpful at all. Maybe make it as a list like the normal package-list-visualization and if someone want \"See all\" he lands on the search page - that would be nice.\r\n"},{"Id":"6621681489","Type":"IssueCommentEvent","CreatedAt":"2017-09-21T20:08:53","Actor":"robertmuehsig","Repository":"robertmuehsig/EinKofferVollerReisen","Organization":null,"RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/robertmuehsig/EinKofferVollerReisen/issues/9#issuecomment-331267238","RelatedDescription":"Commented on issue \"Indien-Reise\" (#9) at robertmuehsig/EinKofferVollerReisen","RelatedBody":"ToDo:\r\n Foto hochkant https://www.einkoffervollerreisen.de/2014-indien/zugfahrt-bangalore-nach-hassan/\r\nhttps://www.einkoffervollerreisen.de/2014-indien/hassan-und-mysore/\r\n\r\n\r\nBilder ab:https://www.einkoffervollerreisen.de/2014-indien/nach-ooty/\r\n\r\n"},{"Id":"6621670777","Type":"PushEvent","CreatedAt":"2017-09-21T20:06:16","Actor":"robertmuehsig","Repository":"robertmuehsig/EinKofferVollerReisen","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/EinKofferVollerReisen/compare/2320659186a68748f14511773182beca6e50447a...8ff2e8419c6a5e2e8edae362d3d916b6fa15b737","RelatedDescription":"Pushed to refs/heads/gh-pages at robertmuehsig/EinKofferVollerReisen","RelatedBody":null},{"Id":"6621666167","Type":"PushEvent","CreatedAt":"2017-09-21T20:05:09","Actor":"robertmuehsig","Repository":"robertmuehsig/EinKofferVollerReisen","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/EinKofferVollerReisen/compare/87a54351ee3ebff74caf3e8da8ef144e91610ae7...2320659186a68748f14511773182beca6e50447a","RelatedDescription":"Pushed to refs/heads/gh-pages at robertmuehsig/EinKofferVollerReisen","RelatedBody":null},{"Id":"6621662020","Type":"PushEvent","CreatedAt":"2017-09-21T20:04:11","Actor":"robertmuehsig","Repository":"robertmuehsig/EinKofferVollerReisen","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/EinKofferVollerReisen/compare/0dc2ed17bb0e25f5bc68e64a633b1ee40b18a1d2...87a54351ee3ebff74caf3e8da8ef144e91610ae7","RelatedDescription":"Pushed to refs/heads/gh-pages at robertmuehsig/EinKofferVollerReisen","RelatedBody":null},{"Id":"6616655193","Type":"PushEvent","CreatedAt":"2017-09-20T21:03:59","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/3bda5213a6e3cbd08edd10a9782377a2d6ee6001...edc03326244a6b644104f1ca1a20a8622b818f80","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"6606308690","Type":"WatchEvent","CreatedAt":"2017-09-18T23:18:19","Actor":"oliverguhr","Repository":"dustinmoris/Giraffe","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dustinmoris/Giraffe","RelatedBody":null},{"Id":"6565986387","Type":"WatchEvent","CreatedAt":"2017-09-08T10:34:44","Actor":"oliverguhr","Repository":"shssoichiro/oxipng","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred shssoichiro/oxipng","RelatedBody":null},{"Id":"6508163454","Type":"WatchEvent","CreatedAt":"2017-08-24T15:43:17","Actor":"oliverguhr","Repository":"papers-we-love/papers-we-love","Organization":"papers-we-love","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred papers-we-love/papers-we-love","RelatedBody":null},{"Id":"6339685648","Type":"WatchEvent","CreatedAt":"2017-07-27T08:58:43","Actor":"oliverguhr","Repository":"graphcool/chromeless","Organization":"graphcool","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred graphcool/chromeless","RelatedBody":null},{"Id":"6331103643","Type":"WatchEvent","CreatedAt":"2017-07-26T09:09:32","Actor":"oliverguhr","Repository":"toddmotto/public-apis","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred toddmotto/public-apis","RelatedBody":null},{"Id":"6324331252","Type":"WatchEvent","CreatedAt":"2017-07-25T13:57:53","Actor":"oliverguhr","Repository":"brannondorsey/wifi-cracking","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred brannondorsey/wifi-cracking","RelatedBody":null},{"Id":"6185048517","Type":"WatchEvent","CreatedAt":"2017-07-03T19:24:25","Actor":"oliverguhr","Repository":"Microsoft/ELL","Organization":"Microsoft","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred Microsoft/ELL","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"914230485768900609","CreatedAt":"2017-09-30T20:48:28+00:00","UserScreenname":"robert0muehsig","Text":"Blogged: dnSpy - a OSS IL decompiler and debugger https://t.co/yGMtRYOD6r #decompiler #debugger #dotnet","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"914228719211905029","CreatedAt":"2017-09-30T20:41:26+00:00","UserScreenname":"robert0muehsig","Text":"Slides of my @bastacon talk about #jekyll (in German) https://t.co/EfgYESYpDs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"913685386995564545","CreatedAt":"2017-09-29T08:42:26+00:00","UserScreenname":"robert0muehsig","Text":"On my way back home from #basta17  - thanks for the speaker invitation @win_developer!","Source":"<a href=\"http://www.twitter.com\" rel=\"nofollow\">Twitter for Windows Phone</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"912590956377059329","CreatedAt":"2017-09-26T08:13:33+00:00","UserScreenname":"oliverguhr","Text":"Hallo @ManfredSteyer, gibt es eine Möglichkeit bei angular-oauth2-oidc einen Token zu test zwecken manuell zu setzen? Vielen Dank!","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"831405475858112512","CreatedAt":"2017-02-14T07:31:26+00:00","UserScreenname":"CodeInsideBlog","Text":"Blogged: Create NuGet packages with Cake https://t.co/zpOCwViCNT","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"829218338270228480","CreatedAt":"2017-02-08T06:40:32+00:00","UserScreenname":"CodeInsideBlog","Text":"Build &amp; run xUnit tests with Cake https://t.co/vfX3X5PNVb #dotnet #cake","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"798442723741147136","CreatedAt":"2016-11-15T08:29:14+00:00","UserScreenname":"CodeInsideBlog","Text":"Enable SSL with custom domains on @GitHub Pages via @Cloudflare https://t.co/SLfVDexgcR #ssl #Encrypt","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"793351192109809664","CreatedAt":"2016-11-01T07:17:18+00:00","UserScreenname":"CodeInsideBlog","Text":"Writing loops in T-SQL https://t.co/E9oU0EtQnf #mssql #sql","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"782821247948361728","CreatedAt":"2016-10-03T05:55:04+00:00","UserScreenname":"CodeInsideBlog","Text":"Lets convert a WPF app to UWP\n https://t.co/hqUIpCRKaC #UWP #Win10","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"712894405204643840","CreatedAt":"2016-03-24T06:50:45+00:00","UserScreenname":"CodeInsideBlog","Text":"Debugging .NET based Windows Error Reports (WER) https://t.co/xzvI282e1N","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"709284615916294144","CreatedAt":"2016-03-14T07:46:44+00:00","UserScreenname":"CodeInsideBlog","Text":"XML Autocompletion with AvalonEdit https://t.co/ntJBGY30oo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"706760908752740352","CreatedAt":"2016-03-07T08:38:26+00:00","UserScreenname":"CodeInsideBlog","Text":"Parsing XML Schemas in .NET https://t.co/a8wfhgAYlv","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"706424357019582464","CreatedAt":"2016-03-06T10:21:06+00:00","UserScreenname":"CodeInsideBlog","Text":"Using FontAwesome in #UWP apps https://t.co/DXFCjpE6VL #Windows #Win10Dev // cc @__charri","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"705644869385990146","CreatedAt":"2016-03-04T06:43:41+00:00","UserScreenname":"CodeInsideBlog","Text":"Using Travis CI for GitHub Pages builds https://t.co/dNmJ39LBzU","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"705288260424232960","CreatedAt":"2016-03-03T07:06:39+00:00","UserScreenname":"CodeInsideBlog","Text":"ExpensiveMeeting - a Universal Windows Platform OSS app using Template10 https://t.co/5ctyIhVUnQ #UWP #OSS #Meetings","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"702376436947161088","CreatedAt":"2016-02-24T06:16:06+00:00","UserScreenname":"CodeInsideBlog","Text":"Shipping Visual C++ 2015 redistributable DLLs with your app or how to do an app-local deployment https://t.co/0PDeUDmNpv","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"694210642908180486","CreatedAt":"2016-02-01T17:28:09+00:00","UserScreenname":"CodeInsideBlog","Text":"Working with FontIcons in #UWP https://t.co/XLkWIQpfx2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"683893416204316673","CreatedAt":"2016-01-04T06:11:11+00:00","UserScreenname":"CodeInsideBlog","Text":"Serving embedded resources with #ASPNET #WebApi https://t.co/CSu0btGF8N","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"671587232478838785","CreatedAt":"2015-12-01T07:10:48+00:00","UserScreenname":"CodeInsideBlog","Text":"Working with JumpLists in #WPF Apps https://t.co/kqm3K8Y3Vf #Windows","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"658538752588034048","CreatedAt":"2015-10-26T07:00:48+00:00","UserScreenname":"CodeInsideBlog","Text":"XML deserialize to abstract class, interface or base class https://t.co/cilTqdQjkb","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"638235807048966144","CreatedAt":"2015-08-31T06:24:08+00:00","UserScreenname":"CodeInsideBlog","Text":"FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F# http://t.co/PgMVGq2yKR #Fake #MSTest #YeahIKnowItsMSTest","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"631389692076933121","CreatedAt":"2015-08-12T09:00:07+00:00","UserScreenname":"CodeInsideBlog","Text":"Reg.exe or how to import .reg files without admin privileges http://t.co/qwEjgFLEaL","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"631389631880253440","CreatedAt":"2015-08-12T08:59:53+00:00","UserScreenname":"CodeInsideBlog","Text":"HowTo: Write to Azure Blob Storage http://t.co/67r6XsuWzZ #Azure","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"631389556361830401","CreatedAt":"2015-08-12T08:59:35+00:00","UserScreenname":"CodeInsideBlog","Text":"Semantic Versioning in a nutshell http://t.co/Bw28QJLhol #SemVer","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null}]},"TwitterUserRobert":{"ResultType":"TwitterUser","Users":[{"Id":"14109602","CreatedAt":"2008-03-09T21:36:40+00:00","Name":"Robert Muehsig","Url":"http://t.co/4drS4Ug6BX","FollowersCount":1176,"Description":"Web Developer, Microsoft ASPNET MVP, Geek & Nerd  ¯\\_(ツ)_/¯","RawContent":null}]},"TwitterUserOliver":{"ResultType":"TwitterUser","Users":[{"Id":"19961277","CreatedAt":"2009-02-03T09:07:08+00:00","Name":"Oliver Guhr","Url":"http://t.co/akwMSqLW6n","FollowersCount":585,"Description":"Developer. Organisiert die .NET User Group Dresden","RawContent":null}]}},"RunOn":"2017-10-01T05:30:05.3655815Z","RunDurationInMilliseconds":3794}