{"Data":{"Blog":{"FeedItems":[{"Title":"First steps with Azure OpenAI and .NET","PublishedOn":"2023-03-23T23:55:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The AI world is rising very fast these days: <a href=\"https://chat.openai.com/\">ChatGPT</a> is such an awesome (and scary good?) service and Microsoft <a href=\"https://blogs.microsoft.com/blog/2023/01/23/microsoftandopenaiextendpartnership/\">joined the ship with some partner announcements and investments</a>. The result is of these actions is, that OpenAI is now a “first class citizen” on Azure.</p>\n\n<p>So - for the average Microsoft/.NET developer this opens up a wonderful toolbox and the first steps are really easy.</p>\n\n<p><strong>Be aware:</strong> You need to <a href=\"https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUOFA5Qk1UWDRBMjg0WFhPMkIzTzhKQ1dWNyQlQCN0PWcu\">“apply” to access the OpenAI service</a>, but it took less then 24 hours for us to gain access to the service. I guess this is just a temporary thing.</p>\n\n<p><strong>Disclaimer:</strong> I’m not an AI/ML engineer and I only have a very “glimpse” knowledge about the technology behind GPT3, ChatGPT and ML in general. If in doubt, I always ask my buddy <a href=\"https://www.oliverguhr.eu/\">Oliver Guhr</a>, because he is much smarter in this stuff. Follow him on <a href=\"https://twitter.com/oliverguhr\">Twitter</a>!</p>\n\n<h1 id=\"1-step-go-to-azure-openai-service\">1. Step: Go to Azure OpenAI Service</h1>\n\n<p>Search for “OpenAI” and you will see the “Azure OpenAI Service” entry:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/openai-service.png\" alt=\"x\" title=\"Step 1\" /></p>\n\n<h1 id=\"2-step-create-a-azure-openai-service-instance\">2. Step: Create a Azure OpenAI Service instance</h1>\n\n<p>Create a new Azure OpenAI Service instance:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/create.png\" alt=\"x\" title=\"Step 2\" /></p>\n\n<p>On the next page you will need to enter the subscription, resource group, region and a name (typical Azure stuff):</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/create-details.png\" alt=\"x\" title=\"Step 2 - details\" /></p>\n\n<p><strong>Be aware:</strong> If your subscription is not enabled for OpenAI, you need to <a href=\"https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUOFA5Qk1UWDRBMjg0WFhPMkIzTzhKQ1dWNyQlQCN0PWcu\">apply here</a> first.</p>\n\n<h1 id=\"3-step-overview-and-create-a-model\">3. Step: Overview and create a model</h1>\n\n<p>After the service is created you should see something like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/overview.png\" alt=\"x\" title=\"Step 3 - overview\" /></p>\n\n<p>Now go to “Model deployments” and create a model - I choosed “text-davinci-003”, because I <em>think</em> this is GPT3.5 (which was the initial ChatGPT release, GPT4 is currently in preview for Azure and you need to <a href=\"https://azure.microsoft.com/en-us/blog/introducing-gpt4-in-azure-openai-service/\">apply again</a>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/model.png\" alt=\"x\" title=\"Step 3 - model\" /></p>\n\n<p>My guess is, that you could train/deploy other, specialized models here, because this model is quite complex and you might want to tailor the model for your scenario to get faster/cheaper results… but I honestly don’t know how to do it (currently), so we just leave the default.</p>\n\n<h1 id=\"4-step-get-the-endpoint-and-the-key\">4. Step: Get the endpoint and the key</h1>\n\n<p>In this step we just need to copy the key and the endpoint, which can be found under “Keys and Endpoint”, simple - right?</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-23/keys-and-endpoint.png\" alt=\"x\" title=\"Step 4\" /></p>\n\n<h1 id=\"5-step-hello-world-to-our-azure-openai-instance\">5. Step: Hello World to our Azure OpenAI instance</h1>\n\n<p>Create a .NET application and add the <a href=\"https://www.nuget.org/packages/Azure.AI.OpenAI/\">Azure.AI.OpenAI</a> NuGet package (currently in preview!).</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dotnet add package Azure.AI.OpenAI --version 1.0.0-beta.5\n</code></pre></div></div>\n\n<p>Use this code:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>using Azure.AI.OpenAI;\nusing Azure;\n\nConsole.WriteLine(\"Hello, World!\");\n\nOpenAIClient client = new OpenAIClient(\n        new Uri(\"YOUR-ENDPOINT\"),\n        new AzureKeyCredential(\"YOUR-KEY\"));\n\nstring deploymentName = \"text-davinci-003\";\nstring prompt = \"Tell us something about .NET development.\";\nConsole.Write($\"Input: {prompt}\");\n\nResponse&lt;Completions&gt; completionsResponse = client.GetCompletions(deploymentName, prompt);\nstring completion = completionsResponse.Value.Choices[0].Text;\n\nConsole.WriteLine(completion);\n\nConsole.ReadLine();\n\n</code></pre></div></div>\n\n<p><strong>Result:</strong></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Hello, World!\nInput: Tell us something about .NET development.\n\n.NET development is a mature, feature-rich platform that enables developers to create sophisticated web applications, services, and applications for desktop, mobile, and embedded systems. Its features include full-stack programming, object-oriented data structures, security, scalability, speed, and an open source framework for distributed applications. A great advantage of .NET development is its capability to develop applications for both Windows and Linux (using .NET Core). .NET development is also compatible with other languages such as\n</code></pre></div></div>\n\n<p>As you can see… the result is cut off, not sure why, but this is just a simple demonstration.</p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<p>With these basic steps you can access the OpenAI development world. Azure makes it easy to integrate in your existing Azure/Microsoft “stack”. Be aware, that you could also use the same SDK and use the endpoint from OpenAI. Because of billing reasons it is easier for us to use the Azure hosted instances.</p>\n\n<p>Hope this helps!</p>\n\n<h1 id=\"video-on-my-youtube-channel\">Video on my YouTube Channel</h1>\n\n<p>If you understand German and want to see it in action, check out my video on my <a href=\"https://www.youtube.com/@CodeInsideCasts\">Channel</a>:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VVNHT4gVxDo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n","Href":"https://blog.codeinside.eu/2023/03/23/first-steps-with-azure-openai-and-dotnet/","RawContent":null,"Thumbnail":null},{"Title":"How to fix: 'Microsoft.ACE.OLEDB.12.0' provider is not registered on the local machine","PublishedOn":"2023-03-18T23:55:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>In our product we can interact with different datasource and one of these datasources was a Microsoft Access DB connected via <code class=\"language-plaintext highlighter-rouge\">OLEDB</code>. This is really, really old, but still works, but on one customer machine we had this issue:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'Microsoft.ACE.OLEDB.12.0' provider is not registered on the local machine\n</code></pre></div></div>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>If you face this issue, you need to install the provider from <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=13255\">here</a>.</p>\n\n<p><strong>Be aware:</strong> If you have a different error, you might need to install the newer provider - this is labled as “2010 Redistributable”, but still works with all those fancy Office 365 apps out there.</p>\n\n<p><strong>Important:</strong> You need to install the provider in the correct bit version, e.g. if you run under x64, install the x64.msi.</p>\n\n<p>The solution comes from this <a href=\"https://stackoverflow.com/questions/6649363/microsoft-ace-oledb-12-0-provider-is-not-registered-on-the-local-machine\">Stackoverflow question</a>.</p>\n\n<h1 id=\"helper\">Helper</h1>\n\n<p>The best tip from Stackoverflow was these powershell commands to check, if the provider is there or not:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(New-Object system.data.oledb.oledbenumerator).GetElements() | select SOURCES_NAME, SOURCES_DESCRIPTION \n\nGet-OdbcDriver | select Name,Platform\n</code></pre></div></div>\n\n<p>This will return something like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PS C:\\Users\\muehsig&gt; (New-Object system.data.oledb.oledbenumerator).GetElements() | select SOURCES_NAME, SOURCES_DESCRIPTION\n\nSOURCES_NAME               SOURCES_DESCRIPTION\n------------               -------------------\nSQLOLEDB                   Microsoft OLE DB Provider for SQL Server\nMSDataShape                MSDataShape\nMicrosoft.ACE.OLEDB.12.0   Microsoft Office 12.0 Access Database Engine OLE DB Provider\nMicrosoft.ACE.OLEDB.16.0   Microsoft Office 16.0 Access Database Engine OLE DB Provider\nADsDSOObject               OLE DB Provider for Microsoft Directory Services\nWindows Search Data Source Microsoft OLE DB Provider for Search\nMSDASQL                    Microsoft OLE DB Provider for ODBC Drivers\nMSDASQL Enumerator         Microsoft OLE DB Enumerator for ODBC Drivers\nSQLOLEDB Enumerator        Microsoft OLE DB Enumerator for SQL Server\nMSDAOSP                    Microsoft OLE DB Simple Provider\n\n\nPS C:\\Users\\muehsig&gt; Get-OdbcDriver | select Name,Platform\n\nName                                                   Platform\n----                                                   --------\nDriver da Microsoft para arquivos texto (*.txt; *.csv) 32-bit\nDriver do Microsoft Access (*.mdb)                     32-bit\nDriver do Microsoft dBase (*.dbf)                      32-bit\nDriver do Microsoft Excel(*.xls)                       32-bit\nDriver do Microsoft Paradox (*.db )                    32-bit\nMicrosoft Access Driver (*.mdb)                        32-bit\nMicrosoft Access-Treiber (*.mdb)                       32-bit\nMicrosoft dBase Driver (*.dbf)                         32-bit\nMicrosoft dBase-Treiber (*.dbf)                        32-bit\nMicrosoft Excel Driver (*.xls)                         32-bit\nMicrosoft Excel-Treiber (*.xls)                        32-bit\nMicrosoft ODBC for Oracle                              32-bit\nMicrosoft Paradox Driver (*.db )                       32-bit\nMicrosoft Paradox-Treiber (*.db )                      32-bit\nMicrosoft Text Driver (*.txt; *.csv)                   32-bit\nMicrosoft Text-Treiber (*.txt; *.csv)                  32-bit\nSQL Server                                             32-bit\nODBC Driver 17 for SQL Server                          32-bit\nSQL Server                                             64-bit\nODBC Driver 17 for SQL Server                          64-bit\nMicrosoft Access Driver (*.mdb, *.accdb)               64-bit\nMicrosoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb) 64-bit\nMicrosoft Access Text Driver (*.txt, *.csv)            64-bit\n</code></pre></div></div>\n\n<p>Hope this helps! (And I hope you don’t need to deal with these ancient technologies for too long 😅)</p>\n","Href":"https://blog.codeinside.eu/2023/03/18/microsoft-ace-oledb-12-0-provider-is-not-registered/","RawContent":null,"Thumbnail":null},{"Title":"Resource type is not supported in this subscription","PublishedOn":"2023-03-11T23:55:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>I was playing around with some Visual Studio Tooling and noticed this error during the creation of a “Azure Container Apps”-app:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Resource type is not supported in this subscription</code></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-11/error.png\" alt=\"x\" title=\"Error\" /></p>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>The solution is quite strange at first, but in the super configurable world of Azure it makes sense: You need to activate the <a href=\"https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/resource-providers-and-types\"><strong>Resource provider</strong></a> for this feature on your subscription. For <code class=\"language-plaintext highlighter-rouge\">Azure Container Apps</code> you need the <code class=\"language-plaintext highlighter-rouge\">Microsoft.ContainerRegistry</code>-resource provider <strong>registered</strong>:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-03-11/solution.png\" alt=\"x\" title=\"Solution\" /></p>\n\n<p>It seems, that you can create such resources via the Portal, but if you go via the API (which Visual Studio seems to do) the provider needs to be registered at first.</p>\n\n<p>Some resource providers are “enabled by default”, other providers needs to be turned on manually. Check out this list for a list of <a href=\"https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers\">all resource providers and the related Azure service</a>.</p>\n\n<p><strong>Be careful:</strong> I guess you should only enable the resource providers that you really need, otherwise your attack surface will get larger.</p>\n\n<p>To be honest: This was completly new for me - I do Azure since ages and never had to deal with resource providers. Always learning ;)</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2023/03/11/resource-type-is-not-supported-in-this-subscription/","RawContent":null,"Thumbnail":null},{"Title":"Azure DevOps Server 2022 Update","PublishedOn":"2023-02-15T23:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"azure-devops-server-2022---onprem\">Azure DevOps Server 2022 - OnPrem?</h1>\n\n<p>Yes I know - you can get everything from the cloud nowadays, but <a href=\"https://primesoft-group.com/\">we</a> are still using our OnPrem hardware and were running the “old” <a href=\"https://blog.codeinside.eu/2020/11/30/update-onprem-azuredevops-server-2019-to-azuredevops-server-2019-update1/\">Azure DevOps Server 2020</a>. \nThe <em>_Azure DevOps Server 2022</em> was released <a href=\"https://learn.microsoft.com/en-us/azure/devops/server/release-notes/azuredevops2022?view=azure-devops-2022\">last december</a>, so an update was due.</p>\n\n<h1 id=\"requirements\">Requirements</h1>\n\n<p>If you are running am Azure DevOps Server 2020 the <a href=\"https://learn.microsoft.com/en-us/azure/devops/server/requirements?view=azure-devops-2022&amp;viewFallbackFrom=azure-devops\">requirements</a> for the new 2022 release are “more or less” the same <strong>except</strong> the following important parts:</p>\n\n<ul>\n  <li>Supported server operation systems: <strong>Windows Server 2022 &amp; Windows Server 2019</strong> vs. the old Azure DevOps Server 2020 could run under a Windows Server 2016</li>\n  <li>Supported SQL Server versions: <strong>Azure SQL Database, SQL Managed Instance, SQL Server 2019, SQL Server 2017</strong> vs. the old Azure DevOps Server supported SQL Server 2016.</li>\n</ul>\n\n<h1 id=\"make-sure-you-have-a-backup\">Make sure you have a backup</h1>\n\n<p>The last requirement was a suprise for me, because I thought the update should run smoothly, but the installer removed the previous version and I couldn’t update, because our SQL Server was still on SQL Server 2016. Fortunately we had a VM backup and could rollback to the previous version.</p>\n\n<h1 id=\"step-for-step\">Step for Step</h1>\n\n<p>The update process itself was straightforward: Download the <a href=\"https://learn.microsoft.com/en-us/azure/devops/server/download/azuredevopsserver?view=azure-devops-2022\">installer</a> and run it.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step1.png\" alt=\"x\" title=\"Step 1\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step2.png\" alt=\"x\" title=\"Step 2\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step3.png\" alt=\"x\" title=\"Step 3\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step4.png\" alt=\"x\" title=\"Step 4\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step5.png\" alt=\"x\" title=\"Step 5\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step6.png\" alt=\"x\" title=\"Step 6\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step7.png\" alt=\"x\" title=\"Step 7\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step8.png\" alt=\"x\" title=\"Step 8\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step9.png\" alt=\"x\" title=\"Step 9\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-15/step10.png\" alt=\"x\" title=\"Step 10\" /></p>\n\n<p><em>The screenshots are from two different sessions. If you look carefully on the clock you might see that the date is different, that is because of the SQL Server 2016 problem.</em></p>\n\n<p>As you can see - everything worked as expected, but after we updated the server the search, which is powered by ElasticSearch was not working. The “ElasticSearch”-Windows-Service just crashed on startup and I’m not a Java guy, so… we fixed it by removing the search feature and reinstall it. \nWe tried to clean the cache, but it was still not working. After the reinstall of this feature the issue went away.</p>\n\n<h1 id=\"features\">Features</h1>\n\n<p>Azure Server 2022 is just a minor update (at least from a typical user perspective). The biggest new feature might be “Delivery Plans”, which are nice, but for small teams not a huge benefit. Check out the <a href=\"https://learn.microsoft.com/en-us/azure/devops/server/release-notes/azuredevops2022?view=azure-devops#azure-devops-server-2022-rc1-release-date-august-9-2022\">release notes</a>.</p>\n\n<p>A nice - nerdy - enhancement, and not mentioned in the release notes: “<a href=\"https://mermaid.js.org/\">mermaid.js</a>” is now supported in the Azure DevOps Wiki, yay!</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2023/02/15/azure-devops-server-2022-update/","RawContent":null,"Thumbnail":null},{"Title":"Use ASP.NET Core and React with Vite.js","PublishedOn":"2023-02-11T01:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"the-cra-problem\">The CRA Problem</h1>\n\n<p>In my <a href=\"https://blog.codeinside.eu/2023/01/25/aspnet-core-and-react/\">previous post</a> I showed a simple setup with ASP.NET Core &amp; React. The React part was created with the “CRA”-Tooling, which is kind of <a href=\"https://twitter.com/t3dotgg/status/1616918838830059520\">problematic</a>. The “new” state of the art React tooling seems to be <a href=\"https://vitejs.dev/\">vite.js</a> - so let’s take a look how to use this.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/vitejs.png\" alt=\"x\" title=\"Vitejs Logo\" /></p>\n\n<h1 id=\"step-for-step\">Step for Step</h1>\n\n<p><strong>Step 1: Create a “normal” ASP.NET Core project</strong></p>\n\n<p>(I like the ASP.NET Core MVC template, but feel free to use something else - same as in the <a href=\"https://blog.codeinside.eu/2023/01/25/aspnet-core-and-react/\">other blogpost</a>)</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/step1.png\" alt=\"x\" title=\"Step 1: Create a normal ASPNET Core project\" /></p>\n\n<p><strong>Step 2: Install vite.js and init the template</strong></p>\n\n<p>Now move to the root directory of your project with a shell and execute this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm create vite@latest clientapp -- --template react-ts\n</code></pre></div></div>\n\n<p>This will install the latest &amp; greatest vitejs based react app in a folder called <code class=\"language-plaintext highlighter-rouge\">clientapp</code> with the <code class=\"language-plaintext highlighter-rouge\">react-ts</code> template (React with Typescript). Vite itself isn’t focused on React and supports many <a href=\"https://vitejs.dev/guide/#trying-vite-online\">different frontend frameworks</a>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/step2.png\" alt=\"x\" title=\"Step 2: Init vitejs\" /></p>\n\n<p><strong>Step 3: Enable HTTPS in your vite.js</strong></p>\n\n<p>Just like in the “CRA”-setup we need to make sure, that the environment is served under HTTPS. In the “CRA” world we needed to different files from the original ASP.NET Core &amp; React template, but with vite.js there is a much simpler option available.</p>\n\n<p>Execute the following command in the <code class=\"language-plaintext highlighter-rouge\">clientapp</code> directory:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install --save-dev vite-plugin-mkcert\n</code></pre></div></div>\n\n<p>Then in your <code class=\"language-plaintext highlighter-rouge\">vite.config.ts</code> use this config:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport mkcert from 'vite-plugin-mkcert'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n    base: '/app',\n    server: {\n        https: true,\n        port: 6363\n    },\n    plugins: [react(), mkcert()],\n})\n</code></pre></div></div>\n\n<p>Be aware: The <code class=\"language-plaintext highlighter-rouge\">base: '/app'</code> will be used as a sub-path.</p>\n\n<p>The important part for the HTTPS setting is that we use the <code class=\"language-plaintext highlighter-rouge\">mkcert()</code> plugin and configure the server part with a port and set <code class=\"language-plaintext highlighter-rouge\">https</code> to <code class=\"language-plaintext highlighter-rouge\">true</code>.</p>\n\n<p><strong>Step 4: Add the Microsoft.AspNetCore.SpaServices.Extensions NuGet package</strong></p>\n\n<p>Same as in the other blogpost, we need to add the <a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices.Extensions\">Microsoft.AspNetCore.SpaServices.Extensions</a> NuGet package to glue the ASP.NET Core development and React world together. If you use .NET 7, then use the version 7.x.x, if you use .NET 6, use the version 6.x.x - etc.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/step4.png\" alt=\"x\" title=\"Step 4: Add NuGet Package\" /></p>\n\n<p><strong>Step 5: Enhance your Program.cs</strong></p>\n\n<p>Back to the <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> - this is more or less the same as with the “CRA” setup:</p>\n\n<p>Add the <code class=\"language-plaintext highlighter-rouge\">SpaStaticFiles</code> to the services collection like this in your <code class=\"language-plaintext highlighter-rouge\">Program.cs</code> - be aware, that vite.js builds everything in a folder called <code class=\"language-plaintext highlighter-rouge\">dist</code>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllersWithViews();\n\n// ↓ Add the following lines: ↓\nbuilder.Services.AddSpaStaticFiles(configuration =&gt; {\n    configuration.RootPath = \"clientapp/dist\";\n});\n// ↑ these lines ↑\n\nvar app = builder.Build();\n</code></pre></div></div>\n\n<p>Now we need to use the SpaServices like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>app.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\n// ↓ Add the following lines: ↓\nvar spaPath = \"/app\";\nif (app.Environment.IsDevelopment())\n{\n    app.MapWhen(y =&gt; y.Request.Path.StartsWithSegments(spaPath), client =&gt;\n    {\n        client.UseSpa(spa =&gt;\n        {\n            spa.UseProxyToSpaDevelopmentServer(\"https://localhost:6363\");\n        });\n    });\n}\nelse\n{\n    app.Map(new PathString(spaPath), client =&gt;\n    {\n        client.UseSpaStaticFiles();\n        client.UseSpa(spa =&gt; {\n            spa.Options.SourcePath = \"clientapp\";\n\n            // adds no-store header to index page to prevent deployment issues (prevent linking to old .js files)\n            // .js and other static resources are still cached by the browser\n            spa.Options.DefaultPageStaticFileOptions = new StaticFileOptions\n            {\n                OnPrepareResponse = ctx =&gt;\n                {\n                    ResponseHeaders headers = ctx.Context.Response.GetTypedHeaders();\n                    headers.CacheControl = new CacheControlHeaderValue\n                    {\n                        NoCache = true,\n                        NoStore = true,\n                        MustRevalidate = true\n                    };\n                }\n            };\n        });\n    });\n}\n// ↑ these lines ↑\n\napp.Run();\n</code></pre></div></div>\n\n<p>Just like in the original blogpost. In the development mode we use the <code class=\"language-plaintext highlighter-rouge\">UseProxyToSpaDevelopmentServer</code>-method to proxy all requests to the vite.js dev server. In the real world, we will use the files from the <code class=\"language-plaintext highlighter-rouge\">dist</code> folder.</p>\n\n<p><strong>Step 6: Invoke npm run build during publish</strong></p>\n\n<p>The last step is to complete the setup. We want to build the ASP.NET Core app <strong>and</strong> the React app, when we use <code class=\"language-plaintext highlighter-rouge\">dotnet publish</code>:</p>\n\n<p>Add this to your <code class=\"language-plaintext highlighter-rouge\">.csproj</code>-file and it should work:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t&lt;PropertyGroup&gt;\n\t\t&lt;SpaRoot&gt;clientapp\\&lt;/SpaRoot&gt;\n\t&lt;/PropertyGroup&gt;\n\n\t&lt;Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\"&gt;\n\t\t&lt;!-- As part of publishing, ensure the JS resources are freshly built in production mode --&gt;\n\t\t&lt;Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm install\" /&gt;\n\t\t&lt;Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm run build\" /&gt;\n\n\t\t&lt;!-- Include the newly-built files in the publish output --&gt;\n\t\t&lt;ItemGroup&gt;\n\t\t\t&lt;DistFiles Include=\"$(SpaRoot)dist\\**\" /&gt;  &lt;!-- Changed to dist! --&gt;\n\t\t\t&lt;ResolvedFileToPublish Include=\"@(DistFiles-&gt;'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\"&gt;\n\t\t\t\t&lt;RelativePath&gt;%(DistFiles.Identity)&lt;/RelativePath&gt; &lt;!-- Changed! --&gt;\n\t\t\t\t&lt;CopyToPublishDirectory&gt;PreserveNewest&lt;/CopyToPublishDirectory&gt;\n\t\t\t\t&lt;ExcludeFromSingleFile&gt;true&lt;/ExcludeFromSingleFile&gt;\n\t\t\t&lt;/ResolvedFileToPublish&gt;\n\t\t&lt;/ItemGroup&gt;\n\t&lt;/Target&gt;\n</code></pre></div></div>\n\n<h1 id=\"result\">Result</h1>\n\n<p>You should now be able to use Visual Studio Code (or something like this) and start the frontend project with <code class=\"language-plaintext highlighter-rouge\">dev</code>. If you open a browser and go to <code class=\"language-plaintext highlighter-rouge\">https://127.0.0.1:6363/app</code> you should see something like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/result-vscode.png\" alt=\"x\" title=\"Visual Studio Code Result\" /></p>\n\n<p>Now start the ASP.NET Core app and go to <code class=\"language-plaintext highlighter-rouge\">/app</code> and it should look like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/result-vs.png\" alt=\"x\" title=\"Visual Studio Result\" /></p>\n\n<p>Ok - this looks broken, right? Well - this is a more or less a <a href=\"https://github.com/vitejs/vite/issues/7358\">“known” problem</a>, but can be easily avoided. If we import the logo from the assets it works as expected and shouldn’t be a general problem:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-02-11/result-fix.png\" alt=\"x\" title=\"Fix\" /></p>\n\n<h1 id=\"code\">Code</h1>\n\n<p>The sample code can be found <a href=\"https://github.com/Code-Inside/Samples/tree/master/2023/reactvideovite/reactvideovite\">here</a>.</p>\n\n<h1 id=\"video\">Video</h1>\n\n<p>I made a video about this topic (in German, sorry :-/) as well - feel free to subscribe ;)</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-2iiXpBcmDY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2023/02/11/aspnet-core-react-with-vitejs/","RawContent":null,"Thumbnail":null},{"Title":"Use ASP.NET Core & React togehter","PublishedOn":"2023-01-25T23:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"the-aspnet-core-react-template\">The ASP.NET Core React template</h1>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreacttemplate.png\" alt=\"x\" title=\"ASP.NET Core React template\" /></p>\n\n<p>Visual Studio (at least VS 2019 and the newer 2022) ships with a ASP.NET Core React template, which is “ok-ish”, but has some really <strong>bad problems</strong>:</p>\n\n<p>The React part of this template is scaffolded via “CRA” (which seems to be <a href=\"https://twitter.com/t3dotgg/status/1616918838830059520\">problematic</a> as well, but is not the point of this post) and uses <strong>JavaScript instead of TypeScript</strong>.\nAnother huge pain point (from my perspective) is that the template uses some special configurations to just host the react part for users - if you want to mix in some “MVC”/”Razor” stuff, you need to change some of this “magic”.</p>\n\n<p>The <strong>good parts</strong>:</p>\n\n<p>Both worlds can live together: During development time the ASP.NET Core stuff is hosted via Kestrel and the React part is hosted under the WebPack Development server. The lovely hot reload is working as expected and is really powerful.\nIf you are doing a release build, the project will take care of the npm-magic.</p>\n\n<p>But because of the “bad problems” outweight the benefits, we try to integrate a typical react app in a “normal” ASP.NET Core app.</p>\n\n<h1 id=\"step-for-step\">Step for Step</h1>\n\n<p><strong>Step 1: Create a “normal” ASP.NET Core project</strong></p>\n\n<p>(I like the ASP.NET Core MVC template, but feel free to use something else)</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreact-step1.png\" alt=\"x\" title=\"Step 1: Create a normal ASPNET Core project\" /></p>\n\n<p><strong>Step 2: Create a react app inside the ASP.NET Core project</strong></p>\n\n<p>(For this blogpost I use the “Create React App”-approach, but you can use whatever you like)</p>\n\n<p>Execute this in your ASP.NET Core template (node &amp; npm must be installed!):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npx create-react-app clientapp --template typescript\n</code></pre></div></div>\n\n<p><strong>Step 3: Copy some stuff from the React template</strong></p>\n\n<p>The react template ships with some scripts and settings that we want to preserve:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreact-step3.png\" alt=\"x\" title=\"Step 3: Copy from the react template\" /></p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">aspnetcore-https.js</code> and <code class=\"language-plaintext highlighter-rouge\">aspnetcore-react.js</code> file is needed to setup the ASP.NET Core SSL dev certificate for the WebPack Dev Server. \nYou should also copy the <code class=\"language-plaintext highlighter-rouge\">.env</code> &amp; <code class=\"language-plaintext highlighter-rouge\">.env.development</code> file in the root of your <code class=\"language-plaintext highlighter-rouge\">clientapp</code>-folder!</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">.env</code> file only has this setting:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>BROWSER=none\n</code></pre></div></div>\n\n<p>A more important setting is in the <code class=\"language-plaintext highlighter-rouge\">.env.development</code> file (change the port to something different!):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PORT=3333\nHTTPS=true\n</code></pre></div></div>\n\n<p>The port number <code class=\"language-plaintext highlighter-rouge\">3333</code> and the <code class=\"language-plaintext highlighter-rouge\">https=true</code> will be important later, otherwise our setup will not work.</p>\n\n<p>Also, <strong>add</strong> this line to the <code class=\"language-plaintext highlighter-rouge\">.env</code>-file (in theory you can use any name - for this sample we keep it <code class=\"language-plaintext highlighter-rouge\">spaApp</code>):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PUBLIC_URL=/spaApp\n</code></pre></div></div>\n\n<p><strong>Step 4: Add the prestart to the package.json</strong></p>\n\n<p>In your project open the <code class=\"language-plaintext highlighter-rouge\">package.json</code> and <strong>add</strong> the <code class=\"language-plaintext highlighter-rouge\">prestart</code>-line like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  \"scripts\": {\n    \"prestart\": \"node aspnetcore-https &amp;&amp; node aspnetcore-react\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n</code></pre></div></div>\n\n<p><strong>Step 5: Add the Microsoft.AspNetCore.SpaServices.Extensions NuGet package</strong></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreact-step5.png\" alt=\"x\" title=\"Step 5: Add the SpaServices NuGet package\" /></p>\n\n<p>We need the <a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices.Extensions\">Microsoft.AspNetCore.SpaServices.Extensions</a> NuGet-package. If you use .NET 7, then use the version 7.x.x, if you use .NET 6, use the version 6.x.x - etc.</p>\n\n<p><strong>Step 6: Enhance your Program.cs</strong></p>\n\n<p>Add the <code class=\"language-plaintext highlighter-rouge\">SpaStaticFiles</code> to the services collection like this in your <code class=\"language-plaintext highlighter-rouge\">Program.cs</code>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllersWithViews();\n\n// ↓ Add the following lines: ↓\nbuilder.Services.AddSpaStaticFiles(configuration =&gt; {\n    configuration.RootPath = \"clientapp/build\";\n});\n// ↑ these lines ↑\n\nvar app = builder.Build();\n</code></pre></div></div>\n\n<p>Now we need to use the SpaServices like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>app.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\n// ↓ Add the following lines: ↓\nvar spaPath = \"/spaApp\";\nif (app.Environment.IsDevelopment())\n{\n    app.MapWhen(y =&gt; y.Request.Path.StartsWithSegments(spaPath), client =&gt;\n    {\n        client.UseSpa(spa =&gt;\n        {\n            spa.UseProxyToSpaDevelopmentServer(\"https://localhost:3333\");\n        });\n    });\n}\nelse\n{\n    app.Map(new PathString(spaPath), client =&gt;\n    {\n        client.UseSpaStaticFiles();\n        client.UseSpa(spa =&gt; {\n            spa.Options.SourcePath = \"clientapp\";\n\n            // adds no-store header to index page to prevent deployment issues (prevent linking to old .js files)\n            // .js and other static resources are still cached by the browser\n            spa.Options.DefaultPageStaticFileOptions = new StaticFileOptions\n            {\n                OnPrepareResponse = ctx =&gt;\n                {\n                    ResponseHeaders headers = ctx.Context.Response.GetTypedHeaders();\n                    headers.CacheControl = new CacheControlHeaderValue\n                    {\n                        NoCache = true,\n                        NoStore = true,\n                        MustRevalidate = true\n                    };\n                }\n            };\n        });\n    });\n}\n// ↑ these lines ↑\n\napp.Run();\n</code></pre></div></div>\n\n<p>As you can see, we run in two different modes. \nIn our development world we just use the <code class=\"language-plaintext highlighter-rouge\">UseProxyToSpaDevelopmentServer</code>-method to proxy all requests that points to <code class=\"language-plaintext highlighter-rouge\">spaApp</code> to the React WebPack DevServer (or something else). The huge benefit is, that you can use the React ecosystem with all its tools. Normally we use Visual Studio Code to run our react frontend and use the ASP.NET Core app as the “Backend for frontend”.\nIn production we use the build artefacts of the react build and make sure, that it’s not cached. To make the deployment easier, we need to invoke <code class=\"language-plaintext highlighter-rouge\">npm run build</code> when we publish this ASP.NET Core app.</p>\n\n<p><strong>Step 7: Invoke npm run build during publish</strong></p>\n\n<p>Add this to your <code class=\"language-plaintext highlighter-rouge\">.csproj</code>-file and it should work:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t&lt;PropertyGroup&gt;\n\t\t&lt;SpaRoot&gt;clientapp\\&lt;/SpaRoot&gt;\n\t&lt;/PropertyGroup&gt;\n\n\t&lt;Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\"&gt;\n\t\t&lt;!-- As part of publishing, ensure the JS resources are freshly built in production mode --&gt;\n\t\t&lt;Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm install\" /&gt;\n\t\t&lt;Exec WorkingDirectory=\"$(SpaRoot)\" Command=\"npm run build\" /&gt;\n\n\t\t&lt;!-- Include the newly-built files in the publish output --&gt;\n\t\t&lt;ItemGroup&gt;\n\t\t\t&lt;DistFiles Include=\"$(SpaRoot)build\\**\" /&gt;\n\t\t\t&lt;ResolvedFileToPublish Include=\"@(DistFiles-&gt;'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\"&gt;\n\t\t\t\t&lt;RelativePath&gt;%(DistFiles.Identity)&lt;/RelativePath&gt; &lt;!-- Changed! --&gt;\n\t\t\t\t&lt;CopyToPublishDirectory&gt;PreserveNewest&lt;/CopyToPublishDirectory&gt;\n\t\t\t\t&lt;ExcludeFromSingleFile&gt;true&lt;/ExcludeFromSingleFile&gt;\n\t\t\t&lt;/ResolvedFileToPublish&gt;\n\t\t&lt;/ItemGroup&gt;\n\t&lt;/Target&gt;\n</code></pre></div></div>\n\n<p>Be aware that these instruction are copied from the original ASP.NET Core React template and are slightly modified, otherwise the path wouldn’t match.</p>\n\n<h1 id=\"result\">Result</h1>\n\n<p>With this setup you can add any spa app that you would like to add to your “normal” ASP.NET Core project.</p>\n\n<p>If everything works as expected you should be able to start the React app in Visual Studio Code like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreact-result-react.png\" alt=\"x\" title=\"React App in VS Code\" /></p>\n\n<p>Be aware of the <strong>https://localhost:3333/spaApp</strong>. The port and the name is important for our sample!</p>\n\n<p>Start your hosting ASP.NET Core app in Visual Studio (or in any IDE that you like) and all requests that points to <code class=\"language-plaintext highlighter-rouge\">spaApp</code> use the WebPack DevServer in the background:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-25/aspnetreact-result-aspnet.png\" alt=\"x\" title=\"ASPNET App in VS\" /></p>\n\n<p>With this setup you can mix all client &amp; server side styles as you like - mission succeeded and you can use any client setup (CRA, anything else) as you would like to.</p>\n\n<h1 id=\"code\">Code</h1>\n\n<p>The code (but with slightly modified values (e.g. another port)) can be found <a href=\"https://github.com/Code-Inside/Samples/tree/master/2023/aspnetreactmix\">here</a>. \nBe aware, that <code class=\"language-plaintext highlighter-rouge\">npm i</code> needs to be run first.</p>\n\n<h1 id=\"video\">Video</h1>\n\n<p>I uploaded a video on my YouTube channel (in German) about this setup:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/IgW79wxMO-c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2023/01/25/aspnet-core-and-react/","RawContent":null,"Thumbnail":null},{"Title":"Your URL is flagged as malware/phishing, now what?","PublishedOn":"2023-01-04T22:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"problem\">Problem</h1>\n\n<p>On my last day in 2022 - Friday, 23. December, I received a support ticket from one customer, that our software seems to be offline and it looks like that our servers are not responding. I checked our monitoring and the server side of the customer and everything was fine. \nMy first thought: Maybe a misconfiguration on the customer side, but after a remote support session with the customer, I saw that it “should work”, but something in the customer network blocks the requests to our services.\nNext thought: Firewall or proxy stuff. Always nasty, but we are just using port 443, so nothing too special.</p>\n\n<p>After a while I received a phone call from the customers firewall team and they discovered the problem: They are using a firewall solution from “Check Point” and <strong>our domain was flagged as “phishing”/”malware”</strong>. What the… \nThey even created an exception so that Check Point doesn’t block our requests, but the next problem occured: The customers “Windows Defender for Office 365” has the same “flag” for our domain, so they revert everything, because they didn’t want to change their settings too much.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-04/defender-warning.png\" alt=\"x\" title=\"Defender Warning\" /></p>\n\n<p>Be aware, that from our end everything was working “fine” and I could access the customer services and our Windows Defender didn’t had any problems with this domain.</p>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>Somehow our domain was flagged as malware/phishing and we needed to change this false positive listening. I guess there are tons of services, that “tracks” “bad” websites and maybe all are connected somehow. From this indicent I can only suggest:</p>\n\n<p><strong>If you have trouble with Check Point:</strong></p>\n\n<p>Go to <a href=\"https://urlcat.checkpoint.com/urlcat/main.htm\">“URLCAT”</a>, register an account and try to change the category of your domain. After you submit the “change request” you will get an email like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Thank you for submitting your category change request.\nWe will process your request and notify you by email (to: xxx.xxx@xxx.com ).\nYou can follow the status of your request on this page.\nYour request details\nReference ID: [GUID]\nURL: https://[domain].com\nSuggested Categories: Computers / Internet,Business / Economy\nComment: [Given comment]\n</code></pre></div></div>\n\n<p>After ~1-2 days the change was done. Not sure if this is automated or not, but it was during Christmas.</p>\n\n<p><strong>If you have trouble with Windows Defender:</strong></p>\n\n<p>Go to <a href=\"https://security.microsoft.com/reportsubmission\">“Report submission”</a> in your Microsoft 365 Defender setting (you will need an account with special permissions, e.g. global admin) and add the URL as “Not junk”.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2023-01-04/defender-report.png\" alt=\"x\" title=\"Defender Report\" /></p>\n\n<p>I’m not really sure if this helped or not, because we didn’t had any issues with the domain itself and I’m not sure if those “false positive” tickets bubbles up into a “global defender catalog” or if this only affects our own tenant.</p>\n\n<h1 id=\"result\">Result</h1>\n\n<p>Anyway - after those tickets were “resolved” by Check Point / Microsoft the problem on the customer side disappeared and everyone was happy. This was my first experience with such an “false positive malware report”. I’m not sure how we ended up on such a list and why only one customer was affected.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2023/01/04/checkpoint-and-defender-false-positive-url/","RawContent":null,"Thumbnail":null},{"Title":"SQLLocalDb update","PublishedOn":"2022-12-03T22:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"short-intro\">Short Intro</h1>\n\n<p>SqlLocalDb is a “developer” SQL server, without the “full” SQL Server (Express) installation. If you just develop on your machine and don’t want to run a “full blown” SQL Server, this is the tooling that you might need.</p>\n\n<p>From the <a href=\"https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-express-localdb?view=sql-server-ver16\">Microsoft Docs</a>:</p>\n\n<blockquote>\n  <p>Microsoft SQL Server Express LocalDB is a feature of SQL Server Express targeted to developers. It is available on SQL Server Express with Advanced Services.</p>\n\n  <p>LocalDB installation copies a minimal set of files necessary to start the SQL Server Database Engine. Once LocalDB is installed, you can initiate a connection using a special connection string. When connecting, the necessary SQL Server infrastructure is automatically created and started, enabling the application to use the database without complex configuration tasks. Developer Tools can provide developers with a SQL Server Database Engine that lets them write and test Transact-SQL code without having to manage a full server instance of SQL Server.</p>\n</blockquote>\n\n<h1 id=\"problem\">Problem</h1>\n\n<p>(I’m not really sure, how I ended up on this problem, but I after I solved the problem I did it on my “To Blog”-bucket list)</p>\n\n<p>From time to time there is a new SQLLocalDb version, but to upgrade an <strong>existing</strong> installation is a bit “weird”.</p>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>If you have installed an older SQLLocalDb version you can manage it via <code class=\"language-plaintext highlighter-rouge\">sqllocaldb</code>. If you want to update you must delete the “current” MSSQLLocalDB in the first place.</p>\n\n<p>To to this use:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqllocaldb stop MSSQLLocalDB\nsqllocaldb delete MSSQLLocalDB\n</code></pre></div></div>\n\n<p>Then download the newest version <a href=\"https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-express-localdb?view=sql-server-ver16#installation-media\">from Microsoft</a>. \nIf you choose “Download Media” you should see something like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2022-12-03/sqllocaldbinstall.png\" alt=\"x\" title=\"SQL LocalDb installer\" /></p>\n\n<p>Download it, run it and restart your PC, after that you should be able to connect to the SQLLocalDb.</p>\n\n<p>We solved this issue with help of <a href=\"https://knowledge-base.havit.eu/2020/12/17/sql-localdb-upgrade-to-2019-15-0-2000/\">this blogpost</a>.</p>\n\n<p>Hope this helps! (and I can remove it now from my bucket list \\o/ )</p>\n","Href":"https://blog.codeinside.eu/2022/12/03/sqllocaldb-update/","RawContent":null,"Thumbnail":null},{"Title":"Azure DevOps & Azure Service Connection","PublishedOn":"2022-10-04T23:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Today I needed to setup a new release pipeline on our Azure DevOps Server installation to deploy some stuff automatically to Azure. The UI (at least on the Azure DevOps Server 2020 (!)) is not really clear about how to connect those two worlds, and thats why I’m writing this short blogpost.</p>\n\n<p>First - under project settings - add a new <strong>service connection</strong>. Use the <code class=\"language-plaintext highlighter-rouge\">Azure Resource Manager</code>-service. Now you should see something like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2022-10-04/azure-connection.png\" alt=\"x\" title=\"Azure Resource Manager\" /></p>\n\n<p><strong>Be aware:</strong> You will need to register app inside your Azure AD and need permissions to setup. If you are not able to follow these instructions, you might need to talk to your Azure subscription owner.</p>\n\n<p><strong>Subscription id:</strong></p>\n\n<p>Copy here the id of your subscription. This can be found in the subscription details:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2022-10-04/subscription.png\" alt=\"x\" title=\"Azure Subscription\" /></p>\n\n<p>Keep this tab open, because we need it later!</p>\n\n<p><strong>Service prinipal id/key &amp; tenant id:</strong></p>\n\n<p>Now this wording about “Service principal” is technically correct, but really confusing if your are not familar with Azure AD. A “Service prinipal” is like a “service user”/”app” that you need to register to use it.\nThe easiest route is to create an app via the <strong>Bash Azure CLI</strong>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>az ad sp create-for-rbac --name DevOpsPipeline\n</code></pre></div></div>\n\n<p>If this command succeeds you should see something like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n  \"appId\": \"[...GUID..]\",\n  \"displayName\": \"DevOpsPipeline\",\n  \"password\": \"[...PASSWORD...]\",\n  \"tenant\": \"[...Tenant GUID...]\"\n}\n</code></pre></div></div>\n\n<p>This creates an “Serivce principal” with a random password inside your Azure AD. The next step is to give this “Service principal” a role on your subscription, because it has currently no permissions to do anything (e.g. deploy a service etc.).</p>\n\n<p>Go to the subscription details page and then to <strong>Access control (IAM)</strong>. There you can add your “DevOpsPipeline”-App as “Contributor” (Be aware that this is a “powerful role”!).</p>\n\n<p>After that use the <code class=\"language-plaintext highlighter-rouge\">\"appId\": \"[...GUID..]\"</code> from the command as <strong>Service Principal Id</strong>. \nUse the <code class=\"language-plaintext highlighter-rouge\">\"password\": \"[...PASSWORD...]\"</code> as <strong>Service principal key</strong> and the <code class=\"language-plaintext highlighter-rouge\">\"tenant\": \"[...Tenant GUID...]\"</code> for the <strong>tenant id</strong>.</p>\n\n<p>Now you should be able to “Verify” this connection and it should work.</p>\n\n<p><strong>Links:</strong>\n<a href=\"https://azuredevopslabs.com/labs/devopsserver/azureserviceprincipal/#task-2-creating-an-azure-service-principal\">This blogpost</a> helped me a lot. <a href=\"https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal\">Here</a> you can find the official documentation.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2022/10/04/azure-devops-azure-service-connection/","RawContent":null,"Thumbnail":null},{"Title":"'error MSB8011: Failed to register output.' & UTF8-BOM files","PublishedOn":"2022-08-30T23:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Be aware: I’m not a C++ developer and this might be an “obvious” problem, but it took me a while to resolve this issue.</p>\n\n<p>In our product we have very few C++ projects. We use these projects for very special Microsoft Office COM stuff and because of COM we need to register some components during the build. Everything worked as expected, but we renamed a few files and our build broke with:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Microsoft\\VC\\v170\\Microsoft.CppCommon.targets(2302,5): warning MSB3075: The command \"regsvr32 /s \"C:/BuildAgentV3_1/_work/67/s\\_Artifacts\\_ReleaseParts\\XXX.Client.Addin.x64-Shims\\Common\\XXX.Common.Shim.dll\"\" exited with code 5. Please verify that you have sufficient rights to run this command. [C:\\BuildAgentV3_1\\_work\\67\\s\\XXX.Common.Shim\\XXX.Common.Shim.vcxproj]\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Microsoft\\VC\\v170\\Microsoft.CppCommon.targets(2314,5): error MSB8011: Failed to register output. Please try enabling Per-user Redirection or register the component from a command prompt with elevated permissions. [C:\\BuildAgentV3_1\\_work\\67\\s\\XXX.Common.Shim\\XXX.Common.Shim.vcxproj]\n\n(xxx = redacted)\n</code></pre></div></div>\n\n<p>The crazy part was: Using an older version of our project just worked as expected, but all changes were “fine” from my point of view.</p>\n\n<p>After many, many attempts I remembered that our diff tool doesn’t show us everything - so I checked the <strong>file encodings</strong>: <code class=\"language-plaintext highlighter-rouge\">UTF8-BOM</code></p>\n\n<p>Somehow if you have a UTF8-BOM encoded file that your C++ project uses to register COM stuff it will fail. I changed the encoding and to <code class=\"language-plaintext highlighter-rouge\">UTF8</code> and everyting worked as expected.</p>\n\n<p>What a day… lessons learned: Be aware of your file encodings.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2022/08/30/error-msb8011-failed-to-register-output-and-utf8bom/","RawContent":null,"Thumbnail":null},{"Title":"Which .NET Framework Version is installed on my machine?","PublishedOn":"2022-08-29T23:15:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>If you need to know which .NET Framework Version (the “legacy” .NET Framework) is installed on your machine try this handy oneliner:</p>\n\n<div class=\"language-ps highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">Get-ItemProperty</span> <span class=\"nf\">\"HKLM:SOFTWARE\\Microsoft\\NET</span> <span class=\"nf\">Framework</span> <span class=\"nf\">Setup\\NDP\\v4\\Full\"</span>\n</code></pre></div></div>\n\n<p>Result:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CBS           : 1\nInstall       : 1\nInstallPath   : C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\\nRelease       : 528372\nServicing     : 0\nTargetVersion : 4.0.0\nVersion       : 4.8.04084\nPSPath        : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework\n                Setup\\NDP\\v4\\Full\nPSParentPath  : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\nPSChildName   : Full\nPSDrive       : HKLM\nPSProvider    : Microsoft.PowerShell.Core\\Registry\n</code></pre></div></div>\n\n<p>The <strong>version</strong> should give you more then enough information.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2022/08/29/which-dotnet-version-is-installed-via-powershell/","RawContent":null,"Thumbnail":null},{"Title":"How to run a Azure App Service WebJob with parameters","PublishedOn":"2022-07-22T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>We are using <strong><a href=\"https://docs.microsoft.com/en-us/azure/app-service/webjobs-create\">WebJobs</a></strong> in our Azure App Service deployment and they are pretty “easy” for the most part. Just register a WebJobs or deploy your <code class=\"language-plaintext highlighter-rouge\">.exe/.bat/.ps1/...</code> under the <code class=\"language-plaintext highlighter-rouge\">\\site\\wwwroot\\app_data\\Jobs\\triggered</code> folder and it should execute as described in the <code class=\"language-plaintext highlighter-rouge\">settings.job</code>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2022-07-20/portal.png\" alt=\"x\" title=\"Portal\" /></p>\n\n<p>If you put any executable in this WebJob folder, it will be executed as planned.</p>\n\n<p><strong>Problem: Parameters</strong></p>\n\n<p>If you have a <code class=\"language-plaintext highlighter-rouge\">my-job.exe</code>, then this will be invoked from the runtime. But what if you need to invoke it with a parameter like <code class=\"language-plaintext highlighter-rouge\">my-job.exe -param \"test\"</code>?</p>\n\n<p><strong>Solution: run.cmd</strong></p>\n\n<p>The WebJob environment is “greedy” and will search for a <code class=\"language-plaintext highlighter-rouge\">run.cmd</code> (or <code class=\"language-plaintext highlighter-rouge\">run.exe</code>) and if this is found, it will be executed and it doesn’t matter if you have any other <code class=\"language-plaintext highlighter-rouge\">.exe</code> files there.\nStick to the <code class=\"language-plaintext highlighter-rouge\">run.cmd</code> and use this to invoke your actual executable like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>echo \"Invoke my-job.exe with parameters - Start\"\n\n..\\MyJob\\my-job.exe -param \"test\"\n\necho \"Invoke my-job.exe with parameters - Done\"\n</code></pre></div></div>\n\n<p>Be aware, that the path must “match”. We use this <code class=\"language-plaintext highlighter-rouge\">run.cmd</code>-approach in combination with the <code class=\"language-plaintext highlighter-rouge\">is_in_place</code>-option (see <a href=\"https://github.com/projectkudu/kudu/wiki/WebJobs#webjob-working-directory\">here</a>) and are happy with the results).</p>\n\n<p>A more detailed explanation can be found <a href=\"https://github.com/projectkudu/kudu/wiki/WebJobs\">here</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2022/07/22/how-to-run-a-azure-appservice-webjob-with-parameters/","RawContent":null,"Thumbnail":null},{"Title":"How to use IE proxy settings with HttpClient","PublishedOn":"2022-03-28T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Internet Explorer is - mostly - dead, but some weird settings are still around and “attached” to the old world, at least on Windows 10. \nIf your system administrator uses some advanced proxy settings (e.g. a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_PAC_file\">PAC-file</a>), those will be attached to the users IE setting.</p>\n\n<p>If you want to use this with a HttpClient you need to code something like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    string target = \"https://my-target.local\";\n    var targetUri = new Uri(target);\n    var proxyAddressForThisUri = WebRequest.GetSystemWebProxy().GetProxy(targetUri);\n    if (proxyAddressForThisUri == targetUri)\n    {\n        // no proxy needed in this case\n        _httpClient = new HttpClient();\n    }\n    else\n    {\n        // proxy needed\n        _httpClient = new HttpClient(new HttpClientHandler() { Proxy = new WebProxy(proxyAddressForThisUri) { UseDefaultCredentials = true } });\n    }\n</code></pre></div></div>\n\n<p>The <a href=\"https://docs.microsoft.com/de-de/dotnet/api/system.net.webrequest.getsystemwebproxy?view=net-6.0\">GetSystemWebProxy()</a> gives access to the system proxy settings from the current user. Then we can query, what proxy is needed for the target. If the result is the same address as the target, then no proxy is needed. Otherwise, we inject a new WebProxy for this address.</p>\n\n<p>Hope this helps!</p>\n\n<p><strong>Be aware:</strong> Creating new HttpClients is (at least in a server environment) not recommended. Try to reuse the same HttpClient instance!</p>\n\n<p>Also note: The proxy setting in Windows 11 are now built into the system settings, but the API still works :)</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2022-03-28/windows11.png\" alt=\"x\" title=\"Windows 11\" /></p>\n","Href":"https://blog.codeinside.eu/2022/03/28/how-to-use-ie-proxy-settings-with-httpclient/","RawContent":null,"Thumbnail":null},{"Title":"Redirect to HTTPS with a simple web.config rule","PublishedOn":"2022-01-05T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The scenario is easy: My website is hosted in an IIS and would like to redirect all incomming HTTP traffic to the HTTPS counterpart.</p>\n\n<p>This is your solution - a “simple” rule:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;rewrite&gt;\n            &lt;rules&gt;\n                &lt;rule name=\"Redirect to https\" stopProcessing=\"true\"&gt;\n                    &lt;match url=\".*\" /&gt;\n                    &lt;conditions logicalGrouping=\"MatchAny\"&gt;\n                        &lt;add input=\"{HTTPS}\" pattern=\"off\" /&gt;\n                    &lt;/conditions&gt;\n                    &lt;action type=\"Redirect\" url=\"https://{HTTP_HOST}{REQUEST_URI}\" redirectType=\"Found\" /&gt;\n                &lt;/rule&gt;\n            &lt;/rules&gt;\n        &lt;/rewrite&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre></div></div>\n\n<p>We used this in the past to setup a “catch all” web site in an IIS that redirects all incomming HTTP traffic.\nThe actual web applications had only the HTTPS binding in place.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2022/01/05/redirect-to-https-with-a-simple-webconfig-rule/","RawContent":null,"Thumbnail":null},{"Title":"Select random rows","PublishedOn":"2021-12-06T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Let’s say we have a SQL table and want to retrieve 10 rows randomly - how would you do that? Although I have been working with SQL for x years, I have never encountered that problem. The solution however is quite “simple” (at least if you don’t be picky how we define “randomness” and if you try this on millions of rows):</p>\n\n<h2 id=\"order-by-newid\">ORDER BY NEWID()</h2>\n\n<p>The most boring way is to use the <code class=\"language-plaintext highlighter-rouge\">ORDER BY NEWID()</code> clause:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT TOP 10 FROM Products ORDER BY NEWID()\n</code></pre></div></div>\n\n<p>This works, but if you do that on “large” datasets you might hit performance problems (e.g. more on that <a href=\"https://docs.microsoft.com/en-us/previous-versions/software-testing/cc441928(v=msdn.10)?redirectedfrom=MSDN\">here</a>)</p>\n\n<h2 id=\"tablesampe\">TABLESAMPE</h2>\n\n<p>The SQL Server implements the <code class=\"language-plaintext highlighter-rouge\">Tablesample clause</code> which was new to me. It seems to perform much bettern then the <code class=\"language-plaintext highlighter-rouge\">ORDER BY NEWID()</code> clause, but behaves a bit weird. With this clause you can specify the “sample” from a table. The size of the sample can be specified as <code class=\"language-plaintext highlighter-rouge\">PERCENT</code> or <code class=\"language-plaintext highlighter-rouge\">ROWS</code> (which are then converted to percent internally).</p>\n\n<p>Syntax:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT TOP 10 FROM Products TABLESAMPLE (25 Percent)\nSELECT TOP 10 FROM Products TABLESAMPLE (100 ROWS)\n</code></pre></div></div>\n\n<p>The weird part is that the given number might not match the number of rows of your result. You might got more or less results and if our tablesample is too small you might even got nothing in return. There are some clever ways to work around this (e.g. using the <code class=\"language-plaintext highlighter-rouge\">TOP 100</code> statement with a much larger tablesample clause to get a guaranteed result set), but it feels “strange”.\nIf you hit limitations with the first solution you might want to read more on <a href=\"https://www.mssqltips.com/sqlservertip/1308/retrieving-random-data-from-sql-server-with-tablesample/\">this blog</a> or in the <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql?view=sql-server-ver15#tablesample-clause\">Microsoft Docs</a>.</p>\n\n<h2 id=\"stackoverflow\">Stackoverflow</h2>\n\n<p>Of course there is a great <a href=\"https://stackoverflow.com/questions/848872/select-n-random-rows-from-sql-server-table\">Stackoverflow thread</a> with even wilder solutions.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2021/12/06/select-random-rows/","RawContent":null,"Thumbnail":null},{"Title":"SQL collation problems","PublishedOn":"2021-11-24T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This week I deployed a new feature and tried it on different SQL databases and was a bit suprised that on one database this error message came up:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Cannot resolve the collation conflict between \"Latin1_General_CI_AS\" and \"SQL_Latin1_General_CP1_CI_AS\" in the equal to operation.\n</code></pre></div></div>\n\n<p>This was strange, because - at least in theory - all databases have the same schema and I was sure that each database had the same collation setting.</p>\n\n<h2 id=\"collations-on-columns\">Collations on columns</h2>\n\n<p>Well… my theory was wrong and this SQL statement told me that “some” columns had a different collation.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>select sc.name, sc.collation_name from sys.columns sc\ninner join sys.tables t on sc.object_id=t.object_id\nwhere t.name='TABLENAME'\n</code></pre></div></div>\n\n<p>As it turns out, some columns had the collation <code class=\"language-plaintext highlighter-rouge\">Latin1_General_CI_AS</code> and some had <code class=\"language-plaintext highlighter-rouge\">SQL_Latin1_General_CP1_CI_AS</code>. I’m still not sure why, but I needed to do something.</p>\n\n<h2 id=\"how-to-change-the-collation\">How to change the collation</h2>\n\n<p>To change the collation you can execute something like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ALTER TABLE MyTable\nALTER COLUMN [MyColumn] NVARCHAR(200) COLLATE SQL_Latin1_General_CP1_CI_AS\n</code></pre></div></div>\n\n<p>Unfortunately there are restrictions and you can’t change the collation if the column is referenced by any one of the following:</p>\n\n<ul>\n  <li>A computed column</li>\n  <li>An index</li>\n  <li>Distribution statistics, either generated automatically or by the CREATE STATISTICS statement</li>\n  <li>A CHECK constraint</li>\n  <li>A FOREIGN KEY constraint</li>\n</ul>\n\n<p><strong>Be aware:</strong> If you are not in control of the collation or if the collation is “fine” and you want to do this operation anyway, there might be a way to specify the collation in the SQL query.</p>\n\n<p>For more information you might want to check out this Microsoft Docs “<a href=\"https://docs.microsoft.com/en-us/sql/relational-databases/collations/set-or-change-the-column-collation?view=sql-server-ver15\">Set or Change the Column Collation</a>”</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2021/11/24/sql-collations-problem/","RawContent":null,"Thumbnail":null},{"Title":"Microsoft Build 2021 session recommendations","PublishedOn":"2021-09-24T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>To be fair: <a href=\"https://www.youtube.com/playlist?list=PLlrxD0HtieHgMGEnTzEEfkADbaG8aAWRp\">Microsoft Build 2021</a> was some month ago, but the content might still be relevant today. Sooo… it took me a while, but here is a list of sessions that I found interesting. Some sessions are “better” and some “lighter”, the order doesn’t reflect that - that was just the order I watched those videos.</p>\n\n<p>The headline has a link to the video and below are some notes.</p>\n\n<h2 id=\"build-cloud-native-applications-that-run-anywhere\"><a href=\"https://mybuild.microsoft.com/sessions/2debfc2e-f0b3-4adf-bcec-d126930f806f?source=sessions\">Build cloud-native applications that run anywhere</a></h2>\n\n<ul>\n  <li>Azure Arc (GitHub &amp; Policies)</li>\n  <li>AKS</li>\n</ul>\n\n<h2 id=\"build-differentiated-saas-apps-with-the-microsoft-cloud\"><a href=\"https://mybuild.microsoft.com/sessions/3a820fb4-a38f-4bf8-b731-4411ed559807?source=sessions\">Build differentiated SaaS apps with the Microsoft Cloud</a></h2>\n\n<ul>\n  <li>Power Apps</li>\n  <li>“Light” session - only if you are interested in Microsofts “Low Code” portfolio</li>\n</ul>\n\n<h2 id=\"build-the-next-generation-of-collaborative-apps-for-hybrid-work\">[Build the next generation of collaborative apps for hybrid work</h2>\n<p>](https://mybuild.microsoft.com/sessions/2915b9b6-6b45-430a-9df7-2671318e2161?source=sessions)</p>\n\n<ul>\n  <li>Overview Dev Platform (PowerApps, Graph…)</li>\n  <li>Fluid</li>\n  <li>Adaptive Cards</li>\n  <li>Project.Reunion / WebView 2</li>\n</ul>\n\n<h2 id=\"mark-russinovich-on-azure-innovation-and-more\">[Mark Russinovich on Azure innovation and more!</h2>\n<p>](https://mybuild.microsoft.com/sessions/b7d536c1-515f-476a-83d2-85b6cf14577a?source=sessions)</p>\n\n<ul>\n  <li>Dapr</li>\n  <li>Story about RdcMan</li>\n  <li>Sysmon on linux</li>\n</ul>\n\n<h2 id=\"learn-how-to-build-exciting-apps-across-meetings-chats-and-channels-within-or-outside-microsoft-teams\">[Learn how to build exciting apps across meetings, chats, and channels within or outside Microsoft Teams](</h2>\n<p>https://mybuild.microsoft.com/sessions/512470be-15d3-4b50-b180-6532c8153931?source=sessions)</p>\n\n<ul>\n  <li>Microsoft Teams SDK</li>\n  <li>Azure Communication Services</li>\n  <li>Meeting Events, Media APIs, Share integration</li>\n  <li>Teams Connect</li>\n  <li>Adaptive Cards in Teams</li>\n  <li>Messaging Extensions in Outlook for Web</li>\n  <li>Together Mode scenes</li>\n</ul>\n\n<h2 id=\"whats-new-for-windows-desktop-application-development\"><a href=\"https://mybuild.microsoft.com/sessions/79b87707-0505-4144-aab9-94cc30f91340?source=sessions\">What’s new for Windows desktop application development</a></h2>\n\n<ul>\n  <li>Project Reunion</li>\n  <li>MAUI</li>\n</ul>\n\n<h2 id=\"understand-the-ml-process-and-embed-models-into-apps\">[Understand the ML process and embed models into apps</h2>\n<p>](https://mybuild.microsoft.com/sessions/10930f2e-ad9c-460b-b91d-844d17a5a875?source=sessions)</p>\n\n<ul>\n  <li>Azure ML</li>\n  <li>“Data scientist”: VS Code Demo with Jupyter Notebooks, PyTorch, TensorBoard</li>\n  <li>“MLOps”</li>\n  <li>Azure Machine Learning Studio</li>\n  <li>“Red/Blue”-Deployment via GitHub Actions</li>\n</ul>\n\n<h2 id=\"the-future-of-modern-application-development-with-net\">[The future of modern application development with .NET</h2>\n<p>](https://mybuild.microsoft.com/sessions/76ebac39-517d-44da-a58e-df4193b5efa9?source=sessions)</p>\n\n<ul>\n  <li>“.NET Core Momentum”</li>\n  <li>.NET Upgrade Assistant</li>\n  <li>Minimal web apis</li>\n  <li>MAUI</li>\n  <li>Blazor in Web &amp; Desktop</li>\n  <li>Hot Reload</li>\n</ul>\n\n<h2 id=\"scott-guthrie-unplugged--home-edition-extended\"><a href=\"https://mybuild.microsoft.com/sessions/71450b02-3006-4971-b4d1-80602087e10b?source=sessions\">Scott Guthrie ‘Unplugged’ – Home Edition (Extended)</a></h2>\n\n<ul>\n  <li>ScottGu</li>\n  <li>DevTools</li>\n  <li>GitHub Actions</li>\n  <li>Codespaces</li>\n  <li>Cosmos DB: Serverless, Cache, Encryption, Free tier enhancements</li>\n  <li>Azure AI</li>\n</ul>\n\n<h2 id=\"build-your-first-web-app-with-blazor--web-assembly\"><a href=\"https://mybuild.microsoft.com/sessions/d8cac5a4-6fee-4e30-aa0b-58131f2e03bc?source=sessions\">Build your first web app with Blazor &amp; Web Assembly</a></h2>\n\n<ul>\n  <li>Learning video</li>\n</ul>\n\n<h2 id=\"develop-apps-with-the-microsoft-graph-toolkit\"><a href=\"https://mybuild.microsoft.com/sessions/27dbe743-5469-453c-b165-7c7c9250a937?source=sessions\">Develop apps with the Microsoft Graph Toolkit</a></h2>\n\n<ul>\n  <li>“Low code” Learning video about the toolkit</li>\n</ul>\n\n<h2 id=\"application-authentication-in-the-microsoft-identity-platform\"><a href=\"https://mybuild.microsoft.com/sessions/9eadeef5-96a2-4fd2-ac9a-2a83deed93df?source=sessions\">Application Authentication in the Microsoft Identity platform</a></h2>\n\n<ul>\n  <li>MSAL 2.0 &amp; Microsoft Identity Platform</li>\n  <li>SPA App with JS</li>\n  <li>WebApps stuff with ASP.NET Core</li>\n  <li>Service apps</li>\n</ul>\n\n<h2 id=\"double-click-with-microsoft-engineering-leaders\">[Double-click with Microsoft engineering leaders</h2>\n<p>](https://mybuild.microsoft.com/sessions/08538f9b-e562-4d71-8b42-d240c3966ef0?source=sessions)</p>\n\n<ul>\n  <li>“Whiteboarding-style”</li>\n  <li>GitOps Concepts</li>\n  <li>Velocity - Inner/Outer Loop</li>\n  <li>Data Analytics with Cosmos DB</li>\n  <li>Azure Cloud “overview”</li>\n</ul>\n\n<h2 id=\"net-6-deep-dive-whats-new-and-whats-coming\">[.NET 6 deep dive; what’s new and what’s coming</h2>\n<p>](https://mybuild.microsoft.com/sessions/70d379f4-1173-4941-b389-8796152ec7b8?source=sessions)</p>\n\n<ul>\n  <li>.NET Momentum</li>\n  <li>.NET 5 - why</li>\n  <li>.NET 6 main features</li>\n  <li>EF Core</li>\n  <li>C# 10</li>\n  <li>Minimal WebApis</li>\n  <li>MAUI</li>\n  <li>Blazor</li>\n  <li>ASP.NET Core</li>\n  <li>Edit and Continue</li>\n</ul>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2021/09/24/build-2021-recommendation/","RawContent":null,"Thumbnail":null},{"Title":"Today I learned (sort of) 'fltmc' to inspect the IO request pipeline of Windows","PublishedOn":"2021-05-30T22:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The headline is obviously a big lie, because I followed <a href=\"https://twitter.com/richturn_ms/status/1245836872598704128\">this twitter conversation</a> last year, but it’s still interesting to me and I wanted to write it somewhere down.</p>\n\n<p>Starting point was that <a href=\"https://twitter.com/BruceDawson0xB\">Bruce Dawson (Google programmer)</a> noticed, that building Chrome on Windows is slow for various reasons:</p>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Based on some twitter discussion about source-file length and build times two months ago I wrote a blog post. It&#39;s got real data based on Chromium&#39;s build, and includes animations of build-time improvements:<a href=\"https://t.co/lsLH8BNe48\">https://t.co/lsLH8BNe48</a></p>&mdash; Bruce Dawson (Antifa) (@BruceDawson0xB) <a href=\"https://twitter.com/BruceDawson0xB/status/1244850501457285122?ref_src=twsrc%5Etfw\">March 31, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p><a href=\"https://twitter.com/TrententTye\">Trentent Tye</a> told him to disable the “filter driver”:</p>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">disabling the filter driver makes it dead dead dead. Might be worth testing with the number and sizes of files you are dealing with. Even half a millisecond of processing time adds up when it runs against millions and millions of files.</p>&mdash; Trentent Tye (@TrententTye) <a href=\"https://twitter.com/TrententTye/status/1245395826907602945?ref_src=twsrc%5Etfw\">April 1, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>If you have never heard of a “filter driver” (like me :)), you might want to take a look <a href=\"https://docs.microsoft.com/en-us/windows-hardware/test/assessments/minifilter-diagnostics\">here</a>.</p>\n\n<p>To see the loaded filter driver on your machine try out this: Run <code class=\"language-plaintext highlighter-rouge\">fltmc</code> (<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/development-and-testing-tools\">fltmc.exe</a>) as admin.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2021-05-30/fltmc.png\" alt=\"x\" title=\"fltmc result\" /></p>\n\n<p>Description:</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">Each filter in the list sit in a pipe through which all IO requests bubble down and up. They see all IO requests, but ignore most. Ever wondered how Windows offers encrypted files, OneDrive/GDrive/DB file sync, storage quotas, system file protection, and, yes, anti-malware? ;)</p>&mdash; Rich Turner (@richturn_ms) <a href=\"https://twitter.com/richturn_ms/status/1245836872598704128?ref_src=twsrc%5Etfw\">April 2, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>This makes more or less sense to me. I’m not really sure what to do with that information, but it’s cool (nerd cool, but anyway :)).</p>\n","Href":"https://blog.codeinside.eu/2021/05/30/fltmc-inspect-the-io-request-pipeline-of-windows/","RawContent":null,"Thumbnail":null},{"Title":"How to self host Google Fonts","PublishedOn":"2021-04-28T23:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><a href=\"https://fonts.google.com/\">Google Fonts</a> are really nice and widely used. Typically Google Fonts consistes of the actual font file (e.g. woff, ttf, eot etc.) and some CSS, which points to those font files.</p>\n\n<p>In one of our applications, we used a HTML/CSS/JS - Bootstrap like theme and the theme linked some Google Fonts. The problem was, that we wanted to <strong>self host everything</strong>.</p>\n\n<p>After some research we discovered this tool: <strong><a href=\"https://google-webfonts-helper.herokuapp.com/\">Google-Web-Fonts-Helper</a></strong></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2021-04-28/image.png\" alt=\"x\" title=\"Google Web Fonts Helper\" /></p>\n\n<p>Pick your font, select your preferred CSS option (e.g. if you need to support older browsers etc.) and download a complete .zip package. Extract those files and add them to your web project like any other static asset. (<em>And check the font license!</em>)</p>\n\n<p>The project site is on <a href=\"https://github.com/majodev/google-webfonts-helper\">GitHub</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2021/04/28/how-to-self-host-google-fonts/","RawContent":null,"Thumbnail":null},{"Title":"Microsoft Graph: Read user profile and group memberships","PublishedOn":"2021-01-31T23:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>In our application we have a background service, that “syncs” user data and group membership information to our database from the <a href=\"https://docs.microsoft.com/en-us/graph\">Microsoft Graph</a>.</p>\n\n<p><strong>The permission model:</strong></p>\n\n<p>Programming against the Microsoft Graph is quite easy. There are many <a href=\"https://docs.microsoft.com/en-us/graph/sdks/sdks-overview\">SDKS</a> available, but understanding the <a href=\"https://docs.microsoft.com/en-us/graph/permissions-reference\">permission model</a> is hard.</p>\n\n<p><strong>‘Directory.Read.All’ and ‘User.Read.All’:</strong></p>\n\n<p>Initially we only synced the “basic” user data to our database, but then some customers wanted to reuse some other data already stored in the graph. Our app required the ‘Directory.Read.All’ permission, because we thought that this would be the “highest” permission - this is <strong>wrong</strong>!</p>\n\n<p>If you need “directory” information, e.g. memberships, the <code class=\"language-plaintext highlighter-rouge\">Directory.Read.All</code> or <code class=\"language-plaintext highlighter-rouge\">Group.Read.All</code> is a good starting point. But if you want to load specific user data, you might need to have the <code class=\"language-plaintext highlighter-rouge\">User.Read.All</code> permission as well.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2021/01/31/microsoft-graph-read-user-profile-and-group-memberships/","RawContent":null,"Thumbnail":null},{"Title":"How to get all distribution lists of a user with a single LDAP query","PublishedOn":"2020-12-31T00:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>In 2007 I wrote a blogpost how easy it is to get all “groups” of a given user via the <a href=\"https://blog.codeinside.eu/2017/03/02/howto-get-user-information-and-groups-from-ad/\">tokenGroup attribute</a>.</p>\n\n<p>Last month I had the task to check why “distribution list memberships” are not part of the result.</p>\n\n<p><strong>The reason is simple:</strong></p>\n\n<p>A pure distribution list (<strong>not security enabled</strong>) is not a security group and only security groups are part of the “tokenGroup” attribute.</p>\n\n<p>After some thoughts and discussions we agreed, that it would be good if we could enhance our function and treat distribution lists like security groups.</p>\n\n<h1 id=\"how-to-get-all-distribution-lists-of-a-user\">How to get all distribution lists of a user?</h1>\n\n<p>The get all groups of a given user might be seen as trivial, but the problem is, that groups can contain other groups. \nAs always, there are a couple of ways to get a “full flat” list of all group memberships.</p>\n\n<p>A <em>stupid</em> way would be to load all groups in a recrusive function - this might work, but will result in a flood of requests.</p>\n\n<p>A <em>clever</em> way would be to write a good LDAP query and let the Active Directory do the heavy lifting for us, right?</p>\n\n<h1 id=\"12840113556141941\">1.2.840.113556.1.4.1941</h1>\n\n<p>I found some sample code online with a very strange LDAP query and it turns out:\nThere is a “magic” ldap query called “<a href=\"https://ldapwiki.com/wiki/LDAP_MATCHING_RULE_IN_CHAIN\">LDAP_MATCHING_RULE_IN_CHAIN</a>” and it does everything we are looking for:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>var getGroupsFilterForDn = $\"(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:= {distinguishedName}))\";\n                using (var dirSearch = CreateDirectorySearcher(getGroupsFilterForDn))\n                {\n                    using (var results = dirSearch.FindAll())\n                    {\n                        foreach (SearchResult result in results)\n                        {\n                            if (result.Properties.Contains(\"name\") &amp;&amp; result.Properties.Contains(\"objectSid\") &amp;&amp; result.Properties.Contains(\"groupType\"))\n                                groups.Add(new GroupResult() { Name = (string)result.Properties[\"name\"][0], GroupType = (int)result.Properties[\"groupType\"][0], ObjectSid = new SecurityIdentifier((byte[])result.Properties[\"objectSid\"][0], 0).ToString() });\n                        }\n                    }\n                }\n</code></pre></div></div>\n\n<p>With a given distinguishedName of the target user, we can load all distribution and security groups (see below…) transitive!</p>\n\n<h1 id=\"combine-tokengroups-and-this\">Combine tokenGroups and this</h1>\n\n<p>During our testing we found some minor differences between the LDAP_MATCHING_RULE_IN_CHAIN and the tokenGroups approach. Some “system-level” security groups were missing with the LDAP_MATCHING_RULE_IN_CHAIN way. In our production code we use a combination of those two approaches and it seems to work.</p>\n\n<p>A full demo code how to get all distribution lists for a user can be found on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2020/Distributionlists\">GitHub</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/12/31/how-get-all-distribution-lists-of-a-user-with-a-single-ldap-query/","RawContent":null,"Thumbnail":null},{"Title":"Update AzureDevOps Server 2019 to AzureDevOps Server 2019 Update 1","PublishedOn":"2020-11-30T18:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><em>We did this update in May 2020, but I forgot to publish the blogpost… so here we are</em></p>\n\n<p>Last year we updated to <a href=\"https://blog.codeinside.eu/2019/04/30/update-onprem-tfs-2018-to-azuredevops-server-2019/\">Azure DevOps Server 2019</a> and it went more or less smooth.</p>\n\n<p>In May we decided to update to the “newest” release at that time: <a href=\"https://docs.microsoft.com/en-us/azure/devops/server/release-notes/azuredevops2019u1?view=azure-devops\">Azure DevOps Server 2019 Update 1.1</a></p>\n\n<h1 id=\"setup\">Setup</h1>\n\n<p>Our AzureDevOps Server was running on a “new” Windows Server 2019 and everything was still kind of newish - so we just needed to update the AzureDevOps Server app.</p>\n\n<h1 id=\"update-process\">Update process</h1>\n\n<p>The actual update was really easy, but we had some issues after the installation.</p>\n\n<h2 id=\"steps\">Steps:</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps.png\" alt=\"x\" title=\"Step 1\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps1.png\" alt=\"x\" title=\"Step 2\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps2.png\" alt=\"x\" title=\"Step 3\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps3.png\" alt=\"x\" title=\"Step 4\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps4.png\" alt=\"x\" title=\"Step 5\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-11-30/AzureDevOps5.png\" alt=\"x\" title=\"Final\" /></p>\n\n<h2 id=\"aftermath\">Aftermath</h2>\n\n<p>We had some issues with our Build Agents - they couldn’t connect to the AzureDevOps Server:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>TF400813: Resource not available for anonymous access\n</code></pre></div></div>\n\n<p>As a first “workaround” (and a nice enhancement) we switched from <strong>HTTP</strong> to <strong>HTTPS</strong> internally, but this didn’t solved the problem.</p>\n\n<p>The real reason was, that our “Azure DevOps Service User” didn’t had the required write permissions for this folder:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>C:\\ProgramData\\Microsoft\\Crypto\\RSA\\MachineKeys\n</code></pre></div></div>\n\n<p>The connection issue went away, but now we introduced another problem: Our SSL Certificate was “self signed” (from our Domain Controller), so we need to register the agents like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\\config.cmd --gituseschannel --url https://.../tfs/ --auth Integrated --pool Default-VS2019 --replace --work _work\n</code></pre></div></div>\n\n<p>The important parameter is <strong>-gituseschannel</strong>, which is needed when dealing with “self signed, but Domain ‘trusted’“-certificates.</p>\n\n<p>With this setting everything seemed to work as expected.</p>\n\n<p>Only node.js projects or toolings were “problematic”, because node.js itself don’t use the Windows Certificate Store.</p>\n\n<p>To resolve this, the <strong>root certificate</strong> from our Domain controller must be stored on the agent.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  [Environment]::SetEnvironmentVariable(\"NODE_EXTRA_CA_CERTS\", \"C:\\SSLCert\\root-CA.pem\", \"Machine\") \n</code></pre></div></div>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>The update itself was easy, but it took us some hours to configure our Build Agents. After the initial hiccup it went smooth from there - no issues and we are ready for the next update, which is already <a href=\"https://docs.microsoft.com/en-us/azure/devops/server/release-notes/azuredevops2020?view=azure-devops\">released</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/11/30/update-onprem-azuredevops-server-2019-to-azuredevops-server-2019-update1/","RawContent":null,"Thumbnail":null},{"Title":"DllRegisterServer 0x80020009 Error","PublishedOn":"2020-10-31T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Last week I had a very strange issue and the solution was really “easy”, but took me a while.</p>\n\n<h1 id=\"scenario\">Scenario</h1>\n\n<p>For our products we build Office COM Addins with a C++ based “Shim” that boots up our .NET code (e.g. something <a href=\"https://github.com/NetOfficeFw/ShimmingExample\">like this</a>.\nAs the nature of COM: It requires some pretty dumb registry entries to work and in theory our toolchain should “build” and automatically “register” the output.</p>\n\n<h1 id=\"problem\">Problem</h1>\n\n<p>The registration process just failed with a error message like that:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The module xxx.dll was loaded but the call to DllRegisterServer failed with error code 0x80020009\n</code></pre></div></div>\n\n<p>After some research you will find some very old stuff or only some general advises like in this <a href=\"https://stackoverflow.com/questions/2727563/registering-a-dll-returns-0x80020009-error\">Stackoverflow.com question</a>, e.g. “run it as administrator”.</p>\n\n<h1 id=\"the-solution\">The solution</h1>\n\n<p>Luckily we had another project were we use the same approach and this worked without any issues. After comparing the files I notices some subtile differences: The <strong>file encoding</strong> was different!</p>\n\n<p>In my failing project some C++ files were encoded with <strong>UTF8-BOM</strong>. I changed everything to <strong>UTF8</strong> and after this change it worked.</p>\n\n<p>My reaction:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(╯°□°）╯︵ ┻━┻\n</code></pre></div></div>\n\n<p>I’m not a C++ dev and I’m not even sure why some files had the wrong encoding in the first place. It “worked” - at least Visual Studio 2019 was able to build the stuff, but register it with “regsrv32” just failed.</p>\n\n<p>I needed some hours to figure that out.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/10/31/dllregisterserver-0x80020009-error/","RawContent":null,"Thumbnail":null},{"Title":"How to share an Azure subscription in a team","PublishedOn":"2020-09-29T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>We at <strong><a href=\"https://sevitec.ch/en/\">Sevitec</a></strong> are moving more and more workloads for us or our customers to Azure.</p>\n\n<p>So the basic question needs an answer:</p>\n\n<p>How can a team share an Azure subscription?</p>\n\n<p><em>Be aware: This approach works for us. There might be better options. If we do something stupid, just tell me in the comments or via email - help is appreciated.</em></p>\n\n<h1 id=\"step-1-create-a-directory\">Step 1: Create a directory</h1>\n\n<p>We have a “company directory” with a fully configured Azure Active Directory (incl. User sync between our OnPrem system, Office 365 licenses etc.).</p>\n\n<p>Our rule of thumb is: We create for each product team a individual directory and all team members are invited in the new directory.</p>\n\n<p>Keep in mind: A directory itself costs you nothing but might help you to keep things manageable.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-09-29/step1.png\" alt=\"Create a new tenant directory\" title=\"Create a new tenant directory\" /></p>\n\n<h1 id=\"step-2-create-a-group\">Step 2: Create a group</h1>\n\n<p>This step might be optional, but all team members - except the “Administrator” - have the same rights and permissions in our company. To keep things simple, we created a group with all team members.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-09-29/step2.png\" alt=\"Put all invited users in a group\" title=\"Put all invited users in a group\" /></p>\n\n<h1 id=\"step-3-create-a-subscription\">Step 3: Create a subscription</h1>\n\n<p>Now create a subscription. The typical “Pay-as-you-go” offer will work. Be aware that the user who creates the subscription is initially setup as the <strong>Administrator</strong>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-09-29/step3.png\" alt=\"Create a subscription\" title=\"Create a subscription\" /></p>\n\n<h1 id=\"step-4-share-the-subscription\">Step 4: “Share” the subscription</h1>\n\n<p>This is the most important step:</p>\n\n<p>You need to grant the individual  users or the group (from step 2) the <strong>“Contributor”</strong> role for this subscription via the “Access control (IAM)”.\nThe hard part is to understand how those “Role assignment” affect the subscription. I’m not even sure if the “Contributor” is the best fit, but it works for us.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-09-29/step4.png\" alt=\"Pick the correct role assignment\" title=\"Pick the correct role assignment\" /></p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<p>I’m not really sure why such a basic concept is labeled so poorly but you really need to pick the correct role assignment and the other person should be able to use the subscription.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/09/29/how-to-share-an-azure-subscription-in-a-team/","RawContent":null,"Thumbnail":null},{"Title":"How to run a legacy WCF .svc Service on Azure AppService","PublishedOn":"2020-08-31T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Last month we wanted to run good old WCF powered service on Azures <a href=\"https://azure.microsoft.com/en-us/services/app-service/web/\">“App Service”</a>.</p>\n\n<h1 id=\"wcf-whats-that\">WCF… what’s that?</h1>\n\n<p>If you are not familiar with WCF: Good! For the interested ones: <a href=\"https://en.wikipedia.org/wiki/Windows_Communication_Foundation\">WCF</a> is or was a framework to build mostly SOAP based services in the .NET Framework 3.0 timeframe. Some parts where “good”, but most developers would call it a complex monster.</p>\n\n<p>Even in the glory days of WCF I tried to avoid it at all cost, but unfortunately I need to maintain a WCF based service.</p>\n\n<p>For the curious: The project template and the tech is still there. Search for “WCF”.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-08-31/template.png\" alt=\"VS WCF Template\" title=\"VS WCF Template\" /></p>\n\n<p>The template will produce something like that:</p>\n\n<p>The actual “service endpoint” is the <code class=\"language-plaintext highlighter-rouge\">Service1.svc</code> file.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-08-31/structure.png\" alt=\"WCF structure\" title=\"WCF structure\" /></p>\n\n<h1 id=\"running-on-azure-the-problem\">Running on Azure: The problem</h1>\n\n<p>Let’s assume we have a application with a .svc endpoint. In theory we can deploy this application to a standard Windows Server/IIS without major problems.</p>\n\n<p>Now we try to deploy this very same application to Azure AppService and this is the result after we invoke the service from the browser:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\"The resource you are looking for has been removed, had its name changed, or is temporarily unavailable.\" (HTTP Response was 404)\n</code></pre></div></div>\n\n<p>Strange… very strange. In theory a blank HTTP 400 should appear, but not a HTTP 404. The service itself was not “triggered”, because we had some logging in place, but the request didn’t get to the actual service.</p>\n\n<p>After hours of debugging, testing and googling around I created a new “blank” WCF service from the Visual Studio template got the same error.</p>\n\n<p>The good news: It’s was not just my code something is blocking the request.</p>\n\n<p>After some hours I found a helpful switch in the Azure Portal and activated the “Failed Request tracing” feature (yeah… I could found it sooner) and I discovered this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2020-08-31/fail.png\" alt=\"Failed Request tracing image\" title=\"Failed Request tracing\" /></p>\n\n<h1 id=\"running-on-azure-the-solution\">Running on Azure: The solution</h1>\n\n<p>My initial thoughts were correct: The request was blocked. It was treated as “static content” and the actual WCF module was not mapped to the .svc extension.</p>\n\n<p>To “re-map” the <code class=\"language-plaintext highlighter-rouge\">.svc</code> extension to the correct handler I needed to add this to the <code class=\"language-plaintext highlighter-rouge\">web.config</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n<span class=\"nt\">&lt;system.webServer&gt;</span>\n    ...\n\t<span class=\"nt\">&lt;handlers&gt;</span>\n\t\t<span class=\"nt\">&lt;remove</span> <span class=\"na\">name=</span><span class=\"s\">\"svc-integrated\"</span> <span class=\"nt\">/&gt;</span>\n\t\t<span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"svc-integrated\"</span> <span class=\"na\">path=</span><span class=\"s\">\"*.svc\"</span> <span class=\"na\">verb=</span><span class=\"s\">\"*\"</span> <span class=\"na\">type=</span><span class=\"s\">\"System.ServiceModel.Activation.HttpHandler\"</span> <span class=\"na\">resourceType=</span><span class=\"s\">\"File\"</span> <span class=\"na\">preCondition=</span><span class=\"s\">\"integratedMode\"</span> <span class=\"nt\">/&gt;</span>\n\t<span class=\"nt\">&lt;/handlers&gt;</span>\n<span class=\"nt\">&lt;/system.webServer&gt;</span>\n...\n\n</code></pre></div></div>\n\n<p>With this configuration everything worked as expected on Azure AppService.</p>\n\n<p><strong>Be aware:</strong></p>\n\n<p>I’m really not 100% sure why this is needed in the first place. I’m also not 100% sure if the name <code class=\"language-plaintext highlighter-rouge\">svc-integrated</code> is correct or important.</p>\n\n<p>This blogpost is a result of these <a href=\"https://twitter.com/robert0muehsig/status/1297915212541186056?s=20\">tweets</a>.</p>\n\n<p>That was a tough ride… Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/08/31/how-to-run-a-legacy-wcf-svc-service-on-azure-app-service/","RawContent":null,"Thumbnail":null},{"Title":"EWS, Exchange Online and OAuth with a Service Account","PublishedOn":"2020-07-31T23:45:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This week we had a fun experiment: We wanted to talk to Exchange Online via the “old school” EWS API, but in a “sane” way.</p>\n\n<p>But here is the full story:</p>\n\n<h1 id=\"our-goal\">Our goal</h1>\n\n<p>We wanted to access contact information via a web service from the organization, just like the traditional “Global Address List” in Exchange/Outlook. We knew that EWS was on option for the OnPrem Exchange, but what about Exchange Online?</p>\n\n<p>The big problem: Authentication is tricky. We wanted to use a “traditional” Service Account approach (think of username/password). Unfortunately the “basic auth” way will be blocked <a href=\"https://techcommunity.microsoft.com/t5/exchange-team-blog/basic-authentication-and-exchange-online-april-2020-update/ba-p/1275508\">in the near future</a> because of security concerns (makes sense TBH). There is an alternative approach available, but at first it seems not to work as we would like.</p>\n\n<p>So… what now?</p>\n\n<h1 id=\"ews-is-old-why\">EWS is… old. Why?</h1>\n\n<p>The <a href=\"https://docs.microsoft.com/en-us/exchange/client-developer/exchange-web-services/start-using-web-services-in-exchange\">Exchange Web Services</a> are old, but still quite powerful and still supported for Exchange Online and OnPrem Exchanges. On the other hand we could use the Microsoft Graph, but - at least currently - there is not a single “contact” API available.</p>\n\n<p>To mimic the GAL we would need to query <a href=\"https://docs.microsoft.com/en-us/graph/api/user-list\">List Users</a> and <a href=\"https://docs.microsoft.com/en-us/graph/api/orgcontact-list?view=graph-rest-1.0&amp;tabs=http\">List orgContacts</a>, which would be ok, but the “orgContacts” has a “flaw”. \n“Hidden” contacts (“msexchhidefromaddresslists”) are returned from this API and we thought that this might be a NoGo for our customers.</p>\n\n<p>Another argument for using EWS was, that we could support OnPrem and Online with one code base.</p>\n\n<h1 id=\"docs-from-microsoft\">Docs from Microsoft</h1>\n\n<p>The good news is, that EWS and the Auth problem is more or less good <a href=\"https://docs.microsoft.com/en-us/exchange/client-developer/exchange-web-services/how-to-authenticate-an-ews-application-by-using-oauth\">documented here</a>.</p>\n\n<p>There are two ways to authenticate against the Microsoft Graph or any Microsoft 365 API: Via “delegation” or via “application”.</p>\n\n<p><strong>Delegation:</strong></p>\n\n<p>Delegation means, that we can write a desktop app and all actions are executed in the name of the signed in user.</p>\n\n<p><strong>Application:</strong></p>\n\n<p>Application means, that the app itself can do some actions without any user involved.</p>\n\n<h1 id=\"ews-and-the-application-way\">EWS and the application way</h1>\n\n<p>At first we thought that we might need to use the “application” way.</p>\n\n<p>The good news is, that this was easy and worked. \nThe bad news is, that the application needs the EWS permission “full_access_as_app”, which means that our application can access <strong>all</strong> mailboxes from this tenant. This might be ok for certain apps, but this scared us.</p>\n\n<p>Back to the delegation way:</p>\n\n<h1 id=\"ews-and-the-delegation-way\">EWS and the delegation way</h1>\n\n<p>The documentation from Microsoft is good, but our “Service Account” usecase was not mentioned. In the example from Microsoft a user needs to manually login.</p>\n\n<h1 id=\"solution--tldr\">Solution / TL;DR</h1>\n\n<p>After some research I found the solution to use a “username/password” OAuth flow to access a single mailbox via EWS:</p>\n\n<ol>\n  <li>\n    <p>Follow the normal <a href=\"https://docs.microsoft.com/en-us/exchange/client-developer/exchange-web-services/how-to-authenticate-an-ews-application-by-using-oauth\">“delegate” steps from the Microsoft Docs</a></p>\n  </li>\n  <li>\n    <p>Instead of this code, which will trigger the login UI:</p>\n  </li>\n</ol>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n// The permission scope required for EWS access\nvar ewsScopes = new string[] { \"https://outlook.office.com/EWS.AccessAsUser.All\" };\n\n// Make the interactive token request\nvar authResult = await pca.AcquireTokenInteractive(ewsScopes).ExecuteAsync();\n...\n</code></pre></div></div>\n\n<p>Use the “AcquireTokenByUsernamePassword” method:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\nvar cred = new NetworkCredential(\"UserName\", \"Password\");\nvar authResult = await pca.AcquireTokenByUsernamePassword(new string[] { \"https://outlook.office.com/EWS.AccessAsUser.All\" }, cred.UserName, cred.SecurePassword).ExecuteAsync();\n...\n</code></pre></div></div>\n\n<p>To make this work you need to enable the “Treat application as public client” under “Authentication” &gt; “Advanced settings” in our AAD Application because this uses the <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth-ropc\">“Resource owner password credential flow”</a>.</p>\n\n<p>Now you should be able to get the AccessToken and do some EWS magic.</p>\n\n<p><em>I posted a shorter version on <a href=\"https://stackoverflow.com/questions/57009837/how-to-get-oauth2-access-token-for-ews-managed-api-in-service-daemon-application/63175301#63175301\">Stackoverflow.com</a></em></p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/07/31/ews-exchange-online-oauth-with-a-service-account/","RawContent":null,"Thumbnail":null},{"Title":"Can a .NET Core 3.0 compiled app run with a .NET Core 3.1 runtime?","PublishedOn":"2020-06-30T23:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Within <a href=\"https://oneoffixx.com\">our product</a> we move more and more stuff in the .NET Core land.\nLast week we had a disussion around needed software requirements and in the <strong>.NET Framework</strong> land this question was always easy to answer:</p>\n\n<blockquote>\n  <p>.NET Framework 4.5 or higher.</p>\n</blockquote>\n\n<p>With <strong>.NET Core</strong> the answer is sligthly different:</p>\n\n<p>In <em>theory</em> major versions are compatible, e.g. if you compiled your app with .NET Core 3.0 and a .NET Core runtime 3.1 is the only installed 3.X runtime on the machine, this runtime is used.</p>\n\n<p>This system is called <a href=\"https://docs.microsoft.com/en-us/dotnet/core/versions/selection#framework-dependent-apps-roll-forward\">“Framework-dependent apps roll forward”</a> and sounds good.</p>\n\n<h1 id=\"the-bad-part\">The bad part</h1>\n\n<p>Unfortunately this didn’t work for us. Not sure why, but our app refuses to work because a .dll is not found or missing. The reason is currently not clear. Be aware that Microsoft has written a hint that such things might occure:</p>\n\n<blockquote>\n  <p>It’s possible that 3.0.5 and 3.1.0 behave differently, particularly for scenarios like serializing binary data.</p>\n</blockquote>\n\n<h1 id=\"the-good-part\">The good part</h1>\n\n<p>With .NET Core we could ship the framework with our app and it should run fine wherever we deploy it.</p>\n\n<h1 id=\"summery\">Summery</h1>\n\n<p>Read the docs about the “app roll forward” approach if you have similar concerns, but test your app with that combination.</p>\n\n<p>As a sidenote: 3.0 is not supported anymore, so it would be good to upgrade it to 3.1 anyway, but we might see a similar pattern with the next .NET Core versions.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/06/30/can-a-dotnet-core-30-compiled-app-run-with-a-dotnet-core-31-runtime/","RawContent":null,"Thumbnail":null},{"Title":"SqlBulkCopy for fast bulk inserts","PublishedOn":"2020-05-31T23:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Within our product <a href=\"https://oneoffixx.com/\">OneOffixx</a> we can create a “full export” from the product database. Because of limitations with normal MS SQL backups (e.g. compatibility with older SQL databases etc.), we created our own export mechanic.\nAn export can be up to 1GB and more. This is nothing to serious and far from “big data”, but still not easy to handle and we had some issues to import larger “exports”. \nOur importer was based on a Entity Framework 6 implementation and it was really slow… last month we tried to resolve this and we are quite happy. Here is how we did it:</p>\n\n<p><strong>TL;DR Problem:</strong></p>\n\n<p>Bulk Insert with a Entity Framework based implementation is really slow. There is at least one NuGet package, which seems to help, but unfortunately we run into some obscure issues. This <a href=\"https://stackoverflow.com/questions/5940225/fastest-way-of-inserting-in-entity-framework\">Stackoverflow question highlights</a> some numbers and ways of doing it.</p>\n\n<p><strong>SqlBulkCopy to the rescure:</strong></p>\n\n<p>After my failed attempt to tame our EF implementation I discovered the <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server\">SqlBulkCopy</a> operation. In .NET (Full Framework and .NET Standard!) the usage is simple via the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlbulkcopy?view=dotnet-plat-ext-3.1\">“SqlBulkCopy” class</a>.</p>\n\n<p>Our importer looks more or less like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>using (var scope = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(30), TransactionScopeAsyncFlowOption.Enabled))\nusing (SqlBulkCopy bulkCopy = new SqlBulkCopy(databaseConnectionString))\n    {\n    var dt = new DataTable();\n    dt.Columns.Add(\"DataColumnA\");\n    dt.Columns.Add(\"DataColumnB\");\n    dt.Columns.Add(\"DataColumnId\", typeof(Guid));\n\n    foreach (var dataEntry in data)\n    {\n        dt.Rows.Add(dataEntry.A, dataEntry.B, dataEntry.Id);\n    }\n\n    sqlBulk.DestinationTableName = \"Data\";\n    sqlBulk.AutoMapColumns(dt);\n    sqlBulk.WriteToServer(dt);\n\n    scope.Complete();\n    }\n\npublic static class Extensions\n    {\n        public static void AutoMapColumns(this SqlBulkCopy sbc, DataTable dt)\n        {\n            sbc.ColumnMappings.Clear();\n\n            foreach (DataColumn column in dt.Columns)\n            {\n                sbc.ColumnMappings.Add(column.ColumnName, column.ColumnName);\n            }\n        }\n    }       \n</code></pre></div></div>\n\n<p>Some notes:</p>\n\n<ul>\n  <li>The TransactionScope is not required, but still nice.</li>\n  <li>The SqlBulkCopy instance just needs the databaseConnectionString.</li>\n  <li>A Datatable is needed and (I’m not sure why) all non crazy SQL datatypes are magically supported, but GUIDs needs to be typed explicitly.</li>\n  <li>Insert thousands of data in your dataTable, point the SqlBulkCopy to your destination table, map those columns and write the to the server.</li>\n  <li>You can use the <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/multiple-bulk-copy-operations\">same instance for multiple bulk</a> operations.</li>\n  <li>There is also an Async implementation available.</li>\n</ul>\n\n<p>Only “downside”: SqlBulkCopy is a table by table insert. You need to insert your data in the correct order if you have any db constraints in your schema.</p>\n\n<p><strong>Result:</strong></p>\n\n<p>We reduced the import from several minutes to seconds :)</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/05/31/sqlbulkcopy-for-fast-bulk-inserts/","RawContent":null,"Thumbnail":null},{"Title":"Blazor for Office Add-ins: First look","PublishedOn":"2020-04-30T21:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Last week I did some research and tried to build a pretty basic Office Addin (within the “new” <a href=\"https://docs.microsoft.com/en-us/office/dev/add-ins/overview/office-add-ins\">web based Addin model</a>) with <strong><a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\">Blazor</a></strong>.</p>\n\n<p>Side note: Last year I blogged about how to build <a href=\"https://blog.codeinside.eu/2019/01/31/office-addins-with-aspnet-core/\">Office Add-ins with ASP.NET Core</a>.</p>\n\n<h1 id=\"why-blazor\">Why Blazor?</h1>\n\n<p>My daily work home is in the C# and .NET land, so it would be great to use Blazor for Office Addins, right? \nA Office Add-in is just a web application with a “communication tunnel” to the hosting Office application - not very different from the real web.</p>\n\n<h1 id=\"what-might-work-serverside-blazor\">What (might) work: Serverside Blazor</h1>\n\n<p>My first try was with a “standard” serverside Blazor application and I just pointed the dummy Office Add-in manifest file to the site and it (obviously) worked:</p>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"et\" dir=\"ltr\">Mhh... maybe?🤔😏<a href=\"https://twitter.com/hashtag/Blazor?src=hash&amp;ref_src=twsrc%5Etfw\">#Blazor</a> <a href=\"https://twitter.com/hashtag/OfficeDev?src=hash&amp;ref_src=twsrc%5Etfw\">#OfficeDev</a> <a href=\"https://t.co/BzdVQzIeqA\">pic.twitter.com/BzdVQzIeqA</a></p>&mdash; Robert Muehsig (@robert0muehsig) <a href=\"https://twitter.com/robert0muehsig/status/1253351161236787202?ref_src=twsrc%5Etfw\">April 23, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>I assume that serverside Blazor is for the client not very “complicated” and it would probably work.</p>\n\n<p>After my initial tweet <strong><a href=\"https://twitter.com/manuelsidler\">Manuel Sidler</a></strong> jumped in and made a simple demo project, which also invokes the <strong>Office.js</strong> APIs from C#!</p>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Building an <a href=\"https://twitter.com/hashtag/Office?src=hash&amp;ref_src=twsrc%5Etfw\">#Office</a> Add-In based on <a href=\"https://twitter.com/hashtag/Blazor?src=hash&amp;ref_src=twsrc%5Etfw\">#Blazor</a> (Server) could be possible. Whether it&#39;s a good idea or not is another story ;) <a href=\"https://t.co/LdSPYl4SRh\">https://t.co/LdSPYl4SRh</a> (thanks <a href=\"https://twitter.com/robert0muehsig?ref_src=twsrc%5Etfw\">@robert0muehsig</a> to get me jump up on this idea) <a href=\"https://t.co/1w29212qdS\">pic.twitter.com/1w29212qdS</a></p>&mdash; Manuel Sidler (@manuelsidler) <a href=\"https://twitter.com/manuelsidler/status/1253668691956445184?ref_src=twsrc%5Etfw\">April 24, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>Checkout his <strong><a href=\"https://github.com/manuelsidler/blazor-office-addin\">repository on GitHub</a></strong> for further information.</p>\n\n<h1 id=\"what-wont-work-webassembly-if-i-dont-miss-anything\">What won’t work: WebAssembly (if I don’t miss anything)</h1>\n\n<p>Serverside Blazor is cool, but has some problems (e.g. a server connection is needed and scaling is not that easy) - what about <strong>WebAssembly</strong>?</p>\n\n<p>Well… Blazor WebAssembly is still in preview and I tried the same setup that worked for serverside blazor.</p>\n\n<p><strong>Result:</strong></p>\n\n<p>The desktop PowerPoint (I tried to build a PowerPoint addin) keeps crashing after I add the addin. On Office Online it seems to work, but not for a very long time:</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">Blazor WebAssembly seems not to work or at least the startup is super weird :-/ <a href=\"https://t.co/IvnecQFMj2\">pic.twitter.com/IvnecQFMj2</a></p>&mdash; Robert Muehsig (@robert0muehsig) <a href=\"https://twitter.com/robert0muehsig/status/1254726027684777986?ref_src=twsrc%5Etfw\">April 27, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p><strong>Possible reasons:</strong></p>\n\n<p>The default Blazor WebAssembly installs a service worker. I removed that part, but I’m not 100% sure if I did it correctly. At least they are currently not supported from the <a href=\"https://docs.microsoft.com/en-us/office/dev/add-ins/concepts/browsers-used-by-office-web-add-ins#service-workers-are-not-working\">Office Add-in Edge WebView</a>. My experience with Office Online and the Blazor addin failed as well and I don’t think that service workers are the problem.</p>\n\n<p>I’m not really sure why its not working, but its quite early for Blazor WebAssembly, so… time will tell.</p>\n\n<h1 id=\"what-does-the-office-dev-team-think-of-blazor\">What does the Office Dev Team think of Blazor?</h1>\n\n<p>Currently I just found one comment on <a href=\"https://developer.microsoft.com/en-us/office/blogs/office-add-ins-community-call-november-13-2019/\">this blogpost</a> regarding Blazor:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Will Blazor be supported for Office Add-ins?\n\nNo, it will be a React Office.js add-in. We don’t have any plans to support Blazor yet. For that, please put a note on our UserVoice channel: https://officespdev.uservoice.com. There are several UserVoice items already on this, so know that we are listening to your feedback and prioritizing based on customer requests. The more requests we get for particular features, the more we will consider moving forward with developing it. \n</code></pre></div></div>\n\n<p>Well… vote for it! ;)</p>\n","Href":"https://blog.codeinside.eu/2020/04/30/blazor-for-office-addins-first-look/","RawContent":null,"Thumbnail":null},{"Title":"Escape enviroment variables in MSIEXEC parameters","PublishedOn":"2020-03-27T23:59:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"problem\">Problem</h1>\n\n<p>Customers can install our <a href=\"https://oneoffixx.com/\">product</a> on Windows with a standard MSI package. To automate the installation administrators can use <a href=\"https://docs.microsoft.com/de-de/windows/win32/msi/command-line-options?redirectedfrom=MSDN\">MSIEXEC</a> and MSI parameters to configure our client.</p>\n\n<p>A simple installation can look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msiexec /qb /i \"OneOffixx.msi\" ... CACHEFOLDER=\"D:/OneOffixx/\"\n</code></pre></div></div>\n\n<p>The “CACHEFOLDER” parameter will be written in the .exe.config file and our program will read it and stores offline content under the given location.</p>\n\n<p>So far, so good.</p>\n\n<p>For Terminal Server installations or “multi-user” scenarios this will not work, because each cache is bound to a local account. To solve this we could just insert the “%username%” enviroment variable, right?</p>\n\n<p>Well… no… at least not with the obvious call, because this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msiexec /qb /i \"OneOffixx.msi\" ... CACHEFOLDER=\"D:/%username%/OneOffixx/\"\n</code></pre></div></div>\n\n<p>will result in a call like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msiexec /qb /i \"OneOffixx.msi\" ... CACHEFOLDER=\"D:/admin/OneOffixx/\"\n</code></pre></div></div>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>I needed a few hours and some Google-Fu to found the answer.</p>\n\n<p>To “escape” those variables we need to invoke it like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msiexec /qb /i \"OneOffixx.msi\" ... CACHEFOLDER=\"D:/%%username%%/OneOffixx/\"\n</code></pre></div></div>\n\n<p><strong>Be aware:</strong> This stuff is a mess. It depends on your scenario. Checkout <a href=\"https://stackoverflow.com/a/31420292\">this Stackoverflow answer</a> to learn more. The double percent did the trick for us, so I guess it is “ok-ish”.</p>\n\n<h1 id=\"update\">Update</h1>\n\n<p>The above solution only works if you save the command in a file, e.g. in a install.bat file. If you want to invoke this in the CMD shell use this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cmd /v /c msiexec /qb /i \"OneOffixx.msi\" ... CACHEFOLDER=\"%appdata%/OneOffixx\"\n</code></pre></div></div>\n\n<p>The important parameter is <strong><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd\">“/v”</a></strong>, which enables delayed environment variable expansion.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2020/03/27/escape-environment-variables-in-msiexec-parameters/","RawContent":null,"Thumbnail":null}],"ResultType":"Feed"},"YouTube":{"FeedItems":[{"Title":"Erste Schritte mit dem Azure OpenAI Service","PublishedOn":"2023-03-23T22:30:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=VVNHT4gVxDo","RawContent":null,"Thumbnail":"https://i3.ytimg.com/vi/VVNHT4gVxDo/hqdefault.jpg"},{"Title":"Erster Schritt in die Source Control: Visual Studio Projekte auf GitHub pushen","PublishedOn":"2023-03-17T21:59:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=iKQS5nYbC-k","RawContent":null,"Thumbnail":"https://i2.ytimg.com/vi/iKQS5nYbC-k/hqdefault.jpg"},{"Title":"Vite.js für React & TypeScript für ASP.NET Core & Visual Studio Entwickler","PublishedOn":"2023-02-12T00:25:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=-2iiXpBcmDY","RawContent":null,"Thumbnail":"https://i2.ytimg.com/vi/-2iiXpBcmDY/hqdefault.jpg"},{"Title":"React.js mit TypeScript in ASP.NET Core mit Visual Studio & Visual Studio Code","PublishedOn":"2023-01-26T23:35:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=IgW79wxMO-c","RawContent":null,"Thumbnail":"https://i2.ytimg.com/vi/IgW79wxMO-c/hqdefault.jpg"},{"Title":"React.js mit ASP.NET Core - ein Einstieg mit Visual Studio","PublishedOn":"2022-10-07T23:15:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=gIzMtWDs_QM","RawContent":null,"Thumbnail":"https://i4.ytimg.com/vi/gIzMtWDs_QM/hqdefault.jpg"},{"Title":"Einstieg in die Webentwicklung mit .NET 6 & ASP.NET Core","PublishedOn":"2022-04-12T21:13:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=WtpzsW5Xwqo","RawContent":null,"Thumbnail":"https://i4.ytimg.com/vi/WtpzsW5Xwqo/hqdefault.jpg"},{"Title":"Das erste .NET 6 Programm","PublishedOn":"2022-01-30T22:21:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=fVzo2qJubmA","RawContent":null,"Thumbnail":"https://i3.ytimg.com/vi/fVzo2qJubmA/hqdefault.jpg"},{"Title":"Azure SQL - ist das echt so teuer? Neee...","PublishedOn":"2022-01-11T21:49:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=dNaIOGQj15M","RawContent":null,"Thumbnail":"https://i1.ytimg.com/vi/dNaIOGQj15M/hqdefault.jpg"},{"Title":"Was sind \"Project Templates\" in Visual Studio?","PublishedOn":"2021-12-22T22:36:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=_IMabo9yHSA","RawContent":null,"Thumbnail":"https://i4.ytimg.com/vi/_IMabo9yHSA/hqdefault.jpg"},{"Title":".NET Versionen - was bedeutet LTS und Current?","PublishedOn":"2021-12-21T21:06:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=2ghTKF0Ey_0","RawContent":null,"Thumbnail":"https://i3.ytimg.com/vi/2ghTKF0Ey_0/hqdefault.jpg"},{"Title":"Einstieg in die .NET Entwicklung für Anfänger","PublishedOn":"2021-12-20T22:18:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=2EcSJDX-8-s","RawContent":null,"Thumbnail":"https://i3.ytimg.com/vi/2EcSJDX-8-s/hqdefault.jpg"},{"Title":"Erste Schritte mit Unit Tests","PublishedOn":"2008-11-05T00:14:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=tjAv1-Qb4rY","RawContent":null,"Thumbnail":"https://i1.ytimg.com/vi/tjAv1-Qb4rY/hqdefault.jpg"},{"Title":"3 Schichten Architektur","PublishedOn":"2008-10-17T22:01:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":null,"Href":"https://www.youtube.com/watch?v=27yknlB8xeg","RawContent":null,"Thumbnail":"https://i3.ytimg.com/vi/27yknlB8xeg/hqdefault.jpg"}],"ResultType":"Feed"},"O_Blog":{"FeedItems":[{"Title":"How to build a simple hate speech detector with machine learning","PublishedOn":"2019-08-02T13:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Not everybody on the internet behaves nice and some comments are just rude or offending. If you run a web page that offers a public comment function hate speech can be a real problem. For example in Germany, you are legally required to delete hate speech comments. This can be challenging if you have to check thousands of comments each day. \nSo wouldn’t it be nice, if you can automatically check the user’s comment and give them a little hint to stay nice?\n<!--description--></p>\n\n<p>The simplest thing you could do is to check if the user’s text contains offensive words. However, this approach is limited since you can offend people without using offensive words.</p>\n\n<p>This post will show you how to train a machine learning model that can detect if a comment or text is offensive. And to start you need just a few lines of Python code \\o/</p>\n\n<h2 id=\"the-data\">The Data</h2>\n\n<p>At first, you need data. In this case, you will need a list of offensive and nonoffensive texts. I wrote this tutorial for a machine learning course in Germany, so I used German texts but you should be able to use other languages too.</p>\n\n<p>For a machine learning competition, scientists provided a list of comments labeled as offensive and nonoffensive (<a href=\"https://projects.fzai.h-da.de/iggsa/projekt/\">Germeval 2018, Subtask 1</a>). This is perfect for us since we just can use this data.</p>\n\n<h2 id=\"the-code\">The Code</h2>\n\n<p>To tackle this task I would first establish a baseline and then improve this solution step by step. Luckily they also published the scores of all submission, so we can get a sense of how well we are doing.</p>\n\n<p>For our baseline model we are going to use <a href=\"https://fasttext.cc/\">Facebooks fastText</a>. It’s simple to use, works with many languages and does not require any special hardware like a GPU. Oh, and it’s fast :)</p>\n\n<h3 id=\"1-load-the-data\">1. Load the data</h3>\n\n<p>After you downloaded the training data file <a href=\"https://github.com/uds-lsv/GermEval-2018-Data\">germeval2018.training.txt</a> you need to transform this data into a format that fastText can read.\nFastTexts standard format looks like this “<strong>label</strong>[your label] some text”:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>__label__offensive some insults\n__label__other have a nice day\n</code></pre></div></div>\n\n<h3 id=\"2-train-the-model\">2. Train the Model</h3>\n\n<p>To train the model you need to install the fastText Python package.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>pip <span class=\"nb\">install </span>fasttext\n</code></pre></div></div>\n<p>To train the model you need just there line of code.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">fasttext</span>\n<span class=\"n\">traning_parameters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'epoch'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">'lr'</span><span class=\"p\">:</span> <span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"s\">'loss'</span><span class=\"p\">:</span> <span class=\"s\">\"ns\"</span><span class=\"p\">,</span> <span class=\"s\">'thread'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s\">'ws'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'dim'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>    \n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">fasttext</span><span class=\"p\">.</span><span class=\"n\">supervised</span><span class=\"p\">(</span><span class=\"s\">'fasttext.train'</span><span class=\"p\">,</span> <span class=\"s\">'model'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">traning_parameters</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>I packed all the training parameters into a seperate dictionary. To me that looks a bit cleaner but you don’t need to do that.</p>\n\n<h3 id=\"3-test-your-model\">3. Test your Model</h3>\n\n<p>After we trained the model it is time to test how it performs. FastText provides us a handy test method the evaluate the model’s performance. To compare our model with the other models from the GermEval contest I also added a lambda which calculates the average <a href=\"https://en.wikipedia.org/wiki/F1_score\">F1 score</a>. For now, I did not use the official test script from the contests repository. Which you should do if you wanted to participate in such contests.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n    <span class=\"n\">f1_score</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"n\">recall</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">precision</span> <span class=\"o\">*</span> <span class=\"n\">recall</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">precision</span> <span class=\"o\">+</span> <span class=\"n\">recall</span><span class=\"p\">))</span>\n    <span class=\"n\">nexamples</span><span class=\"p\">,</span> <span class=\"n\">recall</span><span class=\"p\">,</span> <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s\">'fasttext.test'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">f'recall: </span><span class=\"si\">{</span><span class=\"n\">recall</span><span class=\"si\">}</span><span class=\"s\">'</span> <span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">f'precision: </span><span class=\"si\">{</span><span class=\"n\">precision</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">f'f1 score: </span><span class=\"si\">{</span><span class=\"n\">f1_score</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"p\">,</span><span class=\"n\">recall</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">f'number of examples: </span><span class=\"si\">{</span><span class=\"n\">nexamples</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>I don’t know about you, but I am so curious how we score. Annnnnnnd:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>recall: 0.7018686296715742\nprecision: 0.7018686296715742\nf1 score: 0.7018686296715742\nnumber of examples: 3532\n</code></pre></div></div>\n\n<p>Looking at the <a href=\"https://github.com/uds-lsv/GermEval-2018-Data/blob/master/results.pdf\">results</a> we can see that the best other model had an average F1 score of 76,77 and <strong>our model achieves -without any optimization and preprocessing- an F1 Score of 70.18.</strong></p>\n\n<p>This is pretty good since the models for these contests are usually specially optimized for the given data.</p>\n\n<p>FastText is a clever piece of software, that uses some neat tricks. If interested in fastText you should take a look the <a href=\"https://arxiv.org/abs/1607.04606\">paper</a> and <a href=\"https://arxiv.org/abs/1607.01759\">this one</a>. For example, fastText uses character n-grams. This approach is well suited for the German language, which uses a lot of compound words.</p>\n\n<h2 id=\"next-steps\">Next Steps</h2>\n\n<p>In this very basic tutorial, we trained a model with just a few lines of Python code. There are several things you can do to improve this model. The first step would be to preprocess your data. During preprocessing you could lower case all texts, remove URLs and special characters, correct spelling, etc. After every optimization step, you can test your model and check if your scores went up. Happy hacking :)</p>\n\n<p>Some Ideas:</p>\n\n<ol>\n  <li>Preprocess the data</li>\n  <li>Optimize the parameters (number of training epochs, learning rate, embedding dims, word n-grams)</li>\n  <li>Use pre-trained word vectors from the fastText website</li>\n  <li>add more data to the training set</li>\n  <li>Use data augmentation.</li>\n</ol>\n\n<p>Here is the full code:</p>\n\n<script src=\"https://gist.github.com/oliverguhr/31a1c93a1005d7e6e04c23d389d89cb7.js\"></script>\n\n<p>Credit: Photo by <a href=\"https://unsplash.com/photos/IYtVtgXw72M\">Jon Tyson on Unsplash</a></p>","Href":"https://www.oliverguhr.eu/nlp/jekyll/2019/08/02/build-a-simple-hate-speech-detector-with-machine-learning.html","RawContent":null,"Thumbnail":null}],"ResultType":"Feed"},"GitHubEventsUser":{"Events":[{"Id":"29064790469","Type":"IssuesEvent","CreatedAt":"2023-05-15T08:39:25","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1134","RelatedDescription":"Opened issue \"Selected Tab on first render has a black border\" (#1134) at fluentribbon/Fluent.Ribbon","RelatedBody":"Not sure if this counts as bug or feature, but the first impression is \"weird\". When you create a RibbonWindow with a selected tab, a black border appears around it:\r\n\r\n![image](https://github.com/fluentribbon/Fluent.Ribbon/assets/756703/581486c4-8e35-4051-abd8-e2facb7f9bd7)\r\n\r\nTo reproduce just press this button in your sample app:\r\n![image](https://github.com/fluentribbon/Fluent.Ribbon/assets/756703/be3352a8-b063-446a-bee0-dc3e77085f99)\r\n\r\nIMHO the black border makes sense for keyboard navigation (accessibility...), but in this case no keyboard navigation has happend and the ribbon is clearly selected anyway.\r\n\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v10__\r\n- Windows __11__\r\n- .NET Framework __4.8__\r\n"},{"Id":"29005444532","Type":"IssuesEvent","CreatedAt":"2023-05-11T15:17:33","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1130","RelatedDescription":"Closed issue \"Update to v10 results in a \"black screen\"\" (#1130) at fluentribbon/Fluent.Ribbon","RelatedBody":"We have a larger application, which I want to update to v10.  Update via NuGet & build/compile without any errors, but the resulting window is \"black\":\r\n\r\n![image](https://github.com/fluentribbon/Fluent.Ribbon/assets/756703/50d2b1e7-c2a5-4cc1-a888-4e563f99429e)\r\n\r\nI didn't found any big difference between our application and your sample app. I guess the reason might be, that you moved some resources. \r\n\r\nI also included this in our `App.xaml`:\r\n\r\n```\r\n<Application\r\n\txmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n\txmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n\tmc:Ignorable=\"d\"\r\n\tx:Class=\"XXX.App\">\r\n    <Application.Resources>\r\n        <ResourceDictionary>\r\n            <ResourceDictionary.MergedDictionaries>\r\n                <!-- Without this we may face some DynamicResources bugs (e.g. https://github.com/fluentribbon/Fluent.Ribbon/issues/711)  -->\r\n                <ResourceDictionary Source=\"pack://application:,,,/Fluent;Component/Themes/Generic.xaml\" />\r\n\r\n            </ResourceDictionary.MergedDictionaries>\r\n        </ResourceDictionary>\r\n    </Application.Resources>\r\n        \r\n</Application>\r\n```\r\n\r\nThe application worked with the most recent Fluent.Ribbon - maybe you have an idea where to look.\r\n\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v10__\r\n- Windows __11__\r\n- .NET Framework __4.8__\r\n"},{"Id":"28970364870","Type":"IssuesEvent","CreatedAt":"2023-05-10T10:44:48","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1130","RelatedDescription":"Opened issue \"Update to v10 results in a \"black screen\"\" (#1130) at fluentribbon/Fluent.Ribbon","RelatedBody":"We have a larger application, which I want to update to v10.  Update via NuGet & build/compile without any errors, but the resulting window is \"black\":\r\n\r\n![image](https://github.com/fluentribbon/Fluent.Ribbon/assets/756703/50d2b1e7-c2a5-4cc1-a888-4e563f99429e)\r\n\r\nI didn't found any big difference between our application and your sample app. I guess the reason might be, that you moved some resources. \r\n\r\nI also included this in our `App.xaml`:\r\n\r\n```\r\n<Application\r\n\txmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n\txmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n\tmc:Ignorable=\"d\"\r\n\tx:Class=\"XXX.App\">\r\n    <Application.Resources>\r\n        <ResourceDictionary>\r\n            <ResourceDictionary.MergedDictionaries>\r\n                <!-- Without this we may face some DynamicResources bugs (e.g. https://github.com/fluentribbon/Fluent.Ribbon/issues/711)  -->\r\n                <ResourceDictionary Source=\"pack://application:,,,/Fluent;Component/Themes/Generic.xaml\" />\r\n\r\n            </ResourceDictionary.MergedDictionaries>\r\n        </ResourceDictionary>\r\n    </Application.Resources>\r\n        \r\n</Application>\r\n```\r\n\r\nThe application worked with the most recent Fluent.Ribbon - maybe you have an idea where to look.\r\n\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v10__\r\n- Windows __11__\r\n- .NET Framework __4.8__\r\n"},{"Id":"28843559676","Type":"IssuesEvent","CreatedAt":"2023-05-04T09:36:25","Actor":"oliverguhr","Repository":"oliverguhr/deepmultilingualpunctuation","Organization":null,"RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/oliverguhr/deepmultilingualpunctuation/issues/13","RelatedDescription":"Closed issue \"Load local model for offline usage?\" (#13) at oliverguhr/deepmultilingualpunctuation","RelatedBody":"Hi Oliver, thank you for this awesome contribution.\r\n\r\nOne question - how can we direct the library to load a model that is stored locally, as opposed to downloading from HuggingFace? This would be extremely helpful with offline or air-gapped usage of your library.\r\n\r\nThank you!"},{"Id":"28843546745","Type":"IssuesEvent","CreatedAt":"2023-05-04T09:35:55","Actor":"oliverguhr","Repository":"oliverguhr/deepmultilingualpunctuation","Organization":null,"RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/oliverguhr/deepmultilingualpunctuation/issues/10","RelatedDescription":"Closed issue \"User Warning , grouped_entities=False\" (#10) at oliverguhr/deepmultilingualpunctuation","RelatedBody":"I followed your tutorial and works great!\r\nhowever i get the following Warning coming from **hugging face pipeline**:\r\n\r\n```\r\n/usr/local/lib/python3.8/dist-packages/transformers/pipelines/token_classification.py:159: UserWarning: `grouped_entities` is deprecated and will be removed in version v5.0.0, defaulted to `aggregation_strategy=\"none\"` instead.\r\n  warnings.warn(\r\n```\r\n\r\nHere is the required doc:\r\n[Hugging Face pipeline](https://huggingface.co/docs/transformers/main_classes/pipelines#transformers.TokenClassificationPipeline)\r\n\r\n\r\n\r\nAnd the line of code to change is:\r\nFrom the **PunctuationModel** (inside the **\\_\\_init\\_\\_** method...) both **pipeline()** calls\r\n\r\n\r\n\r\n\r\n\r\nWould you consider updating those lines in order to get rid of the warning?\r\nThank you in advance!"},{"Id":"28843546459","Type":"PullRequestEvent","CreatedAt":"2023-05-04T09:35:54","Actor":"oliverguhr","Repository":"oliverguhr/deepmultilingualpunctuation","Organization":null,"RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/oliverguhr/deepmultilingualpunctuation/pull/12","RelatedDescription":"Merged pull request \"Remove deprecated parameter\" (#12) at oliverguhr/deepmultilingualpunctuation","RelatedBody":"Closes #10 "},{"Id":"28843523143","Type":"IssuesEvent","CreatedAt":"2023-05-04T09:35:03","Actor":"oliverguhr","Repository":"oliverguhr/wav2vec2-live","Organization":null,"RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/oliverguhr/wav2vec2-live/issues/14","RelatedDescription":"Closed issue \"Live ASR Engine with whisper \" (#14) at oliverguhr/wav2vec2-live","RelatedBody":"I have implemented (not from scratch) LiveASREngine using whisper using the following codebase written by you:\r\n\r\nhttps://github.com/oliverguhr/wav2vec2-live\r\n\r\nThe only change I made was in the wav2vec2_inference.py: initialized whisper model with hugging face pipeline.\r\nmy code: https://github.com/Dimlight/LiveASREngine\r\nThe problem I am facing now:\r\n\r\nIf I do not say anything and the entire room is silent, the engine continuously prints \"you\" or \"thank you\", I tested the system in a quiet room. still getting the same issue.\r\n\r\nCan anyone please help me what can be the reasons for getting this kind of result?"},{"Id":"28843520028","Type":"IssuesEvent","CreatedAt":"2023-05-04T09:34:56","Actor":"oliverguhr","Repository":"oliverguhr/wav2vec2-live","Organization":null,"RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/oliverguhr/wav2vec2-live/issues/15","RelatedDescription":"Closed issue \"use it with local model\" (#15) at oliverguhr/wav2vec2-live","RelatedBody":"thanks a lot for your efforts, could you please tell me how I can use it with a local model on my computer (without uploading the model to hugging face)? , it's giving me this error message \r\n`ValueError: too many values to unpack (expected 3) `\r\n![image](https://user-images.githubusercontent.com/95621539/201626372-118cb355-a03e-44c3-b33c-f9b966d4466c.png)\r\n"},{"Id":"28843474672","Type":"PullRequestEvent","CreatedAt":"2023-05-04T09:33:06","Actor":"oliverguhr","Repository":"oliverguhr/german-sentiment","Organization":null,"RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/oliverguhr/german-sentiment/pull/13","RelatedDescription":"Closed pull request \"docs: demo, experiments and live inference API on Tiyaro\" (#13) at oliverguhr/german-sentiment","RelatedBody":"Hello Maintainer of Github repo oliverguhr/german-sentiment (@oliverguhr )!\r\n\r\nThank you for your work on oliverguhr/german-sentiment.  This GitHub project is interesting, and we think that it would be a great addition to make this work instantly discoverable & available as an API for all your users, to quickly try and use it in their applications.\r\n\r\nOn Tiyaro, every model in oliverguhr/german-sentiment will get its own:\r\nDedicated model card (see https://console.tiyaro.ai/explore/oliverguhr-german-sentiment-bert\r\nModel demo (see https://console.tiyaro.ai/explore/oliverguhr-german-sentiment-bert/demo)\r\nUnique Inference API (https://api.tiyaro.ai/explore/huggingface/1//oliverguhr/german-sentiment-bert)\r\nSample code snippets and swagger spec for the API\r\n\r\nUsers will also be able to compare your model with other models of similar types on various parameters using Tiyaro Experiments \r\n(https://blog.tiyaro.ai/evaluate-openmmlabs-mmocr-models-using-tiyaro-experiments)\r\n\r\n—-\r\nI am from Tiyaro.ai (https://tiyaro.ai/).  We are working on enabling developers to instantly evaluate, use and customize the world’s best AI.  We are constantly working on adding new features to Tiyaro EasyTrain, EasyServe & Experiments, to make the best use of your ML model, and making AI more accessible for anyone.\r\n\r\nSincerely,\r\nI-Jong Lin\r\n\r\n"},{"Id":"28512948384","Type":"IssuesEvent","CreatedAt":"2023-04-19T06:39:44","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1125","RelatedDescription":"Opened issue \"BackStage Back Button doesn't have an accessibility text.\" (#1125) at fluentribbon/Fluent.Ribbon","RelatedBody":"If you focus the button and have the Narrator/nvda/any other screenreader open, nothing will be read:\r\n\r\n![image](https://user-images.githubusercontent.com/756703/232986728-841079dd-f33d-4736-8444-89465629fae7.png)\r\n\r\n\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v9__ (and current development)\r\n- Windows __10/11__ (doesn't matter, but the Narrator is quite \"broken\" on Windows 11 & WPF)\r\n- .NET Framework __?__ (just started the Showcase app).\r\n"},{"Id":"27864508320","Type":"IssuesEvent","CreatedAt":"2023-03-21T09:19:25","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1117","RelatedDescription":"Opened issue \"Accessibility: BackButton has low contrast\" (#1117) at fluentribbon/Fluent.Ribbon","RelatedBody":"The MouseOver on the Backbutton lowers the contrast of the control:\r\n\r\n![image](https://user-images.githubusercontent.com/756703/226562938-63b4edff-ac85-4c63-8ac6-89ac9a1590d3.png)\r\n\r\nIt should be \"at least\" 3:1 - not sure how to handle it correctly. \r\n\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v8-develop branch (from today)__\r\n- Windows __11__\r\n- .NET Framework __?.?__ (Doesn't matter)\r\n"},{"Id":"27864107904","Type":"IssuesEvent","CreatedAt":"2023-03-21T09:03:15","Actor":"robertmuehsig","Repository":"fluentribbon/Fluent.Ribbon","Organization":"fluentribbon","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/fluentribbon/Fluent.Ribbon/issues/1116","RelatedDescription":"Opened issue \"Accessibility: Ribbon Display Options are read as \"DropDown Button\"\" (#1116) at fluentribbon/Fluent.Ribbon","RelatedBody":"Turn on the Windows Narrator, move to this button via the keyboard:\r\n\r\n![image](https://user-images.githubusercontent.com/756703/226559561-e796507a-6720-41d2-88a9-7b167e66556a.png)\r\n\r\nNarrator will just read \"Drop down button\" instead of the description\r\n---\r\n### Environment\r\n\r\n- Fluent.Ribbon __v8 - and even the current dev branch (from today)__\r\n- Windows __11__\r\n- .NET Framework __?.?__ (Doesn't matter)\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-06-17T05:30:03.0360678Z","RunDurationInMilliseconds":1347}