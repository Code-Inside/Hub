{"Data":{"Blog":{"FeedItems":[{"Title":"Improving Code","PublishedOn":"2018-08-03T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"improving-code\">Improving code</h1>\n\n<h2 id=\"tldr\">TL;DR;</h2>\n\n<p>**Things I learned: **</p>\n\n<ul>\n  <li>long one-liners are hard to read and understand</li>\n  <li>split up your code into small, easy to understand functions</li>\n  <li>less “plumping” (read infrastructure code) is the better</li>\n  <li>get <a href=\"https://en.wikipedia.org/wiki/Indentation_style\">indentation</a> right</li>\n  <li>correct, concise, fast</li>\n</ul>\n\n<p>**Why should I bother? **</p>\n\n<p>Readable code is:</p>\n\n<ul>\n  <li>easier to debug</li>\n  <li>fast to fix</li>\n  <li>easier to maintain</li>\n</ul>\n\n<h2 id=\"the-problem\">The problem</h2>\n\n<p>Recently I wanted to implement an algorithm for a project we are doing. The goal was to create a so-called “Balanced Latin Square”, we used it to prevent ordering effects in user studies. You can find a little bit of background <a href=\"http://www.statisticshowto.com/latin-square-design/\">here</a> and a nice description of the algorithm <a href=\"http://rintintin.colorado.edu/~chathach/balancedlatinsquares.html\">here</a>.</p>\n\n<p>It’s fairly simple, although it is not obvious how it works, just by looking at the code. The function takes an integer as an argument and returns a Balanced Latin Square. For example, a “4” would return this matrix of numbers:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1 2 4 3 \n2 3 1 4 \n3 4 2 1 \n4 1 3 2 \n</code></pre></div></div>\n\n<p>And there is a little twist if your number is odd, then you need to reverse every row and append them to your result.</p>\n\n<p>After I created the my implementation, I had an idea on how to simplify it. At least I thought its simpler ;)</p>\n\n<h2 id=\"first-attempt----loops\">First attempt -  Loops</h2>\n\n<p>Based on the description and a Python version of that algorithm, I created a classical (read “imperative”) implementation.</p>\n\n<p>So this is the C# Code:</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;&gt;</span> <span class=\"nf\">BalancedLatinSquares</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;&gt;()</span> <span class=\"p\">{</span> <span class=\"p\">};</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">row</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"p\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"p\">++)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">cell</span> <span class=\"p\">=</span> <span class=\"p\">((</span><span class=\"n\">j</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">1</span> <span class=\"p\">?</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span> <span class=\"p\">+</span> <span class=\"m\">1</span> <span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"p\">-</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">%</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n            <span class=\"n\">cell</span><span class=\"p\">++;</span> <span class=\"c1\">// start counting from 1</span>\n            <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"nf\">ToString</span><span class=\"p\">());</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">reversedResult</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">AsQueryable</span><span class=\"p\">().</span><span class=\"nf\">Reverse</span><span class=\"p\">().</span><span class=\"nf\">ToList</span><span class=\"p\">()).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>                \n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">AddRange</span><span class=\"p\">(</span><span class=\"n\">reversedResult</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I also wrote some simple unit tests to ensure this works. But in the end, I really didn’t like this code.  It contains two nested loops and a lot of plumbing code.  There are four lines alone just to create the result object (list) and to add the values to it. Recently I looked into functional programming and since C# also has some functional inspired features, I tried to improve this code with some functional goodness :)</p>\n\n<h2 id=\"second-attempt---lambda-expressions\">Second attempt - Lambda Expressions</h2>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;&gt;</span> <span class=\"nf\">BalancedLatinSquares</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">=&gt;</span>\n                <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"p\">=&gt;</span> <span class=\"p\">((((</span><span class=\"n\">j</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">1</span> <span class=\"p\">?</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span> <span class=\"p\">+</span> <span class=\"m\">1</span> <span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"p\">-</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">%</span> <span class=\"n\">n</span><span class=\"p\">)+</span><span class=\"m\">1</span><span class=\"p\">).</span><span class=\"nf\">ToString</span><span class=\"p\">()).</span><span class=\"nf\">ToList</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>     \n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">reversedResult</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">AsQueryable</span><span class=\"p\">().</span><span class=\"nf\">Reverse</span><span class=\"p\">().</span><span class=\"nf\">ToList</span><span class=\"p\">()).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">AddRange</span><span class=\"p\">(</span><span class=\"n\">reversedResult</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is the result of my attempt to use some functional features. And hey, it is much shorter, therefore it must be better, right? Well, <a href=\"https://twitter.com/oliverguhr/status/1022395269026070528\">I posted a screenshot of both versions on Twitter</a> and asked which one the people prefer. As it turned out, a lot of folks actually preferred the loop version. But why? Looking back at my code a saw two problems by looking at this line:</p>\n\n<p><code class=\"highlighter-rouge\">Enumerable.Range(0, n).Select(j =&gt; ((((j % 2 == 1 ? j / 2 + 1 : n - j / 2) + i) % n)+1).ToString()).ToList()</code></p>\n\n<ul>\n  <li>I squeezed a lot of code in this one liner.  This makes it harder to read and therefore harder to understand.</li>\n  <li>Another issue is, that I omitted descriptive variable names since they are not needed anymore. Oh and I removed the only comment I wrote since this comment would not fit in the one line of code :)</li>\n</ul>\n\n<p>So, shorter is not always better.</p>\n\n<h2 id=\"third-attempt---better-lambda-expressions\">Third attempt - better Lambda Expressions</h2>\n\n<p>The smart folks on Twitter had some great ideas about how to improve my code.</p>\n\n<p>The first step was to get rid of the unholy one-liner. You can - and should - always split up your code into smaller, meaningful code blocks. I pulled out the <em>calculateCell</em> function and out of that I also extracted a <em>isEven</em> function. The nice thing is, that the function names also working as a kind of documentation about whats going on.</p>\n\n<p>By returning IEnumerable instead of lists, I was able to remove some <em>.toList()</em> calls. Also, I was able to shorten the code to create the <em>reversedResult</em>.</p>\n\n<p>Another simple step to improve readability is to get line <a href=\"https://en.wikipedia.org/wiki/Indentation_style\">indentation</a> right. Personally, I don’t care which indentation style people are using, as long as it’s used consistently.</p>\n\n<div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;&gt;</span> <span class=\"nf\">GenerateBalancedLatinSquares</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">bool</span> <span class=\"nf\">isEven</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">i</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">0</span><span class=\"p\">;</span>        \n    <span class=\"kt\">int</span> <span class=\"nf\">calculateCell</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">=&gt;((</span><span class=\"nf\">isEven</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"n\">n</span> <span class=\"p\">-</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span> <span class=\"p\">:</span> <span class=\"n\">j</span> <span class=\"p\">/</span> <span class=\"m\">2</span> <span class=\"p\">+</span> <span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">%</span> <span class=\"n\">n</span> <span class=\"p\">+</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    \n    <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span>\n                    <span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                    <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"p\">=&gt;</span>\n                        <span class=\"n\">Enumerable</span>\n                            <span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                            <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">col</span> <span class=\"p\">=&gt;</span><span class=\"nf\">calculateCell</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span><span class=\"n\">row</span><span class=\"p\">))</span>\n                    <span class=\"p\">);</span>     \n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nf\">isEven</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">!=</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">reversedResult</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">Reverse</span><span class=\"p\">());</span>                \n        <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">Concat</span><span class=\"p\">(</span><span class=\"n\">reversedResult</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>        \n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span><span class=\"n\">conditional</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I think there is room for further improvement. For the <em>calculateCell</em> function I am using this <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator\">?: conditional operator</a>, it allows you to write very compact code, on the other hand, it’s also harder to read. If you would replace this with an <em>if</em> statement you would need more lines of code, but also have more space to add comments. Functional languages like Scala, F#, and Haskel providing this neat <em>match</em> expression that could help here.</p>\n\n<h2 id=\"extra-how-does-this-algorithm-look-in-other-languages\">Extra: How does this algorithm look in other languages:</h2>\n\n<p><strong>Python</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">balanced_latin_squares</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[[((</span><span class=\"n\">j</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">j</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c\"># Repeat reversed for odd n</span>\n        <span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">seq</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">seq</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">l</span>\n</code></pre></div></div>\n\n<p>I took this sample from <a href=\"https://gist.github.com/graup/70b09323bfa7182fe693eecb8e749896#file-balanced_latin_squares-py\">Paul Grau.</a></p>\n\n<p><strong>Haskell</strong></p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">Haskell: <a href=\"https://t.co/P5rFqvgvgA\">pic.twitter.com/P5rFqvgvgA</a></p>&mdash; λx.x Carsten (@CarstenK_Dev) <a href=\"https://twitter.com/CarstenK_Dev/status/1022404328529829888?ref_src=twsrc%5Etfw\">26. Juli 2018</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>Thank you <a href=\"https://twitter.com/CarstenK_Dev\">Carsten</a></p>\n","Href":"https://blog.codeinside.eu/2018/08/03/improving-code/","RawContent":null},{"Title":"Easy way to copy a SQL database with Microsoft SQL Server Management Studio (SSMS)","PublishedOn":"2018-07-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"how-to-copy-a-database-on-the-same-sql-server\">How to copy a database on the same SQL server</h1>\n\n<p>The scenario is pretty simple: We just want a copy of our database, with all the data and the complete scheme and permissions.</p>\n\n<h2 id=\"1-step-make-a-back-up-of-your-source-database\">1. step: Make a back up of your source database</h2>\n\n<p>Click on the desired database and choose “Backup” under tasks.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-07-31/1_BackupTask.png\" alt=\"x\" title=\"Backup the database\" /></p>\n\n<h2 id=\"2-step-use-copy-only-or-use-a-full-backup\">2. step: Use copy only or use a full backup</h2>\n\n<p>In the dialog you may choose “copy-only” backup. With this option the regular backup job will not be confused.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-07-31/2_BackupOptions.png\" alt=\"x\" title=\"Copy only\" /></p>\n\n<h2 id=\"3-step-use-restore-to-create-a-new-database\">3. step: Use “Restore” to create a new database</h2>\n\n<p>This is the most important point here: To avoid fighting against database-file namings use the “restore” option. <strong>Don’t</strong> create a database manually - this is part of the restore operation.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-07-31/3_restoredatabase.png\" alt=\"x\" title=\"Restore database\" /></p>\n\n<h2 id=\"4-step-choose-the-copy-only-backup-and-choose-a-new-name\">4. step: Choose the copy-only backup and choose a new name</h2>\n\n<p>In this dialog you can name the “copy” database and choose the copy-only backup from the source database.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-07-31/4_copydb.png\" alt=\"x\" title=\"Restore dialog\" /></p>\n\n<p>Now click ok and you are done!</p>\n\n<h2 id=\"behind-the-scenes\">Behind the scenes</h2>\n\n<p>This restore operation works way better to copy a database then to overwrite an existing database, because the restore operation will adjust the filenames.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-07-31/5_copydb_setting.png\" alt=\"x\" title=\"Filename settings\" /></p>\n\n<h2 id=\"further-information\">Further information</h2>\n\n<p>I’m not a DBA, but when I follow these steps I normally have nothing to worry about if I want a 1:1 copy of a database. This can also be scripted, but then you may need to worry about filenames.</p>\n\n<p>This <a href=\"https://stackoverflow.com/questions/3829271/how-can-i-clone-an-sql-server-database-on-the-same-server-in-sql-server-2008-exp\">stackoverflow question</a> is full of great answers!</p>\n\n<p>Hope this helps!</p>\n\n","Href":"https://blog.codeinside.eu/2018/07/31/easy-way-to-copy-a-sql-database-with-ssms/","RawContent":null},{"Title":"DbProviderFactories & ODP.NET: When even Oracle can be tamed","PublishedOn":"2018-06-01T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"oracle-and-net-tales-from-the-dark-ages\">Oracle and .NET: Tales from the dark ages</h1>\n\n<p>Each time when I tried to load data from an Oracle database it was a pretty terrible experience.</p>\n\n<p>I remember that I struggle to find the right Oracle driver and even when everything was installed the strange TNS ora config file popped up and nothing worked.</p>\n\n<h1 id=\"it-can-be-simple\">It can be simple…</h1>\n\n<p>2 weeks ago I had the pleasure to load some data from a Oracle database and discovered something beautiful: Actually, I can be pretty simple today.</p>\n\n<h1 id=\"the-way-to-success\">The way to success:</h1>\n\n<p><strong>1. Just ignore the <a href=\"https://msdn.microsoft.com/en-us/library/system.data.oracleclient(v=vs.110).aspx\">System.Data.OracleClient-Namespace</a></strong></p>\n\n<p>The implementation is pretty old and if you go this route you will end up with the terrible “Oracle driver/tns.ora”-chaos mentioned above.</p>\n\n<p><strong>2. Use the <a href=\"https://www.nuget.org/packages/Oracle.ManagedDataAccess/\">Oracle.ManagedDataAccess</a>:</strong></p>\n\n<p>Just install the official NuGet package and you are done. The single .dll contains all the bits to connect to an Oracle database. <strong>No</strong> driver installation additional software is needed. Yay!</p>\n\n<p>The NuGet package will add some config entries in your web.config or app.config. I will cover this in the section below.</p>\n\n<p><strong>3. Use sane ConnectionStrings:</strong></p>\n\n<p>Instead of the wild Oracle TNS config stuff, just use (a more or less) sane ConnectionString.</p>\n\n<p>You can either just use the same configuration you would normally do in the TNS file, like <a href=\"https://www.connectionstrings.com/oracle-data-provider-for-net-odp-net/using-odpnet-without-tnsnamesora/\">this</a>:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=MyHost)(PORT=MyPort)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=MyOracleSID)));User Id=myUsername;Password=myPassword;\n</code></pre></div></div>\n\n<p>Or use the even simpler <a href=\"http://www.oracle.com/technetwork/database/enterprise-edition/oraclenetservices-neteasyconnect-133058.pdf\">“easy connect name schema”</a> like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Data Source=username/password@myserver//instancename;\n</code></pre></div></div>\n\n<h1 id=\"dbproviderfactories--odpnet\">DbProviderFactories &amp; ODP.NET</h1>\n\n<p>As I mentioned earlier after the installation your web or app.config might look different.</p>\n\n<p>The most interesting addition is the registration in the DbProviderFactories-section:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n<span class=\"nt\">&lt;system.data&gt;</span>\n    <span class=\"nt\">&lt;DbProviderFactories&gt;</span>\n      <span class=\"nt\">&lt;remove</span> <span class=\"na\">invariant=</span><span class=\"s\">\"Oracle.ManagedDataAccess.Client\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"ODP.NET, Managed Driver\"</span> <span class=\"na\">invariant=</span><span class=\"s\">\"Oracle.ManagedDataAccess.Client\"</span> <span class=\"na\">description=</span><span class=\"s\">\"Oracle Data Provider for .NET, Managed Driver\"</span>\n          <span class=\"na\">type=</span><span class=\"s\">\"Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/DbProviderFactories&gt;</span>\n  <span class=\"nt\">&lt;/system.data&gt;</span>\n...\n</code></pre></div></div>\n\n<p>I covered this topic a while ago in an <a href=\"https://blog.codeinside.eu/2016/12/31/dbproviderfactory-write-database-agnostic-adonet-code/\">older blogpost</a>, but to keep it simple: <strong>It also works for Oracle!</strong></p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t\t<span class=\"k\">private</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">OracleTest</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">string</span> <span class=\"n\">constr</span> <span class=\"p\">=</span> <span class=\"s\">\"Data Source=localhost;User Id=...;Password=...;\"</span><span class=\"p\">;</span>\n\n            <span class=\"n\">DbProviderFactory</span> <span class=\"n\">factory</span> <span class=\"p\">=</span> <span class=\"n\">DbProviderFactories</span><span class=\"p\">.</span><span class=\"nf\">GetFactory</span><span class=\"p\">(</span><span class=\"s\">\"Oracle.ManagedDataAccess.Client\"</span><span class=\"p\">);</span>\n\n            <span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"n\">DbConnection</span> <span class=\"n\">conn</span> <span class=\"p\">=</span> <span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"nf\">CreateConnection</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">try</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">ConnectionString</span> <span class=\"p\">=</span> <span class=\"n\">constr</span><span class=\"p\">;</span>\n                    <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">Open</span><span class=\"p\">();</span>\n\n                    <span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"n\">DbCommand</span> <span class=\"n\">dbcmd</span> <span class=\"p\">=</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">CreateCommand</span><span class=\"p\">())</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"n\">dbcmd</span><span class=\"p\">.</span><span class=\"n\">CommandType</span> <span class=\"p\">=</span> <span class=\"n\">CommandType</span><span class=\"p\">.</span><span class=\"n\">Text</span><span class=\"p\">;</span>\n                        <span class=\"n\">dbcmd</span><span class=\"p\">.</span><span class=\"n\">CommandText</span> <span class=\"p\">=</span> <span class=\"s\">\"select name, address from contacts WHERE UPPER(name) Like UPPER('%' || :name || '%') \"</span><span class=\"p\">;</span>\n\n                        <span class=\"kt\">var</span> <span class=\"n\">dbParam</span> <span class=\"p\">=</span> <span class=\"n\">dbcmd</span><span class=\"p\">.</span><span class=\"nf\">CreateParameter</span><span class=\"p\">();</span>\n                        <span class=\"c1\">// prefix with : possible, but @ will be result in an error</span>\n                        <span class=\"n\">dbParam</span><span class=\"p\">.</span><span class=\"n\">ParameterName</span> <span class=\"p\">=</span> <span class=\"s\">\"name\"</span><span class=\"p\">;</span>\n                        <span class=\"n\">dbParam</span><span class=\"p\">.</span><span class=\"n\">Value</span> <span class=\"p\">=</span> <span class=\"s\">\"foobar\"</span><span class=\"p\">;</span>\n\n                        <span class=\"n\">dbcmd</span><span class=\"p\">.</span><span class=\"n\">Parameters</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">dbParam</span><span class=\"p\">);</span>\n\n                        <span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"n\">DbDataReader</span> <span class=\"n\">dbrdr</span> <span class=\"p\">=</span> <span class=\"n\">dbcmd</span><span class=\"p\">.</span><span class=\"nf\">ExecuteReader</span><span class=\"p\">())</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">dbrdr</span><span class=\"p\">.</span><span class=\"nf\">Read</span><span class=\"p\">())</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">dbrdr</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]);</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">);</span>\n                    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">StackTrace</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"mssql-mysql-and-oracle---via-dbproviderfactories\">MSSQL, MySql and Oracle - via DbProviderFactories</h1>\n\n<p>The above code is a snippet from my larger sample demo covering <strong>MSSQL</strong>, <strong>MySQL</strong> and <strong>Oracle</strong>. If you are interested just check this demo on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2018/OracleMySqlMsSqlViaGenericSql\"><strong>GitHub</strong></a>.</p>\n\n<p>Each SQL-Syntax teats parameter a bit different, so make sure you use the correct syntax for your target database.</p>\n\n<h1 id=\"bottom-line\">Bottom line</h1>\n\n<p>Accessing a Oracle database from .NET doesn’t need to be a pain nowadays.</p>\n\n<p>Be aware that the ODP.NET provider might surface higher level APIs to work with Oracle databases. The dbProviderfactory-approach helped us for our simple “just load some data”-scenario.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2018/06/01/dbproviderfactories-and-odpdotnet-when-even-oracle-can-be-tamed/","RawContent":null},{"Title":"CultureInfo.GetCultureInfo() vs. new CultureInfo() - what's the difference?","PublishedOn":"2018-05-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"the-problem\">The problem</h1>\n\n<p>The problem started with a simple code:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>double.TryParse(\"1'000\", NumberStyles.Any, culture, out _)\n</code></pre></div></div>\n\n<p>Be aware that the given culture was “DE-CH” and the Swiss use the ‘ for the separator for numbers.</p>\n\n<p>Unfortunately the <a href=\"https://www.bk.admin.ch/bk/de/home/dokumentation/sprachen/hilfsmittel-textredaktion/schreibweisungen.html\">Swiss authorities</a> have abandoned the ‘ for currencies, but it is widly used in the industrie and such a number should be parsed or displayed.</p>\n\n<p>Now Microsoft steps in and they use a very similar char in the “DE-CH” region setting:</p>\n\n<ul>\n  <li>The backed in char to separate numbers: ‘ (CharCode: 8217)</li>\n  <li>The obvious choice would be: ‘ (CharCode: 39)</li>\n</ul>\n\n<p><strong>The result of this configuration hell:</strong></p>\n\n<p>If you don’t change the region settings in Windows you can’t parse doubles with this fancy group separator.</p>\n\n<p><strong>Stranger things:</strong></p>\n\n<p>My work machine is running the EN-US version of Windows and my tests where failing because of this madness, but it was even stranger: Some other tests (quite similar to what I did) were OK on our company DE-CH machines.</p>\n\n<h1 id=\"but-why\">But… why?</h1>\n\n<p>After some crazy time I discovered that our company DE-CH machines (and the machines from our customer) were using the “sane” group separator, but my code still didn’t work as expected.</p>\n\n<h1 id=\"root-cause\">Root cause</h1>\n\n<p>The root problem (besides the stupid char choice) was this: I used the “wrong” method to get the “DE-CH” culture in my code.</p>\n\n<p>Let’s try out this demo code:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Program</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">culture</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">CultureInfo</span><span class=\"p\">(</span><span class=\"s\">\"de-CH\"</span><span class=\"p\">);</span>\n\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"de-CH Group Separator\"</span><span class=\"p\">);</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span>\n                <span class=\"s\">$\"</span><span class=\"p\">{</span><span class=\"n\">culture</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">CurrencyGroupSeparator</span><span class=\"p\">}</span><span class=\"s\"> - CharCode: </span><span class=\"p\">{(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">char</span><span class=\"p\">.</span><span class=\"nf\">Parse</span><span class=\"p\">(</span><span class=\"n\">culture</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">CurrencyGroupSeparator</span><span class=\"p\">)}</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span>\n                <span class=\"s\">$\"</span><span class=\"p\">{</span><span class=\"n\">culture</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">NumberGroupSeparator</span><span class=\"p\">}</span><span class=\"s\"> - CharCode: </span><span class=\"p\">{(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">char</span><span class=\"p\">.</span><span class=\"nf\">Parse</span><span class=\"p\">(</span><span class=\"n\">culture</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">NumberGroupSeparator</span><span class=\"p\">)}</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n            <span class=\"kt\">var</span> <span class=\"n\">cultureFromFramework</span> <span class=\"p\">=</span> <span class=\"n\">CultureInfo</span><span class=\"p\">.</span><span class=\"nf\">GetCultureInfo</span><span class=\"p\">(</span><span class=\"s\">\"de-CH\"</span><span class=\"p\">);</span>\n\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"de-CH Group Separator from Framework\"</span><span class=\"p\">);</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span>\n                <span class=\"s\">$\"</span><span class=\"p\">{</span><span class=\"n\">cultureFromFramework</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">CurrencyGroupSeparator</span><span class=\"p\">}</span><span class=\"s\"> - CharCode: </span><span class=\"p\">{(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"kt\">char</span><span class=\"p\">.</span><span class=\"nf\">Parse</span><span class=\"p\">(</span><span class=\"n\">cultureFromFramework</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">CurrencyGroupSeparator</span><span class=\"p\">)}</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span>\n                <span class=\"s\">$\"</span><span class=\"p\">{</span><span class=\"n\">cultureFromFramework</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">NumberGroupSeparator</span><span class=\"p\">}</span><span class=\"s\"> - CharCode: </span><span class=\"p\">{(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"kt\">char</span><span class=\"p\">.</span><span class=\"nf\">Parse</span><span class=\"p\">(</span><span class=\"n\">cultureFromFramework</span><span class=\"p\">.</span><span class=\"n\">NumberFormat</span><span class=\"p\">.</span><span class=\"n\">NumberGroupSeparator</span><span class=\"p\">)}</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The result should be something like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>de-CH Group Separator\n' - CharCode: 8217\n' - CharCode: 8217\nde-CH Group Separator from Framework\n' - CharCode: 8217\n' - CharCode: 8217\n</code></pre></div></div>\n\n<p>Now change the region setting for de-CH and see what happens:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-05-28/regionsettings.png\" alt=\"x\" title=\"Changed region settings\" /></p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>de-CH Group Separator\n' - CharCode: 8217\nX - CharCode: 88\nde-CH Group Separator from Framework\n' - CharCode: 8217\n' - CharCode: 8217\n</code></pre></div></div>\n\n<p>Only the CultureInfo from the first instance got the change!</p>\n\n<h1 id=\"modified-vs-read-only\">Modified vs. read-only</h1>\n\n<p>The problem can be summerized with: <a href=\"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.getcultureinfo(v=vs.110).aspx\">RTFM</a>!</p>\n\n<p>From the MSDN for GetCultureInfo: <em>Retrieves a cached, read-only instance of a culture.</em></p>\n\n<p>The <a href=\"https://msdn.microsoft.com/en-us/library/205h6kwc(v=vs.110).aspx\">“new CultureInfo” constructor</a> will pick up the changed settings from Windows.</p>\n\n<h1 id=\"tldr\">TL;DR:</h1>\n\n<ul>\n  <li>CultureInfo.GetCultureInfo will return a “backed in” culture, which might be very fast, but doesn’t respect user changes.</li>\n  <li>If you need to use the modified values from windows: Use the normal CultureInfo constructor.</li>\n</ul>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2018/05/28/cultureinfo-getculture-vs-new-cultureinfo/","RawContent":null},{"Title":".editorconfig: Sharing a common coding style in a team","PublishedOn":"2018-04-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"sharing-coding-styles--conventions\">Sharing Coding Styles &amp; Conventions</h1>\n\n<p>In a team it is really important to set coding conventions and to use a specific coding style, because it helps to maintain the code - <strong>a lot</strong>. \nOf course has each developer his own “style”, but some rules should be set, otherwise it will end in a mess.</p>\n\n<p>Typical examples for such rules are “Should I use var or not?” or “Are _ still OK for private fields?”. Those questions shouldn’t be answered in a Wiki - it should be part of the daily developer life and should show up in your IDE!</p>\n\n<p><em>Be aware that coding conventions are highly debated. In our team it was important to set a commpon ruleset, even if not everyone is 100% happy with each setting.</em></p>\n\n<h1 id=\"embrace--enforce-the-conventions\">Embrace &amp; enforce the conventions</h1>\n\n<p>In the past this was the most “difficult” aspect: How do we enforce these rules?</p>\n\n<p>Rules in a Wiki are not really helpful, because if you are in your favorite IDE you might not notice rule violations.</p>\n\n<p><a href=\"https://blogs.msdn.microsoft.com/sourceanalysis/\">Stylecop</a> was once a thing in the Visual Studio World, but I’m not sure if this is still alive.</p>\n\n<p>Resharper, a pretty useful Visual Studio plugin, comes with it’s own code convention sharing file, but you will need Resharper enforce and embrace the conventions.</p>\n\n<h1 id=\"introducing-editorconfig\">Introducing: .editorconfig</h1>\n\n<p>Last year Microsoft decided to support the <a href=\"http://editorconfig.org/\">.EditorConfig</a> file format in Visual Studio.</p>\n\n<p>The .editorconfig defines a set of common coding styles (think of tabs or spaces) in a very simple format. Different text ediotors and IDEs support this file, which makes it a good choice if you are using multiple IDEs or working with different setups.</p>\n\n<p>Additionally Microsoft added a couple of <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference\">C# related options</a> for the editorconfig file to support the C# language features.</p>\n\n<p>Each rule can be marked as “Information”, “Warning” or “Error” - which will light up in your IDE.</p>\n\n<h1 id=\"sample\">Sample</h1>\n\n<p>This was a tough choice, but I ended up with the <a href=\"https://github.com/dotnet/coreclr/blob/master/.editorconfig\"><strong>.editorconfig of the CoreCLR</strong></a>. It is more or less the “normal” .NET style guide. I’m not sure if I love the the “var”-setting and the “static private field naming (like s_foobar)”, but I can life with them and it was for us a good starting point (and still is).</p>\n\n<p>The .editorconfig file can be saved at the same level as the .sln file, but you could also use multiple .editorconfig files based on the folder structure. Visual Studio should detect the file and see the rules.</p>\n\n<h1 id=\"benefits\">Benefits</h1>\n\n<p>When everything is ready Visual Studio should populate the results and show does nice light blub:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-04-30/editorconfig.png\" alt=\"x\" title=\".editorconfig in VS\" /></p>\n\n<p><em>Be aware that I have Resharper installed and Resharper has it’s own ruleset, which might be in conflict with the .editorconfig setting. You need to adjust those settings in Resharper. I’m still not 100% sure how good the .editorconfig support is, sometimes I need to overwrite the backed in Resharper settings and sometimes it just works. Maybe this page gives a <a href=\"https://www.jetbrains.com/help/resharper/Using_EditorConfig.html\">hint</a></em>.</p>\n\n<h1 id=\"getting-started\">Getting started?</h1>\n\n<p>Just search for a .editorconfig file (or use something from the Microsoft GitHub repositories) and play with the settings. The setup is easy and it’s just a small text file right next to our code. \nRead more about the customization <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options\">here</a>.</p>\n\n<h1 id=\"related-topic\">Related topic</h1>\n\n<p>If you are looking for a more powerful option to embrace coding standards, you might want to take a look at <a href=\"https://msdn.microsoft.com/en-us/library/mt162308.aspx\"><strong>Roslyn Analysers</strong></a>:</p>\n\n<blockquote>\n  <p>With live, project-based code analyzers in Visual Studio, API authors can ship domain-specific code analysis as part of their NuGet packages. Because these analyzers are powered by the .NET Compiler Platform (code-named “Roslyn”), they can produce warnings in your code as you type even before you’ve finished the line (no more waiting to build your code to discover issues). Analyzers can also surface an automatic code fix through the Visual Studio light bulb prompt to let you clean up your code immediately</p>\n</blockquote>\n\n","Href":"https://blog.codeinside.eu/2018/04/30/editorconfig-sharing-code-style/","RawContent":null},{"Title":"Did you know that you can run ASP.NET Core 2 under the full framework?","PublishedOn":"2018-03-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><em>This post might be obvious for some, but I really struggled a couple of month ago and I’m not sure if a Visual Studio Update fixed the problem for me or if I was just blind…</em></p>\n\n<h1 id=\"the-default-way-running-net-core\">The default way: Running .NET Core</h1>\n\n<p><em>AFAIK the framework dropdown in the normal Visual Studio project template selector (the first window) is not important  and doesn’t matter anyway for .NET Core related projects.</em></p>\n\n<p>When you create a new ASP.NET Core application you will see something like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-03-31/default.png\" alt=\"x\" title=\"Default Framework selection\" /></p>\n\n<p>The important part for the framework selection can be found in the upper left corner: .NET Core is currently selected.</p>\n\n<p>When you continue your .csproj file should show something like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;Project</span> <span class=\"na\">Sdk=</span><span class=\"s\">\"Microsoft.NET.Sdk.Web\"</span><span class=\"nt\">&gt;</span>\n\n  <span class=\"nt\">&lt;PropertyGroup&gt;</span>\n    <span class=\"nt\">&lt;TargetFramework&gt;</span>netcoreapp2.0<span class=\"nt\">&lt;/TargetFramework&gt;</span>\n  <span class=\"nt\">&lt;/PropertyGroup&gt;</span>\n\n  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore.All\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.5\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n\n  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;DotNetCliToolReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.2\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n\n<span class=\"nt\">&lt;/Project&gt;</span>\n</code></pre></div></div>\n\n<h1 id=\"running-the-full-framework\">Running the full framework:</h1>\n\n<p>I had some trouble to find the option, but it’s really obvious. You just have to adjust the selected framework in the second window:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2018-03-31/full.png\" alt=\"x\" title=\".NET Framework selected\" /></p>\n\n<p>After that your .csproj has the needed configuration.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;Project</span> <span class=\"na\">Sdk=</span><span class=\"s\">\"Microsoft.NET.Sdk.Web\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;PropertyGroup&gt;</span>\n    <span class=\"nt\">&lt;TargetFramework&gt;</span>net461<span class=\"nt\">&lt;/TargetFramework&gt;</span>\n  <span class=\"nt\">&lt;/PropertyGroup&gt;</span>\n  \n  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.1\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore.Mvc\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.2\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore.Mvc.Razor.ViewCompilation\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.2\"</span> <span class=\"na\">PrivateAssets=</span><span class=\"s\">\"All\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore.StaticFiles\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.1\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.VisualStudio.Web.BrowserLink\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.1\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n  \n  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;DotNetCliToolReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.0.2\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n<span class=\"nt\">&lt;/Project&gt;</span>\n</code></pre></div></div>\n\n<p>The biggest change: When you run under the full .NET Framework you can’t use the “All”-Meta-Package, because with version 2.0 the package is still .NET Core only, and need to point to each package manually.</p>\n\n<p>Easy, right?</p>\n\n<p>Be aware: Maybe with ASP.NET Core 2.1 the Meta-Package story with the full framework <a href=\"https://github.com/aspnet/Announcements/issues/287\">might get easier</a>.</p>\n\n<p><em>I’m still not sure why I struggled to find this option… Hope this helps!</em></p>\n\n","Href":"https://blog.codeinside.eu/2018/03/31/running-aspnet-core-2-under-the-full-dotnet-framework/","RawContent":null},{"Title":"Windows Fall Creators Update 1709 and Docker Windows Containers","PublishedOn":"2018-02-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h1 id=\"who-shrunk-my-windows-docker-image\">Who shrunk my Windows Docker image?</h1>\n\n<p>We started to package our ASP.NET/WCF/Full-.NET Framework based web app into Windows Containers, which we then publish to the Docker Hub.</p>\n\n<p>Someday we discovered that one of our new build machines produced Windows Containers only <strong>half the size</strong>: \nInstead of a 8GB Docker image we only got a 4GB Docker image. Yeah, right?</p>\n\n<h1 id=\"the-problem-with-windows-server-2016\">The problem with Windows Server 2016</h1>\n\n<p>I was able to run the 4GB Docker image on my development machine without any problems and I thought that this is maybe a great new feature (it is… but!). My boss then told my that he was unable to run this on our <strong>Windows Server 2016</strong>.</p>\n\n<h1 id=\"the-issue-windows-10-fall-creators-update\">The issue: Windows 10 Fall Creators Update</h1>\n\n<p>After some googling around we found the problem: Our build machine was a <strong>Windows 10 OS with the most recent “Fall Creators Update” (v1709)</strong> (which was a bad idea from the beginning, because if you want to run Docker as a Service you will need a Windows Server!). The older build machine, which produced the much larger Docker image, was running with the normal Creators Update from March(?).</p>\n\n<p>Docker resolves the base images for Windows like this:</p>\n\n<ul>\n  <li>If you pull the ASP.NET Docker image from a Windows 10 Client OS <strong>with the Fall Creators Update</strong> you will get this <a href=\"https://github.com/Microsoft/aspnet-docker/blob/master/4.7.1-windowsservercore-1709/runtime/Dockerfile\">4.7.1-windowsservercore-1709 image</a></li>\n  <li>If you pull it from a Windows Server 2016 or a older Windows 10 Client OS you will get this <a href=\"https://github.com/Microsoft/aspnet-docker/blob/master/4.7.1-windowsservercore-ltsc2016/runtime/Dockerfile\">4.7.1-windowsservercore-ltsc2016 image</a></li>\n</ul>\n\n<h1 id=\"compatibility-issue\">Compatibility issue</h1>\n\n<p>As it turns out: You can’t run the smaller Docker images on Windows Server 2016. Currently it is only possible to do it via the preview <a href=\"https://blogs.technet.microsoft.com/windowsserver/2017/10/26/faq-on-windows-server-version-1709-and-semi-annual-channel/\">“Windows Server, version 1709”</a> or on the Windows 10 Client OS.</p>\n\n<p>Oh… and the new Windows Server is not a simple update to Windows Server 2016, instead it is a completely new version. Thanks Microsoft.</p>\n\n<h1 id=\"workaround\">Workaround</h1>\n\n<p>Because we need to run our images on Windows Server 2016, we just target the LTSC2016 base image, which will produce 8GB Docker images (which sucks, but works for us).</p>\n\n<h2 id=\"further-links\">Further Links:</h2>\n\n<p>This post could also be in the RTFM-category, because there are some notes on the Docker page available, but it was quite easy to overread ;)</p>\n\n<ul>\n  <li><a href=\"https://docs.docker.com/install/windows/ee-preview/\">Preview Docker for Windows Server 1709 and Windows 10 Fall Creators Update</a></li>\n  <li><a href=\"https://blogs.technet.microsoft.com/windowsserver/2017/10/26/faq-on-windows-server-version-1709-and-semi-annual-channel/\">FAQ on Windows Server, version 1709 and Semi-Annual Channel</a></li>\n  <li><a href=\"https://stefanscherer.github.io/docker-on-windows-server-1709/\">Stefan Scherer has some good information on this topic as well</a></li>\n</ul>\n","Href":"https://blog.codeinside.eu/2018/02/27/windows-fall-creators-update-1709-docker-windows-containers/","RawContent":null},{"Title":"WCF Global Fault Contracts","PublishedOn":"2018-01-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>If you are still using WCF you might have stumbled upon this problem: WCF allows you to throw certain Faults in your operation, but unfortunatly it is a bit awkward to configure if you want “Global Fault Contracts”. With this solution here it should be pretty easy to get “Global Faults”:</p>\n\n<h1 id=\"define-the-fault-on-the-server-side\">Define the Fault on the Server Side:</h1>\n\n<p>Let’s say we want to throw the following fault in all our operations:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[DataContract]\npublic class FoobarFault\n{\n\n}\n</code></pre></div></div>\n\n<h1 id=\"register-the-fault\">Register the Fault</h1>\n\n<p>The tricky part in WCF is to “configure” WCF that it will populate the fault. You can do this manually via the [FaultContract-Attribute] on each operation, but if you are looking for a <strong>global WCF fault</strong> configuration, you need to apply it as a contract behavior like this:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">[AttributeUsage(AttributeTargets.Interface, AllowMultiple = false, Inherited = true)]</span>\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">GlobalFaultsAttribute</span> <span class=\"p\">:</span> <span class=\"n\">Attribute</span><span class=\"p\">,</span> <span class=\"n\">IContractBehavior</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// this is a list of our global fault detail classes.</span>\n    <span class=\"k\">static</span> <span class=\"n\">Type</span><span class=\"p\">[]</span> <span class=\"n\">Faults</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Type</span><span class=\"p\">[]</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"n\">FoobarFault</span><span class=\"p\">),</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">AddBindingParameters</span><span class=\"p\">(</span>\n        <span class=\"n\">ContractDescription</span> <span class=\"n\">contractDescription</span><span class=\"p\">,</span>\n        <span class=\"n\">ServiceEndpoint</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span>\n        <span class=\"n\">BindingParameterCollection</span> <span class=\"n\">bindingParameters</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">ApplyClientBehavior</span><span class=\"p\">(</span>\n        <span class=\"n\">ContractDescription</span> <span class=\"n\">contractDescription</span><span class=\"p\">,</span>\n        <span class=\"n\">ServiceEndpoint</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span>\n        <span class=\"n\">ClientRuntime</span> <span class=\"n\">clientRuntime</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">ApplyDispatchBehavior</span><span class=\"p\">(</span>\n        <span class=\"n\">ContractDescription</span> <span class=\"n\">contractDescription</span><span class=\"p\">,</span>\n        <span class=\"n\">ServiceEndpoint</span> <span class=\"n\">endpoint</span><span class=\"p\">,</span>\n        <span class=\"n\">DispatchRuntime</span> <span class=\"n\">dispatchRuntime</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Validate</span><span class=\"p\">(</span>\n        <span class=\"n\">ContractDescription</span> <span class=\"n\">contractDescription</span><span class=\"p\">,</span>\n        <span class=\"n\">ServiceEndpoint</span> <span class=\"n\">endpoint</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"n\">OperationDescription</span> <span class=\"n\">op</span> <span class=\"k\">in</span> <span class=\"n\">contractDescription</span><span class=\"p\">.</span><span class=\"n\">Operations</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"n\">Type</span> <span class=\"n\">fault</span> <span class=\"k\">in</span> <span class=\"n\">Faults</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">op</span><span class=\"p\">.</span><span class=\"n\">Faults</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"nf\">MakeFault</span><span class=\"p\">(</span><span class=\"n\">fault</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"n\">FaultDescription</span> <span class=\"nf\">MakeFault</span><span class=\"p\">(</span><span class=\"n\">Type</span> <span class=\"n\">detailType</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">string</span> <span class=\"n\">action</span> <span class=\"p\">=</span> <span class=\"n\">detailType</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">;</span>\n        <span class=\"n\">DescriptionAttribute</span> <span class=\"n\">description</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"n\">DescriptionAttribute</span><span class=\"p\">)</span>\n            <span class=\"n\">Attribute</span><span class=\"p\">.</span><span class=\"nf\">GetCustomAttribute</span><span class=\"p\">(</span><span class=\"n\">detailType</span><span class=\"p\">,</span> <span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"n\">DescriptionAttribute</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">description</span> <span class=\"p\">!=</span> <span class=\"k\">null</span><span class=\"p\">)</span>\n            <span class=\"n\">action</span> <span class=\"p\">=</span> <span class=\"n\">description</span><span class=\"p\">.</span><span class=\"n\">Description</span><span class=\"p\">;</span>\n        <span class=\"n\">FaultDescription</span> <span class=\"n\">fd</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">FaultDescription</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">);</span>\n        <span class=\"n\">fd</span><span class=\"p\">.</span><span class=\"n\">DetailType</span> <span class=\"p\">=</span> <span class=\"n\">detailType</span><span class=\"p\">;</span>\n        <span class=\"n\">fd</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"p\">=</span> <span class=\"n\">detailType</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">fd</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\t\n</code></pre></div></div>\n\n<p>Now we can apply this ContractBehavior in the Service just like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[ServiceBehavior(...), GlobalFaults]\npublic class FoobarService\n...\n</code></pre></div></div>\n\n<p>To use our Fault, just throw it as a FaultException:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>throw new FaultException&lt;FoobarFault&gt;(new FoobarFault(), \"Foobar happend!\");\n</code></pre></div></div>\n\n<h1 id=\"client-side\">Client Side</h1>\n\n<p>On the client side you should now be able to catch this exception just like this:</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">try</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"p\">...</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">Exception</span> <span class=\"n\">ex</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ex</span> <span class=\"k\">is</span> <span class=\"n\">FaultException</span> <span class=\"n\">faultException</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">faultException</span><span class=\"p\">.</span><span class=\"n\">Action</span> <span class=\"p\">==</span> <span class=\"k\">nameof</span><span class=\"p\">(</span><span class=\"n\">FoobarFault</span><span class=\"p\">))</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"p\">...</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Hope this helps!</p>\n\n<p>(This old topic was still on my “To-blog” list, even if WCF is quite old, maybe someone is looking for something like this)</p>\n\n<h2 id=\"further-links\">Further Links:</h2>\n\n<ul>\n  <li><a href=\"http://dkturner.blogspot.ch/2007/11/wcf-contract-level-faultcontract.html\">WCF: Contract-level FaultContract</a> The code above was more or less adopted from his great blogpost!</li>\n</ul>\n","Href":"https://blog.codeinside.eu/2018/01/31/wcf-faultcontracts/","RawContent":null},{"Title":"First steps to enable login with Microsoft or Azure AD account for your application","PublishedOn":"2017-12-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>It is quite common these days to “Login with Facebook/Google/Twitter”. Of course Microsoft has something similar.\nIf I remember it correctly the first version was called “Live SDK” with the possibility to login with your personal Microsoft Account.</p>\n\n<p>With Office 365 and the introduction of Azure AD we were able to build an application to sign-in with a personal account via the “Live SDK” and organizational account via “Azure AD”.</p>\n\n<p>However: The developer and end user UX was far way from perfect, because the implementation for each account type was different and for the user it was not clear which one to choose.</p>\n\n<h1 id=\"microsoft-graph--azure-ad-20\">Microsoft Graph &amp; Azure AD 2.0</h1>\n\n<p>Fast forward to the right way: Use the <strong><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-app-registration\">Azure AD 2.0 endpoint</a></strong>.</p>\n\n<h2 id=\"step-1-register-your-own-application\">Step 1: Register your own application</h2>\n\n<p>You just need to register your own application in the <strong><a href=\"https://apps.dev.microsoft.com\">Application Registration Portal</a></strong>. The registration itself is a typical OAuth-application registration and you get a ClientId and Secret for your application.</p>\n\n<p>Warning: If you have “older” LiveSDK application registered under your account you need to choose <strong>Converged Applications</strong>. LiveSDK applications are more or less legacy and I wouldn’t use them anymore.</p>\n\n<h2 id=\"step-2-choose-a-platform\">Step 2: Choose a platform</h2>\n\n<p>Now you need to choose your application platform. If you want to enable the sign-in stuff for your web application you need to choose “Web” and insert the redirect URL. After the sign-in process the token will be send to this URL.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-12-31/platforms.png\" alt=\"x\" title=\"Platforms\" /></p>\n\n<h2 id=\"step-3-choose-microsoft-graph-permissions-scopes\">Step 3: Choose Microsoft Graph Permissions (Scopes)</h2>\n\n<p>In the last step you need to select what permissions your applications need. A first-time user needs to accept your permission requests. The “Microsoft Graph” is a collection of APIs that works for personal Microsoft accounts <strong>and</strong> Office 365/Azure AD account.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-12-31/platforms.png\" alt=\"x\" title=\"Platforms\" /></p>\n\n<p>The “User.Read” permission is the most basic permission that would allow to sign-in, but if you want to access other APIs as well you just need to add those permissions to your application:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-12-31/scopes.png\" alt=\"x\" title=\"Scopes\" /></p>\n\n<h2 id=\"finish\">Finish</h2>\n\n<p>After the application registration and the selection of the needed permissions you are ready to go. You can even generate a sample application on the portal. For a <strong>quick start</strong> check this <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-app-registration#build-a-quick-start-app\">page</a></p>\n\n<h1 id=\"microsoft-graph-explorer\">Microsoft Graph Explorer</h1>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-12-31/graphexplorer.png\" alt=\"x\" title=\"Microsoft Graph Explorer\" /></p>\n\n<p>As I already said: The Graph is the center of Microsofts Cloud Data and the easiest way to play around with the different scopes and possibilities is with the <strong><a href=\"https://developer.microsoft.com/en-us/graph/graph-explorer\">Microsoft Graph Explorer</a></strong>.</p>\n\n<p>Hope this helps.</p>\n\n","Href":"https://blog.codeinside.eu/2017/12/31/first-steps-to-login-with-your-ms-or-azure-ad-account/","RawContent":null},{"Title":"Signing with SignTool.exe - don't forget the timestamp!","PublishedOn":"2017-11-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>If you currently not touching signtool.exe at all or have nothing to do with “signing” you can just pass this blogpost, because this is more or less a stupid “Today I learned I did a mistake”-blogpost.</p>\n\n<h1 id=\"signing\">Signing?</h1>\n\n<p>We use authenticode code signing for our software just to prove that the installer is from us and “safe to use”, otherwise you might see a big warning from Windows that the application is from an “unknown publisher”:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-11-30/uac.png\" alt=\"x\" title=\"UAC\" /></p>\n\n<p>To avoid this, you need a code signing certificate and need to sign your program (e.g. the installer and the .exe)</p>\n\n<h1 id=\"the-problem\">The problem…</h1>\n\n<p>We are doing this code signing since the first version of our application. Last year we needed to buy a new certificate because the first code signing certificate was getting stale. Sadly, after the first certificate was expired we got a call from a customer who recently tried to install our software and the installer was signed with the “old” certificate. The result was the big “Warning”-screen from above.</p>\n\n<p>I checked the file and compared it to other installers (with expired certificates) and noticed that our signature didn’t had a timestamp:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-11-30/properties.png\" alt=\"x\" title=\"Properties\" /></p>\n\n<h1 id=\"the-solution\">The solution</h1>\n\n<p>I stumbled upon <a href=\"https://blogs.msdn.microsoft.com/ieinternals/2011/03/22/everything-you-need-to-know-about-authenticode-code-signing/\">this great blogpost about authenticode code signing</a> and the timestamp was indeed important:</p>\n\n<p><em>When signing your code, you have the opportunity to timestamp your code; you should definitely do this. Time-stamping adds a cryptographically-verifiable timestamp to your signature, proving when the code was signed. If you do not timestamp your code, the signature will be treated as invalid upon the expiration of your digital certificate. Since it would probably be cumbersome to re-sign every package you’ve shipped when your certificate expires, you should take advantage of time-stamping. A signed, time-stamped package remains valid indefinitely, so long as the timestamp marks the package as having been signed during the validity period of the certificate.</em></p>\n\n<p>Time-stamping itself is pretty easy and only one parameter was missing all the time… now we invoke <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/tools/signtool-exe\">Signtool.exe</a> like this and we have a digitial signature <strong>with</strong> a timestamp:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>signtool.exe sign /tr http://timestamp.digicert.com /sm /n \"Subject...\" /d \"Description...\" file.msi\n</code></pre></div></div>\n\n<p>Remarks:</p>\n\n<ul>\n  <li>Our code signing cert is from Digicert and they provide the timestamp URL.</li>\n  <li>SignTool.exe is part of the Windows SDK and currently is in the ClickOnce folder (e.g. C:\\Program Files (x86)\\Microsoft SDKs\\ClickOnce\\SignTool)</li>\n</ul>\n\n<p>Hope this helps.</p>\n\n","Href":"https://blog.codeinside.eu/2017/11/30/signing-with-signtool-dont-forget-the-timestamp/","RawContent":null},{"Title":"Introducing Electron.NET - building Electron Desktop Apps with ASP.NET Core","PublishedOn":"2017-10-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-10-31/electron.net-logo.png\" alt=\"x\" title=\"Electron.NET\" /></p>\n\n<p>The last couple of weeks I worked with my buddy <a href=\"http://www.cross-platform-blog.com/\">Gregor Biswanger</a> on a new project called <strong>“<a href=\"https://github.com/ElectronNET/Electron.NET\">Electron.NET</a>“</strong>.</p>\n\n<p>As you might already guess: It is some sort of bridge between the well known <a href=\"https://electron.atom.io/\">Electron</a> and .NET.</p>\n\n<p><em>If you don’t know what Electron is: It helps to build desktop apps written in HTML/CSS/Javascript</em></p>\n\n<h1 id=\"the-idea\">The idea</h1>\n\n<p>Gregor asked me a while ago if it is possible to build desktop apps with ASP.NET Core (or .NET Core in general) and - indeed - there are some ideas how to make it, but unfortunatly there is no “official” UI stack available for .NET Core. \nAfter a little chat we agreed that the best bet would be to use Electron as is and somehow “embed” ASP.NET Core in it.</p>\n\n<p>I went to bed, but Gregor was keen on to build a prototyp and he did it: He was able to launch the ASP.NET Core application inside the electron app and invoke some Electron APIs from the .NET World.</p>\n\n<p>First steps done, yeah! In the following weeks Gregor was able to “bridge” most Electron APIs and I could help him with the tooling via our dotnet-extension.</p>\n\n<h1 id=\"overview\">Overview</h1>\n\n<p>The basic functionality is not too complex:</p>\n\n<ul>\n  <li>We ship a “standard” (more or less blank) Electron app</li>\n  <li>Inside the Electron part two free ports are searched:\n    <ul>\n      <li>The first free port is used inside the Electron app itself</li>\n      <li>The second free port is used for the ASP.NET Core process</li>\n    </ul>\n  </li>\n  <li>The app launches the .NET Core process with ASP.NET Core port (e.g. localhost:8002) and injects the first port as parameter</li>\n  <li>Now we have a Socket.IO based linked between the launched ASP.NET Core app and the Electron app itself - this is our communication bridge!</li>\n</ul>\n\n<p>At this point you can write your Standard ASP.NET Core Code and can communicate via our Electron.API wrapper to the Electron app.</p>\n\n<p>Gregor did a <strong><a href=\"http://www.cross-platform-blog.com/electron.net/electron.net-musicplayer-app-with-asp.net-core\">fabulous blogpost with a great example</a></strong>.</p>\n\n<h1 id=\"interested-this-way\">Interested? This way!</h1>\n\n<p>If you are interested, maybe take a look at the <strong><a href=\"https://github.com/ElectronNET\">ElectronNET-Org on GitHub</a></strong>. The complete code is OSS and there are two demo repositories.</p>\n\n<h1 id=\"no-way---this-is-a-stupid-idea\">No way - this is a stupid idea!</h1>\n\n<p>The last days were quite intersting. We got some nice comments about the project and (of course) there were some critics.</p>\n\n<p>As far as I know the current “this is bad, because… “-list is like this:</p>\n\n<ul>\n  <li>We still need node.js and Electron.NET is just a wrapper around Electron: Yes, it is.</li>\n  <li>Perf will suck: Well… to be honest - the current startup time does really suck, because we not only launch the Electron stuff, but we also need to start the .NET Core based WebHost - maybe we will find a solution</li>\n  <li>Starting a web server inside the app is bad on multiple levels because of security and perf: I agree, there are some <a href=\"https://github.com/ElectronNET/Electron.NET/issues/22\">ideas how to fix it</a>, but this might take some time.</li>\n</ul>\n\n<p>There are lots of issues open and the project is pretty young, maybe we will find a solution for the above problems, maybe not.</p>\n\n<h1 id=\"final-thoughts\">Final thoughts</h1>\n\n<p>The interesting point for me is, that we seem to hit a nerf with this project: There is demand to write X-Plat desktop applications.</p>\n\n<p>We are looking for feedback - please share your opinion on the <a href=\"https://github.com/ElectronNET/Electron.NET\">ElectronNET-GitHub-Repo</a> or try it out :)</p>\n\n<p><em>Desktop is dead, long live the desktop!</em></p>\n\n","Href":"https://blog.codeinside.eu/2017/10/31/introducing-electrondotnet/","RawContent":null},{"Title":"dnSpy - a OSS IL decompiler and debugger","PublishedOn":"2017-09-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>My colleague was fighting against a nasty bug, that only occures on one machine. Unfortunatly this machine was not a development machine (no VS installed) and we didn’t want to mess with VS remote debugging, because (AFAIK) his would need some additional setup but we were not allowed to install anything.</p>\n\n<p>Soooo… he searched around and found this:</p>\n\n<h2 id=\"dnspy---a-net-assembly-editor-decompiler-and-debugger\">dnSpy - a .NET assembly editor, decompiler, and debugger</h2>\n\n<p>The title contains the major points. It is a decompiler, like IL Spy, but addionaly it has a super nice debugger and it looks like a small Visual Studio.</p>\n\n<p>Some pictures how I just decompile Paint.NET and attach the debugger:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy.png\" alt=\"x\" title=\"dnSpy without debugging\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy_start_debug.png\" alt=\"x\" title=\"Start debugging\" /></p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-09-30/dnspy_debugging.png\" alt=\"x\" title=\"Debugging\" /></p>\n\n<p>I think this is just awesome and it helped my colleague alot.</p>\n\n<h2 id=\"oss--free\">OSS &amp; Free</h2>\n\n<p>The complete project is hosted <strong><a href=\"https://github.com/0xd4d/dnSpy\">on GitHub</a></strong> and is <strong>“Open Source (GPLv3) and Free Forever”</strong></p>\n\n<p>Checkout the GitHub project page - it contains a lot more information. The tool itself was just 18mb zipped and can be run everywhere.</p>\n\n<h2 id=\"its-a-decompiler\">Its a decompiler!</h2>\n\n<p>And just to make sure you keep this in mind: The debugging works with every .NET application (at least in theory), because it decompiles the .NET IL language to C#. It is not a 1:1 debugger, but maybe it can help you.</p>\n\n<p><strong><a href=\"https://github.com/0xd4d/dnSpy\">Check out the dnSpy GitHub Site</a></strong></p>\n\n","Href":"https://blog.codeinside.eu/2017/09/30/dnspy-a-oss-il-decompiler-and-debugger/","RawContent":null},{"Title":"IdentityServer3 with WindowsAuthentication with ASP.NET WebApi & ASP.NET & WPF App","PublishedOn":"2017-08-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><strong>Please note</strong>: In my sample and in this blogpost I cover IdentityServer 3, because last year when I was working on the sample and our real implementation IdentityServer4 (a rewrite of IdentityServer 3) was in beta. My guess is, that most stuff should still apply even if you are using IdentityServer4, but I didn’t test it.</p>\n\n<p>Also: I’m not a security expert - this might be all wrong, but currently this more or less works for us. If you find something strange, please let me know!</p>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>The sample consists of the following projects:</p>\n\n<p><strong>IdentityTest.IdServerHost:</strong> That’s the central IdentityServer in our solution. It contains all “clients” &amp; “identityprovider” settings.\n<strong>IdentityTest.WinAuth:</strong> This is our Windows-Authentication provider. Because of the nature of WindowsAuth it needs to be an extra project. This needs to be hosted via IIS (or IIS Express) with Windows authentication enabled. The ASP.NET app acts as a bridge and will convert the Windows-Auth ticket into a SAML token, which can be integrated into the IdentityServer. It is more or less like a mini-ADFS.\n<strong>IdentityTest.WebApp:</strong> The WebApp itself can be used via browser and also hosts a WebApi. The WebApi is secured by the IdentityServer and secured pages will trigger the authentication against the IdServerHost. \n<strong>IdentityTest.WpfClient:</strong> With the WPFApp we want to get a AccessToken via a WebBrowser-Control from the IdServerHost and call the WebApi that is hosted and secured by the very same IdServerHost.</p>\n\n<p>The IdentityServer team did a great job and have a large <strong><a href=\"https://github.com/IdentityServer/IdentityServer3.Samples\">sample repository on GitHub</a></strong>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-08-30/overview.png\" alt=\"x\" title=\"Overview\" /></p>\n\n<p>I will talk about each part in my sample. Now lets beginn with…</p>\n\n<h3 id=\"the-idserverhost-project\">The ‘IdServerHost’ Project</h3>\n\n<p>The IdentityServerHost is a plain ASP.NET application. To include the IdentityServer3 you need to add <a href=\"https://www.nuget.org/packages/IdentityServer3/\">IdentityServer3 NuGet-Package</a>.</p>\n\n<p>The code is more or less identical with the <a href=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/WebHost%20(minimal)/WebHost\">Minimal-Sample from the IdentityServer3 team</a>, but I <strong>disabled the SSL</strong> requirements for my demo.</p>\n\n<p>Be aware: The IdentityServer use a certificate to sign the tokens, but this has nothing to do with the SSL certificate. This was a hard learning curve for me and IISExpress or something messed things up. In the end I disabled the SSL requirements <strong>for my development enviroment</strong> and could start to understand how each part is communicating with each other. \nThe signing certificate in the sample is the sample .pfx file from the offical samples.</p>\n\n<p>Remember: <strong>DO USE SSL IN PRODUCTION.</strong> Oh - and use the Cert-Store for the signing certificate as well!</p>\n\n<p><strong>Cert-Handling in IdentityServer in a nutshell</strong>: Do use SSL in production with a valid SSL certificate and setup another certificate that the IdentityServer will use to sign the tokens.</p>\n\n<p>Besides the SSL stuff the most important stuff might be the <a href=\"https://github.com/Code-Inside/Samples/blob/master/2016/IdentityTest/IdentityTest.IdServerHost/Configuration/Clients.cs\">client-registration</a> and the <a href=\"https://github.com/Code-Inside/Samples/blob/79fda88113a4736a465ab275fe0745dfc6aefa9a/2016/IdentityTest/IdentityTest.IdServerHost/Startup.cs#L45-L65\">identity-provider-registration</a>.</p>\n\n<p>The IdentityServer - as the auth-central - knows each ‘client’ and each ‘identity-provider’. Make sure all URLs are correct otherwise you will end up with errors. Even a slightly difference like ‘http://test.com/’ and ‘http://test.com’ (without the trailing slash at the end) will result in strange errors.</p>\n\n<h3 id=\"the-winauth-project\">The ‘WinAuth’ Project</h3>\n\n<p>As already written this is our Windows-Authentication provider. Of course, it is only needed if you need WinAuth. If you want to use any other provider, like a Google/Microsoft/Facebook/Twitter-Login, then this is not needed.\nIt is a bridge to the enterprise world and works quite well.</p>\n\n<p>In the project I just reference the <a href=\"https://www.nuget.org/packages/IdentityServer.WindowsAuthentication/\">IdentityServer.WindowsAuthentication</a> NuGet-Package and I’m nearly done. \nIn the config I need to insert the URL of my IdentityServer host - those two parts needs to know each other and they will exchange public keys so they can trust each other.</p>\n\n<p>For this trust-relationship the WinAuth provider has its own certificate. Actually you can reuse the same cert from the IdentityServerHost but I’m not sure if this is super secure, but it works.</p>\n\n<p>The code and sample can also be found on the offical <a href=\"https://github.com/IdentityServer/WindowsAuthentication\">GitHub repo</a></p>\n\n<h3 id=\"the-webapp-project\">The ‘WebApp’ Project</h3>\n\n<p>This project is a regular ASP.NET MVC project with WebApi 2 included. Nothing ASP.NET Core related, but the actual doing would be pretty similar.</p>\n\n<p>On this page there are two ways to interact:</p>\n\n<ul>\n  <li>Via Browser</li>\n  <li>Via the WebApi</li>\n</ul>\n\n<p><strong>Browser Auth via OpenIdConnect Auth:</strong></p>\n\n<p>The NuGet Package <a href=\"https://www.nuget.org/packages/Microsoft.Owin.Security.OpenIdConnect\">Microsoft.Owin.Security.OpenIdConnect</a> does the heavy lifting for us. In combination with the <a href=\"https://www.nuget.org/packages/Microsoft.Owin.Security.Cookies/\">Microsoft.Owin.Security.Cookies</a> NuGet package the authentication will kick in when someone access a [Authorize] marked Controller. The Cookie-Auth will preserve the identity information.</p>\n\n<p><strong>WebApi Auth:</strong></p>\n\n<p>To use the protected WebApi with any HTTP client the request must have a JWT bearer token. The implementation is super simple with this NuGet package <a href=\"https://www.nuget.org/packages/IdentityServer3.AccessTokenValidation/\">IdentityServer3.AccessTokenValidation</a>.</p>\n\n<p><strong>Setup of both auth options:</strong></p>\n\n<p>The setup is quite easy with the NuGet packages:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseIdentityServerBearerTokenAuthentication(new IdentityServerBearerTokenAuthenticationOptions\n        {\n            Authority = ConfigurationManager.AppSettings[\"Security.Authority\"],\n            RequiredScopes = new[] { \"openid\" }\n        });\n\n        app.UseCookieAuthentication(new CookieAuthenticationOptions()\n        {\n            AuthenticationType = \"cookies\",\n        });\n\n        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions()\n        {\n            AuthenticationType = \"oidc\",\n            SignInAsAuthenticationType = \"cookies\",\n            Authority = ConfigurationManager.AppSettings[\"Security.Authority\"],\n            ClientId = \"webapp\",\n            RedirectUri = ConfigurationManager.AppSettings[\"Security.RedirectUri\"],\n            ResponseType = \"id_token\",\n            Scope = \"openid all_claims\"\n        });\n    }\n}\n</code></pre></div></div>\n\n<p>It is important to use the correct “clientIds” and URLs as configured in the IdentityServer, otherwise you will receive errors from the IdentityServer.</p>\n\n<h3 id=\"the-wpfclient-project\">The ‘WpfClient’ Project</h3>\n\n<p>This project is a small version of the original <a href=\"https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/WpfOidcClientPop\">WpfOidcClientPop</a> sample. The idea behind this sample is that a user can sign in with his regular account.</p>\n\n<p><strong>Auth via browser:</strong></p>\n\n<p>Instead of a Loginname/Password form rendered from the WPF app itself the authentication is delegated to a embedded browser control. Another option is to delegate it to the “real” installed browser, but this is another topic. \nThe Microsoft Account login in Visual Studio is made that way or think of any popular “Facebook-Login” mobile app on your phone: The auth-process is basically a typical Web signin.</p>\n\n<p>This scenario is also convered as a offical <a href=\"https://tools.ietf.org/wg/oauth/draft-ietf-oauth-native-apps/\">OpenID Connect specification</a>. In WPF your best and easiest choice would be the <a href=\"https://github.com/IdentityModel/IdentityModel.OidcClient2\">IdentityModel.OidcClient2</a> package.</p>\n\n<p><strong>Auth “Steps”</strong></p>\n\n<p>The first step in the sample project is to aquire a access token from the IdentityServer. The actual implementation is thanks to the OidcClient quite simple as you can see <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L44-L49\">here</a>.</p>\n\n<p>The OidcClient will try to get the needed accesstoken in the silent mode first (this can be configured) and if this fails a embedded browser will be rendered and the user needs to sign in there. After a successful signin you will get a <strong>accesstoken and refreshtoken</strong>.</p>\n\n<p><strong>Sample note:</strong> If you try this on your local machine the auth-window should not appear, because it will just do a “silent” windows auth login.</p>\n\n<p><strong>Multiple IdentityProvider:</strong> If you configure multiple identity provider, a simple designed identity selection will appear in the embedded browser window.</p>\n\n<p>After the intial sign in you can regenerate new accesstokens via the refreshtoken.</p>\n\n<p>With the accesstoken <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L95-L99\">we craft a HTTP request</a> to our beloved WebApi and write use the token in the authorization header and finally we are done.</p>\n\n<p><strong>Things to consider:</strong></p>\n\n<p>It is important <a href=\"https://github.com/Code-Inside/Samples/blob/c5d42f9b3ca61a6171eed684c57d94cac2297bf2/2016/IdentityTest/IdentityTest.WpfClient/MainWindow.xaml.cs#L77-L83\">to setup the OIDCClient</a> the correct way with the values that you specified in your IdentityServer configuration. Also you should read about OpenID scopes because they are linked to the actual result. Without the correct scope you might not get a accesstoken or refreshtoken.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-08-30/wpf.png\" alt=\"x\" title=\"wpf\" /></p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<p>With these 4 projects we have a quite mighty solution created. We can still use Windows Auth for enterprise needs, we can protect WebApis and WebPages via a central Identity solution and also use “native” apps. The IdentityServer itself has a wide range of configuration possibilities.</p>\n\n<p>If you start doing something in this direction I would point you to the <a href=\"https://github.com/IdentityServer/IdentityServer4\">IdentityServer4</a>, because new is always better, right?</p>\n\n<h1 id=\"github-link\">GitHub Link</h1>\n\n<p>The full sample can be found on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/IdentityTest\">GitHub</a>.</p>\n\n<p>Hope this helps.</p>\n\n","Href":"https://blog.codeinside.eu/2017/08/30/identityserver3-webapi-webapp-wpfapp-ohmy/","RawContent":null},{"Title":"How to convert .crt & .key files to a .pfx","PublishedOn":"2017-07-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The requirements are simple: You will need the .cer with the corresponding .key file and need to download <a href=\"https://wiki.openssl.org/index.php/Binaries\">OpenSSL</a>.</p>\n\n<p>If you are using Windows <strong>without the awesome Linux Subsystem</strong>, take the latest pre-compiled version <strong>for Windows</strong> <a href=\"https://indy.fulgan.com/SSL/\">from this site</a>.</p>\n\n<p>Otherwise with <strong>Bash on Windows</strong> you can just use OpenSSL via its “native” environment. <em>Thanks for the hint @kapsiR</em></p>\n\n<p>After the download run this command:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>   openssl pkcs12 -export -out domain.name.pfx -inkey domain.name.key -in domain.name.crt\n</code></pre></div></div>\n\n<p>This will create a <strong>domain.name.pfx</strong>. As far as I remember you will be asked to set a password for the generated private .pfx part.</p>\n\n<p>If you are confused with .pfx, .cer, .crt take a look at this <a href=\"http://www.gtopia.org/blog/2010/02/der-vs-crt-vs-cer-vs-pem-certificates/\">nice description blogpost</a>.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2017/07/31/how-to-convert-crt-and-key-to-pfx/","RawContent":null},{"Title":"Non-cryptographic hash functions for .NET","PublishedOn":"2017-06-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Creating hashs is quite common to check if content X has changed without looking at the whole content of X. \nGit for example uses SHA1-hashs for each commit. SHA1 itself is a pretty old cryptographic hash function, but in the case of Git there might have been better alternatives available, because the “to-be-hashed” content is not crypto relevant - it’s just content marker. Well… in the case of Git the current standard is SHA1, which works, but a ‘better’ way would be to use non-cryptographic functions for non-crypto purposes.</p>\n\n<h2 id=\"why-you-should-not-use-crypto-hashs-for-non-crypto\">Why you should not use crypto-hashs for non-crypto</h2>\n\n<p>I discovered this topic via a Twitter-conversation and it started with this <a href=\"https://twitter.com/sfeldman/status/804984253985370112\">Tweet</a>:</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">Bend Message Deduplication on <a href=\"https://twitter.com/hashtag/azure?src=hash\">#azure</a> <a href=\"https://twitter.com/hashtag/servicebus?src=hash\">#servicebus</a> to Your Will <a href=\"https://t.co/zjIQFjt2c9\">https://t.co/zjIQFjt2c9</a></p>&mdash; Sean Feldman (@sfeldman) <a href=\"https://twitter.com/sfeldman/status/804984253985370112\">3. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p><a href=\"https://twitter.com/clemensv/status/805499766264172548\">Clemens Vasters</a> then came and pointed out why it would be better to use non-crypto hash functions:</p>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">Rationale: Any use of broken crypto hashes may trip up security review processes.</p>&mdash; Clemens Vasters 🇪🇺 (@clemensv) <a href=\"https://twitter.com/clemensv/status/805499766264172548\">4. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>The reason makes perfect sense for me - next step: What other choice are available?</p>\n\n<h2 id=\"non-cryptographic-hash-functions-in-net\">Non-cryptographic hash functions in .NET</h2>\n\n<p>If you are googleing around you will find many different hashing algorithm, like <a href=\"https://en.wikipedia.org/wiki/Jenkins_hash_function\">Jenkins</a> or <a href=\"https://en.wikipedia.org/wiki/MurmurHash\">MurmurHash</a>.</p>\n\n<p>Sean Feldman, who more or less started the Twitter discussion mentioned a very good library for .NET developers:</p>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"de\"><p lang=\"en\" dir=\"ltr\">for the hashing function, I think I&#39;ll lead readers to a better option here <a href=\"https://t.co/LDiJuLD5A5\">https://t.co/LDiJuLD5A5</a></p>&mdash; Sean Feldman (@sfeldman) <a href=\"https://twitter.com/sfeldman/status/805516688816910336\">4. Dezember 2016</a></blockquote>\n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>The author of this awesome package is <a href=\"https://github.com/brandondahler\">Brandon Dahler</a>, who created .NET versions of the most well known algorithm and published them as NuGet packages.</p>\n\n<p>The source and everything can be found on <strong><a href=\"https://github.com/brandondahler/Data.HashFunction/\">GitHub</a></strong>.</p>\n\n<h2 id=\"lessons-learned\">Lessons learned</h2>\n\n<p>If you want to hash something and it is not crypto relevant, then it would be better to look at one of those Data.HashFunctions - some a pretty crazy fast.</p>\n\n<p>I’m not sure which one is ‘better’ - if you have some opinions please let me know. Brandon created a small description of each algorithm on the <strong><a href=\"http://datahashfunction.azurewebsites.net/\">Data.HashFunction documentation page</a></strong>.</p>\n\n<p><em>(my blogging backlog is quite long, so I needed 6 month to write this down ;) )</em></p>\n","Href":"https://blog.codeinside.eu/2017/06/30/non-cryptographic-hash-functions-for-dotnet/","RawContent":null},{"Title":"Using Visual Studio Code & Team Foundation Version Control (TFVC)","PublishedOn":"2017-05-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Recently we start working on a Angular 4 app but all other parts of the application (e.g. the backend stuff) were stored in a good old TFVC based repository (inside a Team Foundation Server 2015) . \nUnfortunately building an Angular app with the full blown Visual Studio with the “default” Team Explorer workflow is not really practical.\nAnother point for using Visual Studio Code was that most other online resources about learning Angular are using VS Code.</p>\n\n<p>Our goal was to keep <strong>one</strong> repository, otherwise it would be harder to build and maintain.</p>\n\n<h2 id=\"first-plan-migrate-to-git\">First plan: Migrate to Git</h2>\n\n<p>First we tried to migrate our <strong>complete</strong> code base to Git with this <a href=\"https://github.com/git-tfs/git-tfs\">generally awesome tool</a>. Unfortunately for us it failed because of our quite large branch-tree. I tried it on a smaller code base and it worked without any issues.</p>\n\n<p>At this point we needed another solution, because we wanted to get started on the actual application - so we tried to stick with TFVC.</p>\n\n<p><strong>Important:</strong> I always would recommend Git over TFVC, because it’s the way our industry is currently moving and at some point in the future we will do this too.</p>\n\n<p><strong>If you have similar problems like us: Read on!</strong></p>\n\n<h2 id=\"second-plan-get-the-tfvc-plugin-working-in-visual-studio-code\">Second plan: Get the TFVC plugin working in Visual Studio Code</h2>\n\n<p>Good news: Since <a href=\"https://blogs.msdn.microsoft.com/visualstudioalm/2017/04/12/official-release-of-tfvc-support-for-visual-studio-code/\">April 2017</a> there is a Visual Studio Team Services extension for Visual Studio Code that also supports TFVC!</p>\n\n<p>Requirements:</p>\n\n<ul>\n  <li>Team Foundation Server 2015 Update 2</li>\n  <li>A existing <strong>local</strong> workspace configuration (at least currently, check this <a href=\"https://github.com/Microsoft/vsts-vscode/issues/176\">GitHub issue</a> for further information)</li>\n  <li>The actual <a href=\"https://github.com/Microsoft/vsts-vscode\">extension</a></li>\n</ul>\n\n<h2 id=\"be-aware-local-workspaces\">Be aware: Local Workspaces!</h2>\n\n<p>Even I’m using TFS since a couple of years I just recently discovered that the TFS supports to different “workflows”. The “default” workflow always needs a connection to the TFS to checkout files etc. \nThere is an alternative mode called “local” mode which seems to work like SVN. The difference is, that you can create a local file and the TFVC-client will “detect” those changes. Read more about the differences <a href=\"https://www.visualstudio.com/en-us/docs/tfvc/decide-between-using-local-server-workspace\">here</a>.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-05-29/local-workspace.png\" alt=\"x\" title=\"Local Workspace setting\" /></p>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>In our OnPremise TFS 2015 world I just needed only this configuration line in my user settings:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n\"tfvc.location\": \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Professional\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TeamFoundation\\\\Team Explorer\\\\TF.exe\",\n...\n</code></pre></div></div>\n\n<h2 id=\"action\">Action!</h2>\n\n<p>Now when I point VS Code to my local workspace folder, the TFVC plugin will kick in and I see the familiar “change”-tracking:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-05-29/changetracking.png\" alt=\"x\" title=\"Working with the extension\" /></p>\n\n<p>It is not perfect, because I still need to setup and “manage” (e.g. get the history etc.) via the full blown Visual Studio, but with this setup it is “do-able”.</p>\n","Href":"https://blog.codeinside.eu/2017/05/29/using-vscode-and-tfvc/","RawContent":null},{"Title":".NET CultureInfo in Windows 10","PublishedOn":"2017-04-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Did you know that the CultureInfo behavior with <strong>“unkown”</strong> cultures has changed with Windows 10?</p>\n\n<p>I stumbled two times about this “problem” - so this is enough to write a short blogpost about it.</p>\n\n<h2 id=\"demo-code\">Demo Code</h2>\n\n<p>Lets use this democode:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    try\n    {\n\n\n        // ok on Win10, but not on pre Win10 if culture is not registred\n        CultureInfo culture1 = new CultureInfo(\"foo\");\n        CultureInfo culture2 = new CultureInfo(\"xyz\");\n        CultureInfo culture3 = new CultureInfo(\"en-xy\");\n\n        // not ok even on Win 10 - exception\n        CultureInfo culture4 = new CultureInfo(\"foox\");\n\n    }\n    catch (Exception exc)\n    {\n\n    }\n</code></pre></div></div>\n\n<h2 id=\"windows-10-case\">Windows 10 Case</h2>\n\n<p>If you run this code under Windows 10 it should fail for the “foox” culture, because it doesn’t seem to be a valid culture anyway.</p>\n\n<p>“culture1”, “culture2”, “culture3” are all <strong>valid</strong> cultures in the Windows 10 world, but are resolved with <strong>Unkown Locale</strong> and <strong>LCID 4096</strong>.</p>\n\n<p><em>I guess Windows will look for a 2 or 3 letter ISO style language, and “foox” doesn’t match this pattern.</em></p>\n\n<h2 id=\"pre-windows-10---eg-running-on-win-server-2012r2\">Pre Windows 10 - e.g. running on Win Server 2012R2</h2>\n\n<p>If you would run the code unter Windows Server 2012 R2 it would fail on the first culture, because there is no “foo” culture registred.</p>\n\n<h2 id=\"problem\">“Problem”</h2>\n\n<p>The main “problem” is that this behavior could lead to some production issues if you develop with Windows 10 and the software is running on a Win 2012 server.</p>\n\n<p><strong>If</strong> you are managing “language” content in your application, be aware of this “limitation” on older Windows versions.</p>\n\n<p>I discovered this problem while debugging our backend admin application. With this ASP.NET frontend it is possible to add or manage “localized” content and the dropdown for the possible language listed a whole bunch of very special, but “Unkown locale” cultures. So we needed to filter out all LCID 4096 cultures to ensure it would run under all Windows versions.</p>\n\n<h2 id=\"msdn\">MSDN</h2>\n\n<p>This behavior is also documented on <strong><a href=\"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.lcid%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\">MSDN</a></strong></p>\n\n<p>The <strong><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd373745(v=vs.85).aspx\">“Unkown culture” LCID 4096</a></strong> was introduced with Windows Vista, but only with Windows 10 it will be “easy” usable within the .NET Framework.</p>\n\n<h2 id=\"update-lcid-8192\">(update!) LCID 8192?</h2>\n\n<p>Today I was preparing a new machine and I found a pretty interesting case and our application had some problems. I checked the CultureInfo stuff and this is what I got on a Windows 10 machine, that should be a EN-US machine, but somehow ended up with a “Swiss” configuration:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CurrentCulture.LCID: 8192 - English (Switzerland)\nCurrentUICulture.LCID: 1033 - English (United States)\n</code></pre></div></div>\n\n<p>I have no idea why this machine had this configuration, but the CurrentCulture was set to 8192. After a bit of googling I found the confusing answer from this <a href=\"https://msdn.microsoft.com/en-us/library/dn363603.aspx?f=255&amp;MSPPError=-2147217396\">MSDN “Locale Names without LCIDs”-Site</a>:</p>\n\n<p><em>“If the user has configured any of these locales without LCIDs in their Language Profile, then the system MAY assign them additional values to provide applications with temporary unique identifiers. Those temporary LCIDs can differ between processes, machines, users, and application instances. If a temporary LCID is assigned it will be dynamically assigned at runtime to be 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00, 0x4000, 0x4400, 0x4800, or 0x4C00, for the valid language-script-region tags not otherwise listed in this table.”</em></p>\n\n<p>It seems you not only can end up with LCID 4096, but with a wild language combination you can get 8192 or any of those codes above. Be aware of the problems when you are working with LCIDs, because they are more or less <a href=\"https://blogs.msdn.microsoft.com/shawnste/2013/10/23/lcids-vs-locale-names-and-the-deprecation-of-lcids/\">“deprecated”</a>.</p>\n","Href":"https://blog.codeinside.eu/2017/04/23/net-cultureinfo-in-windows10/","RawContent":null},{"Title":"How we moved to Visual Studio 2017","PublishedOn":"2017-03-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-03-28/vs.png\" alt=\"x\" title=\"VS 2017 installer\" /></p>\n\n<p>Visual Studio 2017 has arrived and because of .NET Core and other goodies we wanted to switch fast to the newest release with our product <a href=\"http://oneoffixx.com/\">OneOffixx</a>.</p>\n\n<h2 id=\"company--product-environment\">Company &amp; Product Environment</h2>\n\n<p>In our solution we use some VC++ projects (just for Office Development &amp; building a .NET shim), Windows Installer XML &amp; many C# projects for desktop or ASP.NET stuff.</p>\n\n<p>Our builds are scripted with <strong><a href=\"http://cakebuild.net\">CAKE</a></strong> (see here for some more blogposts about [CAKE}(https://blog.codeinside.eu/2017/02/13/create-nuget-packages-with-cake/) and us the TFS vNext Build to orchestrate everything.</p>\n\n<h2 id=\"step-1-update-the-development-workstations\">Step 1: Update the Development Workstations</h2>\n\n<p>The first step was to update my local dev enviroment and install Visual Studio 2017.</p>\n\n<p>After the installation I started VS and opened our solution and because we have some WIX projects we needed the most recent <strong><a href=\"http://wixtoolset.org/releases/\">Wix 3.11 toolset &amp; the VS 2017 extension</a></strong>.</p>\n\n<h2 id=\"step-2-vc-update\">Step 2: VC++ update</h2>\n\n<p>We wanted a clean VS 2017 enviroment, so we decided to use the most recent <strong>VC++ 2017 runtime</strong> for our VC++ projects.</p>\n\n<h2 id=\"step-3-project-update\">Step 3: project update</h2>\n\n<p>In the past we had some issues that MSBuild used the wrong MSBuild version. Maybe this step is not needed, but we pointed all .csproj files to the newest <strong>MSBuild ToolVersion 15.0</strong>.</p>\n\n<h2 id=\"step-4-cake-update\">Step 4: CAKE update</h2>\n\n<p>The last step was to update the CAKE.exe (which is controlled by us and not automatically downloaded via a build script) to 0.18.</p>\n\n<h2 id=\"step-5-minor-build-script-changes\">Step 5: Minor build script changes</h2>\n\n<p>We needed to adjust some paths (e.g. to the Windows SDK for signtool.exe) and ensure that we are using the most recent MSBuild.exe.</p>\n\n<h2 id=\"step-6-create-a-new-build-agent\">Step 6: Create a new Build-Agent</h2>\n\n<p>We decided to create a <strong><a href=\"https://blog.codeinside.eu/2016/08/10/adding-a-new-windowsagent-to-tfs2015-build/\">new TFS Build-Agent</a></strong> and do the usual build agent installation, imported the code-cert and do some magic because of some C++/COM-magic (don’t ask… COM sucks.)</p>\n\n<h2 id=\"recap\">Recap</h2>\n\n<p>Besides the C++/COM/magic issue (see above) the migration was pretty easy and now our team works with Visual Studio 2017.</p>\n\n","Href":"https://blog.codeinside.eu/2017/03/27/how-we-moved-to-vs-2017/","RawContent":null},{"Title":"HowTo: Get User Information & Group Memberships from Active Directory via C#","PublishedOn":"2017-03-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>I had to find a way to access all group memberships from a given Active Directory user. The problem here is, that groups may contain other groups and I needed a list of “all” applied group memberships - directly or indirectly.</p>\n\n<p>The “fastest” solution (without querying each group) is to use the <strong><a href=\"https://msdn.microsoft.com/en-us/library/ms680275(v=vs.85).aspx\">Token-Groups attribute</a></strong>, which already does this magic for us. \nThis list should contain <strong>all</strong> applied groups.</p>\n\n<p>The code would also allow to read any other AD property, e.g. the UPN or names etc.</p>\n\n<h2 id=\"code\">Code</h2>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"ListAllGroupsViaTokenGroups:\");\n\n        List&lt;string&gt; result = new List&lt;string&gt;();\n\n        try\n        {\n            result = ListAllGroupsViaTokenGroups(\"USERNAME\", \"DOMAIN\");\n\n            foreach (var group in result)\n            {\n                Console.WriteLine(group);\n            }\n        }\n        catch (Exception exc)\n        {\n            Console.WriteLine(exc.Message);\n        }\n\n        Console.Read();\n    }\n\n  \n    private static List&lt;string&gt; ListAllGroupsViaTokenGroups(string username, string domainName)\n    {\n        List&lt;string&gt; result = new List&lt;string&gt;();\n\n        using (PrincipalContext domainContext = new PrincipalContext(ContextType.Domain, domainName))\n        using (var searcher = new DirectorySearcher(new DirectoryEntry(\"LDAP://\" + domainContext.Name)))\n        {\n            searcher.Filter = String.Format(\"(&amp;(objectClass=user)(sAMAccountName={0}))\", username);\n            SearchResult sr = searcher.FindOne();\n\n            DirectoryEntry user = sr.GetDirectoryEntry();\n\n            // access to other user properties, via user.Properties[\"...\"]\n\n            user.RefreshCache(new string[] { \"tokenGroups\" });\n\n            for (int i = 0; i &lt; user.Properties[\"tokenGroups\"].Count; i++)\n            {\n                SecurityIdentifier sid = new SecurityIdentifier((byte[])user.Properties[\"tokenGroups\"][i], 0);\n                NTAccount nt = (NTAccount)sid.Translate(typeof(NTAccount));\n\n                result.Add(nt.Translate(typeof(NTAccount)).ToString() + \" (\" + sid + \")\");\n            }\n        }\n\n        return result;\n    }\n\n}\n</code></pre></div></div>\n\n<p>Hope this will help someone in the future.</p>\n\n<p><strong><a href=\"https://github.com/Code-Inside/Samples/tree/master/2017/ADLookupWithGroups\">Code @ GitHub</a></strong></p>\n","Href":"https://blog.codeinside.eu/2017/03/02/howto-get-user-information-and-groups-from-ad/","RawContent":null},{"Title":"Create NuGet packages with Cake","PublishedOn":"2017-02-13T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This blogpost is a follow up to these <strong><a href=\"http://cakebuild.net/\">Cake (C# Make)</a></strong> related blogpost:</p>\n\n<ul>\n  <li><a href=\"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/\">Building with Cake</a></li>\n  <li><a href=\"https://blog.codeinside.eu/2017/02/07/build-and-run-xunit-tests-with-cake/\">Build &amp; run xUnit tests with Cake</a></li>\n</ul>\n\n<h2 id=\"scenario\">Scenario</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-13/proj.png\" alt=\"x\" title=\"Demo proj\" /></p>\n\n<p>Let’s say we have this project structure. The “Config”, “Result” and “Engine” projects contains a corresponding .nuspec, like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;package</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;metadata&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>Sloader.Config<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>$version$<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Sloader.Config<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;authors&gt;</span>Code Inside Team<span class=\"nt\">&lt;/authors&gt;</span>\n    <span class=\"nt\">&lt;owners&gt;</span>Code Inside Team<span class=\"nt\">&lt;/owners&gt;</span>\n    <span class=\"nt\">&lt;licenseUrl&gt;</span>https://github.com/Code-Inside/Sloader/blob/master/LICENSE<span class=\"nt\">&lt;/licenseUrl&gt;</span>\n    <span class=\"nt\">&lt;projectUrl&gt;</span>https://github.com/Code-Inside/Sloader<span class=\"nt\">&lt;/projectUrl&gt;</span>\n    <span class=\"nt\">&lt;requireLicenseAcceptance&gt;</span>false<span class=\"nt\">&lt;/requireLicenseAcceptance&gt;</span>\n    <span class=\"nt\">&lt;description&gt;</span>Sloader Config<span class=\"nt\">&lt;/description&gt;</span>\n    <span class=\"nt\">&lt;releaseNotes&gt;</span>\n      ## Version 0.1 ##\n      Init\n    <span class=\"nt\">&lt;/releaseNotes&gt;</span>\n    <span class=\"nt\">&lt;copyright&gt;</span>Copyright 2017<span class=\"nt\">&lt;/copyright&gt;</span>\n    <span class=\"nt\">&lt;tags&gt;</span>Sloader<span class=\"nt\">&lt;/tags&gt;</span>\n    <span class=\"nt\">&lt;dependencies</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/metadata&gt;</span>\n<span class=\"nt\">&lt;/package&gt;</span>\n</code></pre></div></div>\n\n<p>Nothing fancy - pretty normal NuGet stuff, but be aware of the “$version$” variable. This variable is called a <a href=\"https://docs.microsoft.com/de-de/nuget/schema/nuspec#replacement-tokens\">“replacement-token”</a>. When the NuGet package is created and it detects such a replacement-token, it will search for the AssemblyVersion (or other replacement-token sources).</p>\n\n<p><strong>Versioning in NuGet:</strong></p>\n\n<p>I’m not a NuGet expert, but you should also versioning your assembly info, otherwise some systems may have trouble to update your dll. The version inside the package can be different from the actual assembly version, but you should manage booth or use this replacement-token-mechanic.</p>\n\n<h2 id=\"goal\">Goal</h2>\n\n<p>The goal is to create a NuGet package for each target project with Cake.</p>\n\n<h2 id=\"buildcake\">build.cake</h2>\n\n<p>The usage in Cake is pretty much the same as with the normal <strong><a href=\"https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference#pack\">nuget.exe pack</a></strong> command \nThe sample only shows the actual cake target - see the older blogposts for a more complete example:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Task(\"BuildPackages\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n\t.IsDependentOn(\"RunTests\")\n    .Does(() =&gt;\n{\n    var nuGetPackSettings = new NuGetPackSettings\n\t{\n\t\tOutputDirectory = rootAbsoluteDir + @\"\\artifacts\\\",\n\t\tIncludeReferencedProjects = true,\n\t\tProperties = new Dictionary&lt;string, string&gt;\n\t\t{\n\t\t\t{ \"Configuration\", \"Release\" }\n\t\t}\n\t};\n\n    MSBuild(\"./src/Sloader.Config/Sloader.Config.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Config/Sloader.Config.csproj\", nuGetPackSettings);\n    MSBuild(\"./src/Sloader.Result/Sloader.Result.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Result/Sloader.Result.csproj\", nuGetPackSettings);\n    MSBuild(\"./src/Sloader.Engine/Sloader.Engine.csproj\", new MSBuildSettings().SetConfiguration(\"Release\"));\n    NuGetPack(\"./src/Sloader.Engine/Sloader.Engine.csproj\", nuGetPackSettings);\n});\n</code></pre></div></div>\n\n<p>Easy, right? The most interesting part here is the <a href=\"http://cakebuild.net/api/Cake.Common.Tools.NuGet/NuGetAliases/EF4ED944\">NuGetPack</a> command. Before we invoke this command we need to make sure that we build the last recent version - to enforce that we just rebuild each project in release mode.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-13/result.png\" alt=\"x\" title=\"NuGet packages!\" /></p>\n\n<p>The console output should make the flow pretty clear:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PS C:\\Users\\Robert\\Documents\\GitHub\\Sloader&gt; .\\build.ps1 -t BuildPackages\nPreparing to run build script...\nRunning build script...\nAnalyzing build script...\nProcessing build script...\nInstalling tools...\nCompiling build script...\n\n========================================\nClean\n========================================\nExecuting task: Clean\nCleaning directory C:/Users/Robert/Documents/GitHub/Sloader/artifacts\nFinished executing task: Clean\n\n========================================\nRestore-NuGet-Packages\n========================================\nExecuting task: Restore-NuGet-Packages\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nAll packages listed in packages.config are already installed.\nFinished executing task: Restore-NuGet-Packages\n\n========================================\nBuildTests\n========================================\nExecuting task: BuildTests\nStart Building Test: Sloader.Config.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config.dll\n  Sloader.Config.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config\n  .Tests.dll\nStart Building Test: Sloader.Result.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result.dll\n  Sloader.Result.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result\n  .Tests.dll\nStart Building Test: Sloader.Engine.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Config.dll\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Result.dll\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine.dll\n  Sloader.Engine.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine\n  .Tests.dll\nFinished executing task: BuildTests\n\n========================================\nRunTests\n========================================\nExecuting task: RunTests\nStart Running Tests\nxUnit.net Console Runner (64-bit .NET 4.0.30319.42000)\n  Discovering: Sloader.Config.Tests\n  Discovered:  Sloader.Config.Tests\n  Starting:    Sloader.Config.Tests\n  Finished:    Sloader.Config.Tests\n  Discovering: Sloader.Engine.Tests\n  Discovered:  Sloader.Engine.Tests\n  Starting:    Sloader.Engine.Tests\n  Finished:    Sloader.Engine.Tests\n  Discovering: Sloader.Result.Tests\n  Discovered:  Sloader.Result.Tests\n  Starting:    Sloader.Result.Tests\n  Finished:    Sloader.Result.Tests\n=== TEST EXECUTION SUMMARY ===\n   Sloader.Config.Tests  Total: 23, Errors: 0, Failed: 0, Skipped: 0, Time: 0.554s\n   Sloader.Engine.Tests  Total: 17, Errors: 0, Failed: 0, Skipped: 0, Time: 1.070s\n   Sloader.Result.Tests  Total:  4, Errors: 0, Failed: 0, Skipped: 0, Time: 1.061s\n                                --          -          -           -        ------\n                   GRAND TOTAL: 44          0          0           0        2.684s (5.697s)\nFinished executing task: RunTests\n\n========================================\nBuildPackages\n========================================\nExecuting task: BuildPackages\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:09.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" on node 1 (Build target(s))\n.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release\\Sloader.Config.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.22\nAttempting to build package from 'Sloader.Config.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release'.\nUsing 'Sloader.Config.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Config.0.2.1.nupkg'.\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:10.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" on node 1 (Build target(s))\n.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release\\Sloader.Result.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.24\nAttempting to build package from 'Sloader.Result.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release'.\nUsing 'Sloader.Result.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Result.0.2.1.nupkg'.\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 2017-02-19 22:00:12.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" on node 1 (Build target(s))\n.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (1) is building \"C:\\Users\\R\nobert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (2) on node 1 (default targets).\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\bin\\Release\\Sloader.Config.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Config\\Sloader.Config.csproj\" (default targ\nets).\n\nThe target \"_ConvertPdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,37)\" does not exist in the project, and will be ignored.\nThe target \"_CollectPdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (34,70)\" does not exist in the project, and will be ignored.\nThe target \"_CollectMdbFiles\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Com\nmon.targets\\ImportAfter\\Xamarin.Common.targets (41,38)\" does not exist in the project, and will be ignored.\nThe target \"_CopyMdbFiles\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common\n.targets\\ImportAfter\\Xamarin.Common.targets (41,71)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (1) is building \"C:\\Users\\R\nobert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (3) on node 1 (default targets).\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\bin\\Release\\Sloader.Result.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Result\\Sloader.Result.csproj\" (default targ\nets).\n\nBclBuildEnsureBindingRedirects:\nSkipping target \"BclBuildEnsureBindingRedirects\" because all output files are up-to-date with respect to the input file\ns.\nGenerateTargetFrameworkMonikerAttribute:\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the i\nnput files.\nCoreCompile:\nSkipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\n_CopyAppConfigFile:\nSkipping target \"_CopyAppConfigFile\" because all output files are up-to-date with respect to the input files.\nCopyFilesToOutputDirectory:\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\bin\\Release\\Sloader.Engine.dll\nDone Building Project \"C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\Sloader.Engine.csproj\" (Build target\n(s)).\n\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.54\nAttempting to build package from 'Sloader.Engine.csproj'.\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nPacking files from 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\src\\Sloader.Engine\\bin\\Release'.\nUsing 'Sloader.Engine.nuspec' for metadata.\nFound packages.config. Using packages listed as dependencies\nSuccessfully created package 'C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\Sloader.Engine.0.2.1.nupkg'.\nFinished executing task: BuildPackages\n\nTask                          Duration\n--------------------------------------------------\nClean                         00:00:00.1083837\nRestore-NuGet-Packages        00:00:00.7808530\nBuildTests                    00:00:02.6296445\nRunTests                      00:00:05.9397822\nBuildPackages                 00:00:05.2679058\n--------------------------------------------------\nTotal:                        00:00:14.7265692\n</code></pre></div></div>\n","Href":"https://blog.codeinside.eu/2017/02/13/create-nuget-packages-with-cake/","RawContent":null},{"Title":"Build & run xUnit tests with Cake","PublishedOn":"2017-02-07T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Last year I already covered the <strong><a href=\"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/\">basic usage of Cake</a></strong>, which stands for “C# Make”. This time we want to build and run <strong><a href=\"https://xunit.github.io/\">xUnit</a></strong> tests with Cake.</p>\n\n<h2 id=\"scenario\">Scenario</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2017-02-07/proj.png\" alt=\"x\" title=\"Demo proj\" /></p>\n\n<p>Let’s say we have this project structure. Be aware that all our tests have the suffix “Tests” in the project name.</p>\n\n<p>The files are organized like this, so we have all “Tests” in a “tests” folder and the actual code under “src”:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>src/Sloader.Config\nsrc/Sloader.Engine\nsrc/Sloader.Hosts.Console\nsrc/Sloader.Result\ntests/Sloader.Config.Tests\ntests/Sloader.Engine.Tests\ntests/Sloader.Result.Tests\n.gitignore\nbuild.cake\nbuild.ps1\nLICENSE\nSloader.sln\n</code></pre></div></div>\n\n<h2 id=\"goal\">Goal</h2>\n\n<p>Now we want to build all tests projects and run them with the xUnit console runner. Be aware that there are multiple ways of doing it, but I found this quite good.</p>\n\n<h2 id=\"buildcake\">build.cake</h2>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#tool \"nuget:?package=xunit.runner.console\"\n//////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n//////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// PREPARATION\n//////////////////////////////////////////////////////////////////////\n\n// Define directories.\nvar artifactsDir  = Directory(\"./artifacts/\");\nvar rootAbsoluteDir = MakeAbsolute(Directory(\"./\")).FullPath;\n\n//////////////////////////////////////////////////////////////////////\n// TASKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does(() =&gt;\n{\n    CleanDirectory(artifactsDir);\n});\n\nTask(\"Restore-NuGet-Packages\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =&gt;\n{\n    NuGetRestore(\"./Sloader.sln\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n\n     \n});\n\nTask(\"BuildTests\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n\tvar parsedSolution = ParseSolution(\"./Sloader.sln\");\n\n\tforeach(var project in parsedSolution.Projects)\n\t{\n\t\n\tif(project.Name.EndsWith(\".Tests\"))\n\t\t{\n        Information(\"Start Building Test: \" + project.Name);\n\n        MSBuild(project.Path, new MSBuildSettings()\n                .SetConfiguration(\"Debug\")\n                .SetMSBuildPlatform(MSBuildPlatform.Automatic)\n                .SetVerbosity(Verbosity.Minimal)\n                .WithProperty(\"SolutionDir\", @\".\\\")\n                .WithProperty(\"OutDir\", rootAbsoluteDir + @\"\\artifacts\\_tests\\\" + project.Name + @\"\\\"));\n\t\t}\n\t\n\t}    \n\n});\n\nTask(\"RunTests\")\n    .IsDependentOn(\"BuildTests\")\n    .Does(() =&gt;\n{\n    Information(\"Start Running Tests\");\n    XUnit2(\"./artifacts/_tests/**/*.Tests.dll\");\n});\n\n//////////////////////////////////////////////////////////////////////\n// TASK TARGETS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Default\")\n    .IsDependentOn(\"RunTests\");\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n</code></pre></div></div>\n\n<h2 id=\"explanation-buildtests\">Explanation: BuildTests?</h2>\n\n<p>The default target “Default” will trigger “RunTests”, which depend on “BuildTests”.</p>\n\n<p>Inside the “BuildTests”-target we use a handy helper from Cake and we parse the .sln file and search all “Test”-projects.\nWith that information we can build each test individually and don’t have to worry over “overlapping” files. \nThe output of this build will be saved at <strong>“artifacts/_tests”</strong>.</p>\n\n<h2 id=\"running-xunit\">Running xUnit</h2>\n\n<p>To run <a href=\"http://cakebuild.net/dsl/xunit-v2/\">xUnit</a> we have to include the runner at the top of the cake file:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#tool \"nuget:?package=xunit.runner.console\"\n</code></pre></div></div>\n\n<p>Now we can just invoke XUnit2 and scan for all Tests.dlls and we are done:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>XUnit2(\"./artifacts/_tests/**/*.Tests.dll\");\n</code></pre></div></div>\n\n<h2 id=\"result\">Result</h2>\n\n<p>The console output should make the flow pretty clear:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PS C:\\Users\\Robert\\Documents\\GitHub\\Sloader&gt; .\\build.ps1\nPreparing to run build script...\nRunning build script...\nAnalyzing build script...\nProcessing build script...\nInstalling tools...\nCompiling build script...\n\n========================================\nClean\n========================================\nExecuting task: Clean\nCreating directory C:/Users/Robert/Documents/GitHub/Sloader/artifacts\nFinished executing task: Clean\n\n========================================\nRestore-NuGet-Packages\n========================================\nExecuting task: Restore-NuGet-Packages\nMSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\nAll packages listed in packages.config are already installed.\nFinished executing task: Restore-NuGet-Packages\n\n========================================\nBuildTests\n========================================\nExecuting task: BuildTests\nStart Building Test: Sloader.Config.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config.dll\n  Sloader.Config.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Config.Tests\\Sloader.Config\n  .Tests.dll\nStart Building Test: Sloader.Result.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result.dll\n  Sloader.Result.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Result.Tests\\Sloader.Result\n  .Tests.dll\nStart Building Test: Sloader.Engine.Tests\nMicrosoft (R) Build Engine version 14.0.25420.1\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Sloader.Config -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Config.dll\n  Sloader.Result -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Result.dll\n  Sloader.Engine -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine.dll\n  Sloader.Engine.Tests -&gt; C:\\Users\\Robert\\Documents\\GitHub\\Sloader\\artifacts\\_tests\\Sloader.Engine.Tests\\Sloader.Engine\n  .Tests.dll\nFinished executing task: BuildTests\n\n========================================\nRunTests\n========================================\nExecuting task: RunTests\nStart Running Tests\nxUnit.net Console Runner (64-bit .NET 4.0.30319.42000)\n  Discovering: Sloader.Config.Tests\n  Discovered:  Sloader.Config.Tests\n  Starting:    Sloader.Config.Tests\n  Finished:    Sloader.Config.Tests\n  Discovering: Sloader.Engine.Tests\n  Discovered:  Sloader.Engine.Tests\n  Starting:    Sloader.Engine.Tests\n  Finished:    Sloader.Engine.Tests\n  Discovering: Sloader.Result.Tests\n  Discovered:  Sloader.Result.Tests\n  Starting:    Sloader.Result.Tests\n  Finished:    Sloader.Result.Tests\n=== TEST EXECUTION SUMMARY ===\n   Sloader.Config.Tests  Total: 22, Errors: 0, Failed: 0, Skipped: 0, Time: 0.342s\n   Sloader.Engine.Tests  Total:  9, Errors: 0, Failed: 0, Skipped: 0, Time: 0.752s\n   Sloader.Result.Tests  Total:  4, Errors: 0, Failed: 0, Skipped: 0, Time: 0.475s\n                                --          -          -           -        ------\n                   GRAND TOTAL: 35          0          0           0        1.569s (3.115s)\nFinished executing task: RunTests\n\n========================================\nDefault\n========================================\nExecuting task: Default\nFinished executing task: Default\n\nTask                          Duration\n--------------------------------------------------\nClean                         00:00:00.0155255\nRestore-NuGet-Packages        00:00:00.5065704\nBuildTests                    00:00:02.1590662\nRunTests                      00:00:03.2443534\nDefault                       00:00:00.0061325\n--------------------------------------------------\nTotal:                        00:00:05.9316480\n</code></pre></div></div>\n","Href":"https://blog.codeinside.eu/2017/02/07/build-and-run-xunit-tests-with-cake/","RawContent":null},{"Title":"GitHub API: Create or update files","PublishedOn":"2017-01-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>This blogpost covers a pretty basic GitHub topic: Creating and updating content on GitHub. Of course, there are many ways to do it - e.g. you could do the full Git-ceremony and it would work with all Git hosts, but in my case I just wanted to target the <a href=\"https://developer.github.com/v3/\"><strong>offical GitHub API</strong></a>.</p>\n\n<h2 id=\"prerequisite-a-github-user-repo-and-token\">Prerequisite: A GitHub User, Repo and Token</h2>\n\n<p>To use this code you will need write access to a GitHub repository and you should have a valid <a href=\"https://github.com/settings/tokens\">GitHub token</a>.</p>\n\n<h2 id=\"code\">Code</h2>\n\n<p>The most simple way to communicate with the <a href=\"https://developer.github.com/v3/\">GitHub API</a> is by using the <a href=\"https://www.nuget.org/packages/Octokit/\">Octokit SDK</a> (from GitHub).</p>\n\n<p>Description:\nInside the try-block we try to <a href=\"https://developer.github.com/v3/repos/contents/#get-contents\">get the target file</a>, if it is already committed in the repo the API will return the last commit SHA.</p>\n\n<p>With this SHA it is possible to <a href=\"https://developer.github.com/v3/repos/contents/#update-a-file\">create a new commit to do the actual update</a>.</p>\n\n<p>If the file was not found, <a href=\"https://developer.github.com/v3/repos/contents/#create-a-file\">we create the file</a>. I’m not a huge fan of this try/catch block, but didn’t found any other way to check if the file is comitted or not (please give me a hint if this is wrong ;))</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Octokit;\n\nnamespace CreateOrUpdateGitHubFile\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Task.Run(async () =&gt;\n            {\n                var ghClient = new GitHubClient(new ProductHeaderValue(\"Octokit-Test\"));\n                ghClient.Credentials = new Credentials(\"ACCESS-TOKEN\");\n\n                // github variables\n                var owner = \"OWNER\";\n                var repo = \"REPO\";\n                var branch = \"BRANCH\";\n\n                var targetFile = \"_data/test.txt\";\n\n                try\n                {\n                    // try to get the file (and with the file the last commit sha)\n                    var existingFile = await ghClient.Repository.Content.GetAllContentsByRef(owner, repo, targetFile, branch);\n\n                    // update the file\n                    var updateChangeSet = await ghClient.Repository.Content.UpdateFile(owner, repo, targetFile,\n                       new UpdateFileRequest(\"API File update\", \"Hello Universe! \" + DateTime.UtcNow, existingFile.First().Sha, branch));\n                }\n                catch (Octokit.NotFoundException)\n                {\n                    // if file is not found, create it\n                    var createChangeSet = await ghClient.Repository.Content.CreateFile(owner,repo, targetFile, new CreateFileRequest(\"API File creation\", \"Hello Universe! \" + DateTime.UtcNow, branch));\n                }\n\n                \n                \n            }).Wait();\n        }\n    }\n}\n</code></pre></div></div>\n\n<p>The demo code is also available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2017/CreateOrUpdateGitHubFile\"><strong>GitHub</strong></a>.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2017/01/02/create-or-update-files-via-the-github-api/","RawContent":null},{"Title":"DbProviderFactories: Write database agnostic ADO.NET code","PublishedOn":"2016-12-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Recently I needed to write a module that needs to connect to a wide range of SQL-DBs, e.g. MySQL, MS SQL, Oracle etc.</p>\n\n<h2 id=\"problem-most-providers-will-use-their-concret-classes\">Problem: Most providers will use their concret classes</h2>\n\n<p>If you look at the C# example on the <a href=\"https://dev.mysql.com/doc/connector-net/en/connector-net-programming-connecting-open.html\">MySQL dev page</a> you will see the MsSql-Namespace and classes:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MySql.Data.MySqlClient.MySqlConnection conn;\nstring myConnectionString;\n\nmyConnectionString = \"server=127.0.0.1;uid=root;\" +\n    \"pwd=12345;database=test;\";\n\ntry\n{\n    conn = new MySql.Data.MySqlClient.MySqlConnection();\n    conn.ConnectionString = myConnectionString;\n    conn.Open();\n}\ncatch (MySql.Data.MySqlClient.MySqlException ex)\n{\n    MessageBox.Show(ex.Message);\n}\n</code></pre></div></div>\n\n<p>The same classes will probably not work for a MS SQL database.</p>\n\n<h2 id=\"solution-use-the-dbproviderfactories\">“Solution”: Use the DbProviderFactories</h2>\n\n<p>For example if you install the <a href=\"https://www.nuget.org/packages/MySql.Data\">MySql-NuGet package</a> you will also get this little enhancement to you app.config:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;system.data&gt;\n  &lt;DbProviderFactories&gt;\n    &lt;remove invariant=\"MySql.Data.MySqlClient\" /&gt;\n    &lt;add name=\"MySQL Data Provider\" invariant=\"MySql.Data.MySqlClient\" description=\".Net Framework Data Provider for MySQL\" type=\"MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d\" /&gt;\n  &lt;/DbProviderFactories&gt;\n&lt;/system.data&gt;\n</code></pre></div></div>\n\n<p>Now we can get a reference to the MySql client via the DbProviderFactories:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>using System;\nusing System.Data;\nusing System.Data.Common;\n\nnamespace DbProviderFactoryStuff\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.WriteLine(\"All registered DbProviderFactories:\");\n                var allFactoryClasses = DbProviderFactories.GetFactoryClasses();\n\n                foreach (DataRow row in allFactoryClasses.Rows)\n                {\n                    Console.WriteLine(row[0] + \": \" + row[2]);\n                }\n\n                Console.WriteLine();\n                Console.WriteLine(\"Try to access a MySql DB:\");\n\n                DbProviderFactory dbf = DbProviderFactories.GetFactory(\"MySql.Data.MySqlClient\");\n                using (DbConnection dbcn = dbf.CreateConnection())\n                {\n                    dbcn.ConnectionString = \"Server=localhost;Database=testdb;Uid=root;Pwd=Pass1word;\";\n                    dbcn.Open();\n                    using (DbCommand dbcmd = dbcn.CreateCommand())\n                    {\n                        dbcmd.CommandType = CommandType.Text;\n                        dbcmd.CommandText = \"SHOW TABLES;\";\n\n                        // parameter...\n                        //var foo = dbcmd.CreateParameter();\n                        //foo.ParameterName = \"...\";\n                        //foo.Value = \"...\";\n\n                        using (DbDataReader dbrdr = dbcmd.ExecuteReader())\n                        {\n                            while (dbrdr.Read())\n                            {\n                                Console.WriteLine(dbrdr[0]);\n                            }\n                        }\n                    }\n                }\n            }\n            catch (Exception exc)\n            {\n                Console.WriteLine(exc.Message);\n            }\n\n            Console.ReadLine();\n\n        }\n    }\n}\n</code></pre></div></div>\n\n<p>The most important line is this one:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DbProviderFactory dbf = DbProviderFactories.GetFactory(\"MySql.Data.MySqlClient\");\n</code></pre></div></div>\n\n<p>Now with the <a href=\"https://msdn.microsoft.com/en-us/library/system.data.common.dbproviderfactory(v=vs.110).aspx\"><strong>DbProviderFactory</strong></a> from the MySql client we can access the MySql database without using any MySql-specific classes.</p>\n\n<p>There are a couple of “in-built” db providers registered, like the MS SQL provider or ODBC stuff.</p>\n\n<p>The above code will output something like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>All registered DbProviderFactories:\nOdbc Data Provider: System.Data.Odbc\nOleDb Data Provider: System.Data.OleDb\nOracleClient Data Provider: System.Data.OracleClient\nSqlClient Data Provider: System.Data.SqlClient\nMicrosoft SQL Server Compact Data Provider 4.0: System.Data.SqlServerCe.4.0\nMySQL Data Provider: MySql.Data.MySqlClient\n</code></pre></div></div>\n\n<h2 id=\"other-solutions\">Other solutions</h2>\n\n<p>Of course there are other solutions - some OR-Mapper like the EntityFramework have a provider model which might also work, but this one here is a pretty basic approach.</p>\n\n<h2 id=\"sql-commands\">SQL Commands</h2>\n\n<p>The tricky bit here is that you need to make sure that your SQL commands work on your database - this is <strong>not a silver bullet</strong>, it <strong>just lets you connect and execute SQL commands to any ‘registered’ database</strong>.</p>\n\n<p>The full demo code is also available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/DbProviderFactoryStuff\"><strong>GitHub</strong></a>.</p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2016/12/31/dbproviderfactory-write-database-agnostic-adonet-code/","RawContent":null},{"Title":"Enable SSL with custom domains on GitHub Pages via Cloudflare","PublishedOn":"2016-11-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>Two weeks ago I decided (finally!) that I should enable SSL on this blog.</p>\n\n<h2 id=\"problem-github-pages-with-a-custom-domain\">Problem: GitHub Pages with a custom domain</h2>\n\n<p>This blog is hosted on GitHub Pages with a custom domain, which currently doesn’t support SSL out of the box. If you stick with a github.io domain SSL is not a problem.</p>\n\n<h2 id=\"cloudflare-to-the-rescure\">Cloudflare to the rescure</h2>\n\n<p>I decided to take a deeper look at <strong><a href=\"https://www.cloudflare.com\">Cloudflare</a></strong>, which provides DNS, CDN and other “network”-related services. For the “main” service Cloudflare serves as the DNS for your domain and is like a proxy.</p>\n\n<p>With this setup you have some nice benefits:</p>\n\n<ul>\n  <li>A free SSL certificate (AFAIK you can also use your own cert if you need)</li>\n  <li>A CDN cache</li>\n  <li>DDOS protection</li>\n  <li>“Analytics”</li>\n</ul>\n\n<p>Be aware: This is just the <strong>free plan</strong>.</p>\n\n<p>And everything is pretty easy to manage via the web interface.</p>\n\n<h3 id=\"setup\">Setup</h3>\n\n<p>The first step is to register at Cloudflare &amp; setup your domain. After the first step you need to change the name server for your domain to Cloudflares server.</p>\n\n<p>All your domain belonging can now be managed inside Cloudflare:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-11-14/dns.png\" alt=\"x\" title=\"DNS\" /></p>\n\n<h3 id=\"setting-up-some-rules\">Setting up some rules</h3>\n\n<p>When your DNS changes are done (which can take a couple of hours) you might want to introduce some basic rules. I use these settings, which enforces HTTPS and Cloudflare cache:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-11-14/rules.png\" alt=\"x\" title=\"Rules\" /></p>\n\n<h3 id=\"done-or-nearly-done\">Done… or nearly done.</h3>\n\n<p>Now we have done the “Cloudflare-part”. The next step is to make sure that everything on your page uses HTTPS instead of HTTP to avoid “mixed content”-errors.</p>\n\n<p>Some notes from my own “migration”:</p>\n\n<ul>\n  <li>If you have Google Analytics - make sure you change the property-settings to the HTTPS URL</li>\n  <li>If you use Disqus you <strong>need</strong> to migrate your comments from the HTTP url to the HTTPS URL. There is a migrate tool available, which uses a CSV file.</li>\n</ul>\n\n<h2 id=\"other-solutions\">Other solutions…</h2>\n\n<p>As far as I know there are other, similar, providers out there and of course you can host the page yourself.</p>\n\n<p>Cloudflare is an easy solution if you are willing to hand of the DNS settings of your domain.</p>\n\n<p>Hope this helps!</p>\n","Href":"https://blog.codeinside.eu/2016/11/14/ssl-with-custom-domains-on-gh-pages-via-cloudflare/","RawContent":null},{"Title":"Writing loops in T-SQL","PublishedOn":"2016-10-31T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p>The topic is quite old, but I found it really helpful, so be warned.</p>\n\n<h2 id=\"scenario-iterate-over-a-result-set-and-insert-it-in-a-new-table-in-t-sql\">Scenario: Iterate over a result set and insert it in a new table in T-SQL</h2>\n\n<p>I had to write a SQL migration script to move date from an old table into a new table with a new primary key.</p>\n\n<p><em>Update! I discovered that my problem would have been solved with a much simpler SQL script (INSERT INTO x …(SELECT … FROM Y)). So my example here is pretty dumb - sorry if this confuses you, but I will keep the blogpost to show the mechanics. Thanks Mark!</em></p>\n\n<p>Here was/is my resulting script using <strong><a href=\"https://msdn.microsoft.com/en-us/library/ms180169.aspx\">T-SQL Cursors</a></strong>:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DECLARE @TemplateId as uniqueidentifier;\nDECLARE @UserId as uniqueidentifier;\n\nDECLARE @OldTemplateFavCursor as CURSOR;\n\nSET @OldTemplateFavCursor = CURSOR FOR\nSELECT UserTemplate.[Template_Id], UserTemplate.[User_Id] FROM UserTemplate;\n \nOPEN @OldTemplateFavCursor;\nFETCH NEXT FROM @OldTemplateFavCursor INTO @TemplateId, @UserId;\n \nWHILE @@FETCH_STATUS = 0\nBEGIN\n INSERT INTO dbo.[UserFavoriteTemplate]\n           ([Id]\n           ,[TemplateId]\n           ,[UserId])\n     VALUES\n           (NEWID()\n           ,@TemplateId\n           ,@UserId)\n\nFETCH NEXT FROM @OldTemplateFavCursor INTO @TemplateId, @UserId;\nEND\n \nCLOSE @OldTemplateFavCursor;\nDEALLOCATE @OldTemplateFavCursor;\n</code></pre></div></div>\n\n<h2 id=\"explanation\">Explanation</h2>\n\n<p>In the first couple of lines we just declare some variables.</p>\n\n<p>In this particular script we want to move the “TemplateId” &amp; “UserId” from the table “UserTemplate” into the target table “UserFavoriteTemplate”, but I also want to store an additional GUID as Id.</p>\n\n<p>This line will select our current data into the cursor:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SET @OldTemplateFavCursor = CURSOR FOR SELECT UserTemplate.[Template_Id], UserTemplate.[User_Id] FROM UserTemplate;\n</code></pre></div></div>\n\n<p>With the “OPEN”, “FETCH NEXT” and “CLOSE” we move the cursor and inside the “WHILE” we can do our migration.</p>\n\n<p>The syntax seems (from a C# perspective) strange, but works well for this scenario.</p>\n\n<h2 id=\"performance-consideration\">Performance consideration</h2>\n\n<p>I wouldn’t recommend this approach for large scale migrations or actual production code because I heard that the performance is not as great as some clever joins or other T-SQL magic.</p>\n\n<h2 id=\"make-sure-you-really-need-this\">Make sure you really need this</h2>\n\n<p>You can do some clever joins with SQL - make sure you really need this approach. My example here is not a clever one, so use this feature wisely. (again - thanks to Mark for the comment!)</p>\n\n<p><strong>Thanks Christopher for your help!</strong></p>\n","Href":"https://blog.codeinside.eu/2016/10/31/loops-in-tsql/","RawContent":null},{"Title":"Lets convert a WPF app to the Universal Windows Platform","PublishedOn":"2016-09-30T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"project-centennial---running-desktop-apps-in-the-uwp-world\">Project Centennial - running desktop apps in the UWP world</h2>\n\n<p>Last year Microsoft revealed the plans to run and distribute desktop apps (basically all apps ever written for Windows) in the Universal-Windows-Platform “universe”. The project titel was <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=51691\">“Project Centennial”</a> and a year later the tooling seems to be ok-ish. So, let’s try something simple and convert a simple WPF app to UWP.</p>\n\n<h2 id=\"limitations-with-this-approach\">Limitations with this approach</h2>\n\n<p>Be aware that even if you can “convert” your WPF app this way you will get a UWP-ish app. The executable will only run <strong>on a normal Windows Desktop System</strong>. The app will <strong>not work on a Windows Phone, Xbox or HoloLens</strong> - at least not now.</p>\n\n<p>Also keep in mind that certain operations might fail and that the outcome of some operations might suprise you. The app itself will run in a kind of sandbox. Calls to the file system or registry will be faked. Details can be found <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-behind-the-scenes\">here</a>.</p>\n\n<p>As far as I know from a couple of hours playing around:</p>\n\n<ul>\n  <li>Changes to the Registry will not leak out of the sandbox, but for the app it will be seen as ok and is persistent</li>\n  <li>Changes to Well-Known-Folders (e.g. %AppData%) will not leak out of the sandbox, but for the app it will be seen as ok and is persistent</li>\n  <li>Some operation can leak out to the actual desktop, e.g. start another programm.</li>\n</ul>\n\n<h2 id=\"the-desktop-app-converter\">The Desktop App Converter</h2>\n\n<p>If you have an existing installer or setup you might want to take a look at the [desktop app converter](https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-run-desktop-app-converter. This utility will convert the installer to a UWP package.</p>\n\n<p><a href=\"https://mtaulty.com/2016/09/29/a-quick-skip-through-the-desktop-app-converter/\">A quick walk through can be found on Mike Taultys blog</a>.</p>\n\n<h2 id=\"step-by-step---from-wpf-source-to-uwp-app\">Step by Step - from WPF source to UWP app</h2>\n\n<p>The important steps from the WPF app to a UWP app are also <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-manual-conversion\">documented in the MSDN</a>.</p>\n\n<p>But let’s start with a <strong>simple WPF app (running on .NET 4.6.1)</strong> - this is the MainWindow.xaml</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;Window x:Class=\"WpfToUwpTestApp.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfToUwpTestApp\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow - WpfToUwpTestApp\" Height=\"350\" Width=\"525\"&gt;\n    &lt;StackPanel&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click1\"&gt;Write in Registry&lt;/Button&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click2\"&gt;Write in AppData&lt;/Button&gt;\n        &lt;Button Height=\"100\" Width=\"100\" Click=\"Button_Click3\"&gt;Open HTTP Address&lt;/Button&gt;\n\n    &lt;/StackPanel&gt;\n&lt;/Window&gt;\n</code></pre></div></div>\n\n<p>The code behind:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n    }\n\n    private void Button_Click1(object sender, RoutedEventArgs e)\n    {\n        RegistryKey key = Registry.CurrentUser.OpenSubKey(\"Software\", true);\n\n        key.CreateSubKey(\"WpfToUwpTestApp\");\n        key = key.OpenSubKey(\"WpfToUwpTestApp\", true);\n\n\n        key.CreateSubKey(\"ItWorks\");\n        key = key.OpenSubKey(\"ItWorks\", true);\n\n        key.SetValue(\"ItWorks\", \"true\");\n    }\n\n    private void Button_Click2(object sender, RoutedEventArgs e)\n    {\n        string roaming = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n\n        string appFolder = System.IO.Path.Combine(roaming, \"WpfToUwpTestApp\");\n\n        string file = System.IO.Path.Combine(appFolder, \"Test.txt\");\n\n        if (Directory.Exists(appFolder) == false)\n        {\n            Directory.CreateDirectory(appFolder);\n        }\n\n        File.WriteAllText(file, \"Hello World!\");\n    }\n\n    private void Button_Click3(object sender, RoutedEventArgs e)\n    {\n        Process.Start(\"http://www.google.com\");\n    }\n}\n</code></pre></div></div>\n\n<p>Pretty simple, right? Those three operations came just to my mind. In general I wouldn’t use the Registry at all, but I had a use case in mind where I need to access the Registry.</p>\n\n<p>I also added a couple of dummy store images (from the default UWP app project template) - my solution looks like this:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/sln.png\" alt=\"x\" title=\"Solution\" /></p>\n\n<p>When we build the .csproj the output should look like this:</p>\n\n<ul>\n  <li>WpfToUwpTestApp.exe</li>\n  <li>appxmanifest.xml</li>\n  <li>Assets/StoreLogo.png</li>\n  <li>Assets/Square150x150Logo.scale-200.png</li>\n  <li>Assets/Square44x44Logo.scale-200.png</li>\n</ul>\n\n<h2 id=\"the-appmanifestxml\">The appmanifest.xml</h2>\n\n<p>The next step is to create the <strong>appmanifest.xml</strong> - on the <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-manual-conversion\">MSDN there is a handy template</a>. The Desktop App Converter does the same thing and tries to create this file automatically, but it’s not that hard to set it by hand:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;Package</span>\n   <span class=\"na\">xmlns=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\"</span>\n   <span class=\"na\">xmlns:uap=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/uap/windows10\"</span>\n   <span class=\"na\">xmlns:rescap=</span><span class=\"s\">\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;Identity</span> <span class=\"na\">Name=</span><span class=\"s\">\"WpfToUwpTestApp\"</span>\n    <span class=\"na\">ProcessorArchitecture=</span><span class=\"s\">\"x64\"</span>\n    <span class=\"na\">Publisher=</span><span class=\"s\">\"CN=Robert\"</span>\n    <span class=\"na\">Version=</span><span class=\"s\">\"1.0.0.0\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;Properties&gt;</span>\n    <span class=\"nt\">&lt;DisplayName&gt;</span>WpfToUwpTestApp<span class=\"nt\">&lt;/DisplayName&gt;</span>\n    <span class=\"nt\">&lt;PublisherDisplayName&gt;</span>Robert<span class=\"nt\">&lt;/PublisherDisplayName&gt;</span>\n    <span class=\"nt\">&lt;Description&gt;</span>No description entered<span class=\"nt\">&lt;/Description&gt;</span>\n    <span class=\"nt\">&lt;Logo&gt;</span>Assets/StoreLogo.png<span class=\"nt\">&lt;/Logo&gt;</span>\n  <span class=\"nt\">&lt;/Properties&gt;</span>\n  <span class=\"nt\">&lt;Resources&gt;</span>\n    <span class=\"nt\">&lt;Resource</span> <span class=\"na\">Language=</span><span class=\"s\">\"en-us\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Resources&gt;</span>\n  <span class=\"nt\">&lt;Dependencies&gt;</span>\n    <span class=\"nt\">&lt;TargetDeviceFamily</span> <span class=\"na\">Name=</span><span class=\"s\">\"Windows.Desktop\"</span> <span class=\"na\">MinVersion=</span><span class=\"s\">\"10.0.14316.0\"</span> <span class=\"na\">MaxVersionTested=</span><span class=\"s\">\"10.0.14316.0\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Dependencies&gt;</span>\n  <span class=\"nt\">&lt;Capabilities&gt;</span>\n    <span class=\"nt\">&lt;rescap:Capability</span> <span class=\"na\">Name=</span><span class=\"s\">\"runFullTrust\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Capabilities&gt;</span>\n  <span class=\"nt\">&lt;Applications&gt;</span>\n    <span class=\"nt\">&lt;Application</span> <span class=\"na\">Id=</span><span class=\"s\">\"Test\"</span> <span class=\"na\">Executable=</span><span class=\"s\">\"WpfToUwpTestApp.exe\"</span> <span class=\"na\">EntryPoint=</span><span class=\"s\">\"Windows.FullTrustApplication\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;uap:VisualElements</span>\n       <span class=\"na\">BackgroundColor=</span><span class=\"s\">\"#464646\"</span>\n       <span class=\"na\">DisplayName=</span><span class=\"s\">\"WpfToUwpTestApp\"</span>\n       <span class=\"na\">Square150x150Logo=</span><span class=\"s\">\"Assets/Square150x150Logo.scale-200.png\"</span>\n       <span class=\"na\">Square44x44Logo=</span><span class=\"s\">\"Assets/Square44x44Logo.scale-200.png\"</span>\n       <span class=\"na\">Description=</span><span class=\"s\">\"WpfUwpWriteInRegistry - Desc\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/Application&gt;</span>\n  <span class=\"nt\">&lt;/Applications&gt;</span>\n<span class=\"nt\">&lt;/Package&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"create-the-appappx-package\">Create the App.appx package</h2>\n\n<p>Now we are ready to create the appx package. You need the Windows 10 SDK to do this.</p>\n\n<p>To simplify things, I copied the needed files from the build output to a folder called _App.</p>\n\n<p>To create the package, invoke the following command:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\makeappx.exe\" pack -d \"%~dp0_App\" -p \"%~dp0App.appx\"\n</code></pre></div></div>\n\n<p>The result is a unsigned appx package called “App”.</p>\n\n<h2 id=\"create-a-valid-pfx-one-time-only\">Create a valid pfx (one time only)</h2>\n\n<p>In the following step we need a valid pfx to sign the package. For development you can use this command to create a pfx:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\makecert.exe\" -r -h 0 -n \"CN=Robert\" -eku 1.3.6.1.5.5.7.3.3 -pe -sv App.pvk App.cer \n\n\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\pvk2pfx.exe\" -pvk App.pvk -spc App.cer -pfx App.pfx -po apptest\n</code></pre></div></div>\n\n<p>After this you should see a “App.pfx” in the folder. I’m not 100% sure if this step is really needed, but I needed to do it, otherwise I couldn’t install the app:</p>\n\n<p>Now click on the pfx and enter the password “apptest” and import it in the “Trusted Root CAs”:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/trust.png\" alt=\"x\" title=\"Importing the pfx\" /></p>\n\n<h2 id=\"sign-appappx\">Sign App.appx</h2>\n\n<p>Now we need to sign the package and we are done:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool.exe\" sign /f \"App.pfx\" -fd SHA256 /p apptest \"App.appx\"\n</code></pre></div></div>\n\n<h2 id=\"install-the-app\">Install the App!</h2>\n\n<p>Now you can double click on the appx package and the installer will show up:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/install.png\" alt=\"x\" title=\"install the app\" /></p>\n\n<h2 id=\"running-the-app\">Running the App</h2>\n\n<p>And there is our beauty:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-09-30/app.png\" alt=\"x\" title=\"running the app\" /></p>\n\n<h2 id=\"exploring-the-sandbox\">Exploring the sandbox:</h2>\n\n<p>Remember our 3 methods? The results of those three calls are:</p>\n\n<ul>\n  <li>Write to the Registry: Seems to work for the app, but (as expected) the registry value will not leak out of the “sandbox”</li>\n  <li>Write to %appdata%: Seems to work for the app, but the data value will not leak out of the “sandbox”</li>\n  <li>Open a browser: The default browser will be invoked for a HTTP url.</li>\n</ul>\n\n<p>It was my first try to convert a (simple) WPF app to UWP and the result is interesting.</p>\n\n<p>Hope my first steps in this world might help you!</p>\n\n<p>The code and a handy readme.txt is available on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/WpfToUwpTestApp\">GitHub</a>.</p>\n\n<h2 id=\"from-the-comments-fun-with-registydat-files\">From the comments: Fun with registy.dat files:</h2>\n\n<p>James Hancock/John Galt discovered a nice registy trick. His goal was to “fake” a given registry key, so that the converted UWP app can see a “virtual” registry key. This can be done with a file named “registry.dat”.</p>\n\n<p>The registry.dat seems to be the source and target of all write actions inside the app:</p>\n\n<p>“The virtual registery is always the registry.dat. if you don’t provide a default version then one is created on first use for you.</p>\n\n<p>But if you do, then yes you can deploy whatever entries you want as a starting point for your app otherwise the starting point is whatever that computer currently has in the real registry.”</p>\n\n<p>You can create such registry.dat files via RegEdit &amp; export it as registry hive. Be aware, that my test run wasn’t successful, but I hope to get working sample. Until that I hope James comments will be helpful.</p>\n","Href":"https://blog.codeinside.eu/2016/09/30/lets-convert-a-wpf-app-to-uwp-via-the-uwp-bridge/","RawContent":null},{"Title":"TFS 2015: Adding a new Windows Build Agent","PublishedOn":"2016-08-10T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"the-tfs-2015-build-system\">The TFS 2015 Build System</h2>\n\n<p>The build system before TFS 2015 was based on a pretty arcane XAML workflow engine which was manageable, but not fun to use. With TFS 2015 a new build system was implemented, which behave pretty much the same way as other build systems (e.g. TeamCity or AppVeyor).</p>\n\n<p>The “build workflow” is based on a simple “task”-concept.</p>\n\n<p>There are many related topics in the TFS world, e.g. Release-Management, but this blogpost will just focus on the “Getting the system ready”-part.</p>\n\n<h2 id=\"tfs-build-agents\">TFS Build Agents</h2>\n\n<p>Like the other parts of Microsoft the TFS is now also in the cross-platform business. The build system in TFS 2015 is capable of building a huge range of languages. All you need is a \ncompatible build agent.</p>\n\n<p>My (simple) goal was to build a .NET application on a Windows build agent via the new TFS 2015 build system.</p>\n\n<h2 id=\"step-1-adding-a-new-build-agent\">Step 1: Adding a new build agent</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/adding-buildagent.png\" alt=\"Important - Download Agent\" title=\"Important - Download Agent\" />.</p>\n\n<p>This one is maybe the hardest part. Instead of a huge TFS-Agent-Installer.msi you need to navigate inside the TFS control panel to the <strong>“Agent pool”</strong>-tab.</p>\n\n<p>You need at least one pool and need to click the “Download Agent” button.</p>\n\n<h2 id=\"step-2-configure-the-agent\">Step 2: Configure the agent</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/config-buildagent.png\" alt=\"Configuration\" title=\"Configuration\" />.</p>\n\n<p>The .zip package contains the actual build agent executable and a .cmd file.</p>\n\n<p>Invoke the <strong>“ConfigureAgent.cmd”</strong>-file:</p>\n\n<p>We run those agents as Windows Service (which was one of the last config-questions) and are pretty happy with the system.</p>\n\n<h2 id=\"step-3-you-are-done\">Step 3: You are done</h2>\n\n<p>Now your new build agent should appear under the given build agent pool:</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-08-10/resulting-buildagent.png\" alt=\"TFS Build Agents\" title=\"TFS Build Agents\" />.</p>\n\n<h2 id=\"msdn-link\">MSDN Link</h2>\n\n<p>After googleing around I also found the <strong><a href=\"https://www.visualstudio.com/en-us/docs/build/agents/windows\">corresponding TFS HowTo</a></strong>, which describes more or less the complete setup. Well… now it is documented on MSDN and this blog. Maybe this will help my future-self ;)</p>\n","Href":"https://blog.codeinside.eu/2016/08/10/adding-a-new-windowsagent-to-tfs2015-build/","RawContent":null},{"Title":"CAKE: Building solutions with C# & Roslyn","PublishedOn":"2016-07-09T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-07-09/cake.png\" alt=\"x\" title=\"CAKE - C# Make\" /></p>\n\n<h2 id=\"cake---c-make\">CAKE - C# Make</h2>\n\n<ul>\n  <li>A DSL for build tasks (e.g. build following projects, copy stuff, deploy stuff etc.)</li>\n  <li>It’s just C# code that gets compiled via Roslyn</li>\n  <li><a href=\"https://github.com/cake-build/cake\">Active community, OSS &amp; written in C#</a></li>\n  <li>You can get CAKE via <a href=\"https://www.nuget.org/packages/Cake\">NuGet</a></li>\n  <li>Before we begin you might want to check out the actual website of <a href=\"http://cakebuild.net/\">CAKE</a></li>\n  <li>Cross Platform support</li>\n</ul>\n\n<p>Our goal: Building, running tests, package NuGet Packages etc.</p>\n\n<h2 id=\"related-msbuild-and-fake-blogposts\">Related: MSBuild and FAKE blogposts</h2>\n\n<p>I already did a couple of MSBuild and FAKE related blogposts, so if you are interested on these topics as well go ahead (some are quite old, there is a high chance that some pieces might not apply anymore):</p>\n\n<ul>\n  <li><a href=\"http://blog.codeinside.eu/2010/12/15/howto-msbuild-stylecop/\">MSBuild &amp; Stylecop</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/12/howto-build-msbuild-solutions/\">MSBuild &amp; Building solutions</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/21/howto-msdeploy-msbuild/\">MSBuild &amp; MSDeploy</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/24/howto-open-mstest-with-msbuild-2/\">MSBuild &amp; MSTest 1</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2010/11/29/howto-open-mstest-with-msbuild/\">MSBuild &amp; MSTest 2</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2011/01/06/howto-msbuild-nuit/\">MSBuild &amp; NUnit</a></li>\n  <li>\n    <p><a href=\"http://blog.codeinside.eu/2010/12/06/howto-web-config-transformations-with-msbuild/\">MSBuild &amp; Web.config Transformations</a></p>\n  </li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/23/fake-building-with-fake/\">“FAKE: Building C# projects without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/24/fake-running-xunit-tests-with-fake/\">“FAKE: Running xUnit Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/06/21/fake-create-nuget-packages/\">“FAKE: Create NuGet Packages without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/08/30/fake-running-mstest-tests-with-fake/\">“FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2016/06/12/fake-build-aspnet-projects-with-webconfig-transform/\">“FAKE: Build ASP.NET projects with web.config transformation (and without knowing a tiny bit of F#)”</a></li>\n</ul>\n\n<p>Ok… now back to CAKE.</p>\n\n<h2 id=\"lets-start-with-the-basics-building\">Let’s start with the basics: Building</h2>\n\n<p>I created a pretty simple WPF app and <a href=\"http://cakebuild.net/docs/tutorials/setting-up-a-new-project\">followed these instructions</a>.</p>\n\n<h2 id=\"the-buildcake-script\">The build.cake script</h2>\n\n<p>My script is a simplified version <a href=\"https://github.com/cake-build/example/blob/master/build.cake\">of this build script</a>:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// ARGUMENTS\nvar target = Argument(\"target\", \"Default\");\n\n// TASKS\nTask(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n    NuGetRestore(\"CakeExampleWithWpf.sln\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =&gt;\n{\n      MSBuild(\"CakeExampleWithWpf.sln\", settings =&gt;\n        settings.SetConfiguration(\"Release\"));\n\n});\n\n// TASK TARGETS\nTask(\"Default\").IsDependentOn(\"Build\");\n\n// EXECUTION\nRunTarget(target);\n</code></pre></div></div>\n\n<p>If you know FAKE or MSBuild, this is more or less the same structure. You define tasks, which may depend on other tasks. At the end you invoke one task and the dependency chain will do its work.</p>\n\n<h2 id=\"invoke-buildcake\">Invoke build.cake</h2>\n\n<p>The “build.ps1” will invoke “tools/cake.exe” with the input file “build.cake”.</p>\n\n<p><strong>“build.ps1” is just a helper.</strong> \nThis Powershell script will download nuget.exe and download the CAKE NuGet-Package and extract it under a /tools folder. If you don’t have problems with binary files in your source control, you don’t need this Powershell script.</p>\n\n<h2 id=\"our-first-cake-script\">Our first CAKE script!</h2>\n\n<p>The output is very well formatted and should explain the mechanics behind it good enough:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Time Elapsed 00:00:02.86\nFinished executing task: Build\n\n========================================\nDefault\n========================================\nExecuting task: Default\nFinished executing task: Default\n\nTask                          Duration\n--------------------------------------------------\nRestore-NuGet-Packages        00:00:00.5192250\nBuild                         00:00:03.1315658\nDefault                       00:00:00.0113019\n--------------------------------------------------\nTotal:                        00:00:03.6620927\n</code></pre></div></div>\n\n<p>The first steps are pretty easy and it’s much easier than MSBuild and feels good if you know C#.</p>\n\n<p>The super simple intro code can be found on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/CakeIntro\"><strong>GitHub</strong></a>.</p>\n","Href":"https://blog.codeinside.eu/2016/07/09/cake-building-with-cake/","RawContent":null},{"Title":"FAKE: Build ASP.NET projects with web.config transformation (and without knowing a tiny bit of F#)","PublishedOn":"2016-06-12T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<p><em>This is a follow-up to my other FAKE posts:</em></p>\n\n<ul>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/23/fake-building-with-fake/\">“FAKE: Building C# projects without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/02/24/fake-running-xunit-tests-with-fake/\">“FAKE: Running xUnit Tests with FAKE without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/06/21/fake-create-nuget-packages/\">“FAKE: Create NuGet Packages without knowing a tiny bit of F#”</a></li>\n  <li><a href=\"http://blog.codeinside.eu/2015/08/30/fake-running-mstest-tests-with-fake/\">“FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F#”</a></li>\n</ul>\n\n<h2 id=\"whats-the-difference-between-a-aspnet-and-other-projects\">What’s the difference between a ASP.NET and other projects?</h2>\n\n<p>The most obvious difference is that the output is a bunch of dlls and content files. Additionally you might have a <strong>web.debug.config or web.release.config</strong> in your source folder.</p>\n\n<p>Both files are important, because they are used during a Visual-Studio build as a <a href=\"https://msdn.microsoft.com/en-us/library/dd465326(v=vs.110).aspx\"><strong>Web.Config Transformation</strong></a>.</p>\n\n<p>With a normal build the transformation will not kick in, so we need a way to trigger the transformation “manually”.</p>\n\n<h2 id=\"project-overview\">Project Overview</h2>\n\n<p>The sample project consists of one ASP.NET project and the .fsx file.</p>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-06-12/project.png\" alt=\"x\" title=\"Project Overview\" /></p>\n\n<p>The “released” web.config should cover this 3 main transformation parts:</p>\n\n<ul>\n  <li>DefaultConnectionString to ‘ReleaseSQLServer’</li>\n  <li>No “debug”-attribute on system.web</li>\n  <li>developmentMode-AppSetting set to ‘true’</li>\n</ul>\n\n<p><strong>Web.Release.config</strong></p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;configuration</span> <span class=\"na\">xmlns:xdt=</span><span class=\"s\">\"http://schemas.microsoft.com/XML-Document-Transform\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;connectionStrings&gt;</span>\n    <span class=\"nt\">&lt;add</span> <span class=\"na\">name=</span><span class=\"s\">\"DefaultConnection\"</span>\n      <span class=\"na\">connectionString=</span><span class=\"s\">\"ReleaseSQLServer\"</span>\n      <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"SetAttributes\"</span> <span class=\"na\">xdt:Locator=</span><span class=\"s\">\"Match(name)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/connectionStrings&gt;</span>\n\n  <span class=\"nt\">&lt;appSettings&gt;</span>\n    <span class=\"nt\">&lt;add</span> <span class=\"na\">key=</span><span class=\"s\">\"developmentMode\"</span> <span class=\"na\">value=</span><span class=\"s\">\"true\"</span> <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"SetAttributes\"</span>\n         <span class=\"na\">xdt:Locator=</span><span class=\"s\">\"Match(key)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/appSettings&gt;</span>\n  \n  <span class=\"nt\">&lt;system.web&gt;</span>\n    <span class=\"nt\">&lt;compilation</span> <span class=\"na\">xdt:Transform=</span><span class=\"s\">\"RemoveAttributes(debug)\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/system.web&gt;</span>\n<span class=\"nt\">&lt;/configuration&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"the-fake-script\">The FAKE script</h2>\n\n<p>We reuse the MSBuild-Helper from FAKE and inject a couple of “Publish”-related stuff, which will trigger the transformation.</p>\n\n<p><strong>A few remarks:</strong> In the “normal” WebDeploy-World you would have a PublishProfile and it would end up with a .zip-file and a couple of other files that fill in parameters like the ConnectionString. With this MSBuild command I mimik a part of this behavior and use the temporary output as our main artifact. In my most apps I use web.config transformations only for “easy” stuff (e.g. remove the debug attribute) - if you are doing fancy stuff and the output is not what you want, please let me know.</p>\n\n<p><strong>This MSBuild command <em>should</em> apply all your web.config transformations.</strong></p>\n\n<p><strong>Publish a ASP.NET project</strong></p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\nTarget \"BuildWebApp\" (fun _ -&gt;\ntrace \"Building WebHosted Connect...\"\n!! \"**/*.csproj\"\n |&gt; MSBuild artifactsBuildDir \"Package\"\n    [\"Configuration\", \"Release\"\n     \"Platform\", \"AnyCPU\"\n     \"AutoParameterizationWebConfigConnectionStrings\", \"False\"\n     \"_PackageTempDir\", (@\"..\\\" + artifactsDir + @\"Release-Ready-WebApp\")\n     ]\n |&gt; Log \"AppBuild-Output: \"\n)\n...\n</code></pre></div></div>\n\n<h3 id=\"autoparameterizationwebconfigconnectionstrings-or-how-to-get-rid-of-replacabletoken_\">“AutoParameterizationWebConfigConnectionStrings” or how to get rid of $(ReplacableToken_…</h3>\n\n<p><em>Blogpost updated on 2016-07-18</em></p>\n\n<p>A friend told me that his transformed web.config contained “$(ReplaceableToken_…)” strings. It seems that “connectionStrings” are treated specially. If you have a connectionString in your web.config and don’t set <a href=\"http://stackoverflow.com/questions/7207689/how-to-get-rid-of-replacabletoken-in-web-config-completely\">“AutoParameterizationWebConfigConnectionStrings=False”</a> you will get something like that:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;connectionStrings&gt;\n  &lt;!-- Not the result we are looking for :-/ --&gt;\n  &lt;add name=\"DefaultConnection\" connectionString=\"$(ReplacableToken_DefaultConnection-Web.config Connection String_0)\" providerName=\"System.Data.SqlClient\" /&gt;\n&lt;/connectionStrings&gt;\n</code></pre></div></div>\n\n<p>I would say this is not the result you are expecting. With the “AutoParameterizationWebConfigConnectionStrings=False” parameter it should either do a transformation or leave the default-connectionString value in the result.</p>\n\n<p><em>Thanks to Timur Zanagar! I completely missed this issue.</em></p>\n\n<h2 id=\"result\">Result</h2>\n\n<p><img src=\"https://blog.codeinside.eu/assets/md-images/2016-06-12/output.png\" alt=\"x\" title=\"Output\" /></p>\n\n<p>This build will produce two artifacts - the build-folder just contains the normal build output, but <strong>without</strong> a web.config transformation.</p>\n\n<p>The other folder contains a ready to deploy web application, <strong>with the web.release.config applied</strong>.</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;connectionStrings&gt;\n  &lt;add name=\"DefaultConnection\" connectionString=\"ReleaseSQLServer\" providerName=\"System.Data.SqlClient\" /&gt;\n&lt;/connectionStrings&gt;\n&lt;appSettings&gt;\n  ...\n  &lt;add key=\"developmentMode\" value=\"true\" /&gt;\n&lt;/appSettings&gt;\n&lt;system.web&gt;\n  ...\n&lt;/system.web&gt;\n</code></pre></div></div>\n\n<p>You can find the complete <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/LetsUseFake-AspNet\">sample &amp; build script on GitHub</a>.</p>\n","Href":"https://blog.codeinside.eu/2016/06/12/fake-build-aspnet-projects-with-webconfig-transform/","RawContent":null},{"Title":"Copy to clipboard with Javascript","PublishedOn":"2016-05-12T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"\n<h2 id=\"clipboard-current-state-of-the-art\">Clipboard? Current state of the art…</h2>\n\n<p>I think everybody knows the clipboard. The goal is that we can store text inside the users clipboard, so he can just paste it. Most sites uses either Flash or some sort of mini-popup with a pre-selected text inside a textarea.</p>\n\n<p>Both ways are not super user friendly and Flash is definitely done.</p>\n\n<h2 id=\"clipboard-api\">Clipboard API?</h2>\n\n<p>Currently there are some draft specs for a real clipboard API, but as far as I know, it’s far from <a href=\"http://caniuse.com/#feat=clipboard\">done</a>.</p>\n\n<p><strong>The good news:</strong> For our use case there is a pretty handy workaround available, which I found on <a href=\"http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\">StackOverflow</a>.</p>\n\n<h2 id=\"the-code\">The code:</h2>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;script&gt;\n    function detectIE() {\n        var ua = window.navigator.userAgent;\n\n        var msie = ua.indexOf('MSIE ');\n        if (msie &gt; 0) {\n            // IE 10 or older =&gt; return version number\n            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        var trident = ua.indexOf('Trident/');\n        if (trident &gt; 0) {\n            // IE 11 =&gt; return version number\n            var rv = ua.indexOf('rv:');\n            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        // other browser or edge\n        return false;\n    }\n\n    // source: http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\n    // enhancement with special case for IEs, otherwise the temp textarea will be visible\n    function copyTextToClipboard(text) {\n        if (detectIE()) {\n            try {\n                window.clipboardData.setData('Text', text);\n                console.log('Copying text command via IE-setData');\n            } catch (err) {\n                console.log('Oops, unable to copy via IE-setData');\n            }\n        }\n        else {\n\n            var textArea = document.createElement(\"textarea\");\n\n            //\n            //  This styling is an extra step which is likely not required. \n            //\n            // Why is it here? To ensure:\n            // 1. the element is able to have focus and selection.\n            // 2. if element was to flash render it has minimal visual impact.\n            // 3. less flakyness with selection and copying which might occur if\n            //    the textarea element is not visible.\n            //\n            // The likelihood is the element won't even render, not even a flash,\n            // so some of these are just precautions. \n            // \n            // However in IE the element\n            // is visible whilst the popup box asking the user for permission for\n            // the web page to copy to the clipboard. To prevent this, we are using \n            // the detectIE workaround.\n\n            // Place in top-left corner of screen regardless of scroll position.\n            textArea.style.position = 'fixed';\n            textArea.style.top = 0;\n            textArea.style.left = 0;\n\n            // Ensure it has a small width and height. Setting to 1px / 1em\n            // doesn't work as this gives a negative w/h on some browsers.\n            textArea.style.width = '2em';\n            textArea.style.height = '2em';\n\n            // We don't need padding, reducing the size if it does flash render.\n            textArea.style.padding = 0;\n\n            // Clean up any borders.\n            textArea.style.border = 'none';\n            textArea.style.outline = 'none';\n            textArea.style.boxShadow = 'none';\n\n            // Avoid flash of white box if rendered for any reason.\n            textArea.style.background = 'transparent';\n\n\n            textArea.value = text;\n\n            document.body.appendChild(textArea);\n\n            textArea.select();\n\n            try {\n                var successful = document.execCommand('copy');\n                var msg = successful ? 'successful' : 'unsuccessful';\n                console.log('Copying text command was ' + msg);\n            } catch (err) {\n                console.log('Oops, unable to copy');\n            }\n\n            document.body.removeChild(textArea);\n        }\n\n    }\n&lt;/script&gt;\n</code></pre></div></div>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<p>The usage is pretty simple, just call copyToClipboard, e.g.</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;button type=\"button\" onclick=\"copyTextToClipboard('Foobar!')\"&gt;\n\tSet Foobar to clipboard\n&lt;/button&gt;\n</code></pre></div></div>\n\n<h2 id=\"documentexeccommandcopy\">document.execCommand(‘copy’)</h2>\n\n<p>This API is a bit strange, because it only works for visible elements and IE might render a small warning. To get rid of this effect we use a older IE-only API. “document.execCommand” is not limited to copy - there are some nice ideas around it. The <strong><a href=\"https://developer.mozilla.org/de/docs/Web/API/Document/execCommand\">Mozilla site</a></strong> has a large documentation about this function.</p>\n\n<p>A full demo is available on <strong><a href=\"https://jsfiddle.net/uxozxb04/1/\">JSFiddle</a></strong> and the code is stored on <a href=\"https://github.com/Code-Inside/Samples/tree/master/2016/clipboardjs\"><strong>GitHub</strong></a></p>\n\n<p>Hope this helps.</p>\n","Href":"https://blog.codeinside.eu/2016/05/12/copy-to-clipboard-with-javascript/","RawContent":null}],"ResultType":"Feed"},"GitHubEventsOrg":{"Events":[{"Id":"8067320306","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:52","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/a4cd43afcb5f04b75fa5a09ed2b8dc775769d5b2...c88073e561f2f794d31c98b1647c3fdb6ab0cf4c","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067320224","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:46","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/ba135c6b5a79b55ef88a85fd0be325239b9736f1...a4cd43afcb5f04b75fa5a09ed2b8dc775769d5b2","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067320130","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:41","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/7d35367cad0261ebcce20a16bcb97fc5a6639d91...ba135c6b5a79b55ef88a85fd0be325239b9736f1","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067320076","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:38","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/e7c4c57b3217da5f96cb0b1a2dd6378cd675c958...7d35367cad0261ebcce20a16bcb97fc5a6639d91","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067319998","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:32","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/3c9b042a01e2ee9315608d69ef423ff7037533c2...e7c4c57b3217da5f96cb0b1a2dd6378cd675c958","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067319957","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:30","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/883c5a4d07f5165dea5f4d964a242972ad7ba985...3c9b042a01e2ee9315608d69ef423ff7037533c2","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067319786","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:19","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/bd8b6a636a36ccc1bd920c64da08cdeeffbc07f8...883c5a4d07f5165dea5f4d964a242972ad7ba985","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8067319548","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:09","Actor":"Code-Inside-Bot","Repository":"Code-Inside/Hub","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Hub/compare/01abf72dead2f3b69afb0cc00c031a0c033592cd...0ac2b58329acb5ba9adea629796473ab7d5fec74","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Hub","RelatedBody":null},{"Id":"8067319481","Type":"PushEvent","CreatedAt":"2018-08-05T05:30:05","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/dcbace844d76a81e78a8e59599b7ff1b73cd6591...bd8b6a636a36ccc1bd920c64da08cdeeffbc07f8","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065714314","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:53","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/9373116ef89ea3e54984b56fa4fd3e2a61cbeead...dcbace844d76a81e78a8e59599b7ff1b73cd6591","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065714211","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:47","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/52ec43c8e8e49dc7359fc4aff890ff34ba9399da...9373116ef89ea3e54984b56fa4fd3e2a61cbeead","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065714113","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:41","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/2be6ad12fae55e35bdba1516268f7f03d569ca1f...52ec43c8e8e49dc7359fc4aff890ff34ba9399da","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065714053","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:38","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/d7c5071c30dcd8852f18b2828f752a4b474babdf...2be6ad12fae55e35bdba1516268f7f03d569ca1f","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065713944","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:33","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/94a1ca2053d81359b3bd9a2280138377adacc9c3...d7c5071c30dcd8852f18b2828f752a4b474babdf","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065713886","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:30","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/27c8c43bfb144ab31e4ab474a392b6133b8c6f30...94a1ca2053d81359b3bd9a2280138377adacc9c3","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065713677","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:20","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/4c6d1c159ffcb9cb14f8ca84a7a2cf6fc183642e...27c8c43bfb144ab31e4ab474a392b6133b8c6f30","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8065713410","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:09","Actor":"Code-Inside-Bot","Repository":"Code-Inside/Hub","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Hub/compare/13c1bcef4dd754f5adbbaed9e13ac1b00ee1073d...01abf72dead2f3b69afb0cc00c031a0c033592cd","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Hub","RelatedBody":null},{"Id":"8065713322","Type":"PushEvent","CreatedAt":"2018-08-04T05:30:05","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/ac459aecbcfdc82d37dda144d2c99cfc01d208b2...4c6d1c159ffcb9cb14f8ca84a7a2cf6fc183642e","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064819457","Type":"PushEvent","CreatedAt":"2018-08-03T21:06:05","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/674e76c4b26b568cf78773d6127e0c3561afd9b6...ac459aecbcfdc82d37dda144d2c99cfc01d208b2","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064819108","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:59","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/621b1b3eeca0622d73dd52e137e47d717f647640...674e76c4b26b568cf78773d6127e0c3561afd9b6","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818764","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:53","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/61b07bd9ef2bf29b022a5e5e4ee8aa43060f869c...621b1b3eeca0622d73dd52e137e47d717f647640","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818601","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:50","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/b6529242682deda9d365982cd493f7548794094b...61b07bd9ef2bf29b022a5e5e4ee8aa43060f869c","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818421","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:47","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/06ef9e6abb79913a9bd67144d1c18901a60877f7...b6529242682deda9d365982cd493f7548794094b","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818302","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:46","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/6d796c1068c326972fec82d747f81173ed81e386...06ef9e6abb79913a9bd67144d1c18901a60877f7","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818117","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:43","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/97ab434ccdc034de809e02ac3b6053fca3114e5d...6d796c1068c326972fec82d747f81173ed81e386","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064818036","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:42","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/be8f5ba57d51092b46fbddecee3145f0688f94c4...97ab434ccdc034de809e02ac3b6053fca3114e5d","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064817815","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:38","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/fda4406f82fac4713072527dd23c448e05dcfbf4...be8f5ba57d51092b46fbddecee3145f0688f94c4","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064817432","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:33","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/3e7b8a9356e8282c331c807e803a31f5467778ac...fda4406f82fac4713072527dd23c448e05dcfbf4","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064817170","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:28","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/ed7dc952291d9ba7a97ac7db6844a398b4b2c0e7...3e7b8a9356e8282c331c807e803a31f5467778ac","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8064816515","Type":"PushEvent","CreatedAt":"2018-08-03T21:05:18","Actor":"Code-Inside-Bot","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/9c013304bb0d34bfd93c68b96cdf180dd532529e...ed7dc952291d9ba7a97ac7db6844a398b4b2c0e7","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null}],"ResultType":"GitHubEvent"},"GitHubEventsUser":{"Events":[{"Id":"8064809604","Type":"PushEvent","CreatedAt":"2018-08-03T21:03:30","Actor":"robertmuehsig","Repository":"Code-Inside/Sloader","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Sloader/compare/a61063238932a9aa94d5198d4faadd68611fff8b...b89778cb5125e5d34fb71ddc7e1686e2d42400ed","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/Sloader","RelatedBody":null},{"Id":"8064689007","Type":"PushEvent","CreatedAt":"2018-08-03T20:33:48","Actor":"robertmuehsig","Repository":"Code-Inside/Sloader","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Sloader/compare/48ae33cab1a5bed46408ca1c6c03c41f892809e5...a61063238932a9aa94d5198d4faadd68611fff8b","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/Sloader","RelatedBody":null},{"Id":"8060971101","Type":"PushEvent","CreatedAt":"2018-08-03T07:16:37","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/36a68bf4d04615d76f4f19dcde940fe2a8b0d083...cfbd49bc236121cedb9a7c936151a059a92f7344","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"8060843547","Type":"PushEvent","CreatedAt":"2018-08-03T06:40:56","Actor":"oliverguhr","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/c1c4b3370707b70610cf1fce6c0e3d7a5fed0496...36a68bf4d04615d76f4f19dcde940fe2a8b0d083","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"8059274275","Type":"PushEvent","CreatedAt":"2018-08-02T21:20:03","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/57bde44f5a2faf8bf1fd6ca04fc17c2943b213eb...795941f33b7663ed02dc8562d1b0bf7031d0b707","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8059269903","Type":"PushEvent","CreatedAt":"2018-08-02T21:19:05","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/3858f60666a5419665cd17455f8255ef18039468...57bde44f5a2faf8bf1fd6ca04fc17c2943b213eb","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8059216326","Type":"PushEvent","CreatedAt":"2018-08-02T21:07:27","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack-Backend","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack-Backend/compare/8f84ce9c961b0fc936520a08d16a12c2dbaf7335...9ea4c772fd25f16f70cfac3f9e53427b8d7a9fe0","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack-Backend","RelatedBody":null},{"Id":"8059170228","Type":"PushEvent","CreatedAt":"2018-08-02T20:57:44","Actor":"robertmuehsig","Repository":"Code-Inside/Sloader","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Sloader/compare/b55b6d65012a151fbad6cca3cc35ce8720ecceb5...48ae33cab1a5bed46408ca1c6c03c41f892809e5","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/Sloader","RelatedBody":null},{"Id":"8056138507","Type":"PushEvent","CreatedAt":"2018-08-02T11:41:58","Actor":"robertmuehsig","Repository":"Sevitec/oneoffixx-docs","Organization":"Sevitec","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Sevitec/oneoffixx-docs/compare/b70115a148cd23d152acc1e061208cc654a20e31...5aec2a3e7cc75e8d6ef01c3616425b610015c7aa","RelatedDescription":"Pushed to refs/heads/gh-pages at Sevitec/oneoffixx-docs","RelatedBody":null},{"Id":"8056133600","Type":"PushEvent","CreatedAt":"2018-08-02T11:40:53","Actor":"robertmuehsig","Repository":"Sevitec/oneoffixx-docs","Organization":"Sevitec","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Sevitec/oneoffixx-docs/compare/cdb2ff1dd374994b395fe82fa7cb8b63ca1ce8e1...b70115a148cd23d152acc1e061208cc654a20e31","RelatedDescription":"Pushed to refs/heads/gh-pages at Sevitec/oneoffixx-docs","RelatedBody":null},{"Id":"8056115460","Type":"PushEvent","CreatedAt":"2018-08-02T11:36:41","Actor":"robertmuehsig","Repository":"Sevitec/oneoffixx-docs","Organization":"Sevitec","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Sevitec/oneoffixx-docs/compare/bc8fc47cc2b759366eca4c008c9a71dcfaa21221...cdb2ff1dd374994b395fe82fa7cb8b63ca1ce8e1","RelatedDescription":"Pushed to refs/heads/gh-pages at Sevitec/oneoffixx-docs","RelatedBody":null},{"Id":"8046641113","Type":"PushEvent","CreatedAt":"2018-07-31T20:57:18","Actor":"robertmuehsig","Repository":"Code-Inside/Blog","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/Blog/compare/380ed796232fd077126c8ea5004011d4f615836b...c1c4b3370707b70610cf1fce6c0e3d7a5fed0496","RelatedDescription":"Pushed to refs/heads/gh-pages at Code-Inside/Blog","RelatedBody":null},{"Id":"8041956192","Type":"IssuesEvent","CreatedAt":"2018-07-31T06:14:38","Actor":"robertmuehsig","Repository":"dotnet/docfx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/docfx/issues/3133","RelatedDescription":"Opened issue \"Anchor click behavior weird\" (#3133) at dotnet/docfx","RelatedBody":"**DocFX Version Used**: 2.37.2\r\n\r\n**Template used**: default\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Go to https://dotnet.github.io/docfx/spec/metadata_format_spec.html (or any site)\r\n2. Click a link from the \"IN THIS ARTICLE\" box\r\n3. Browser should now jump to the corresponding header\r\n4. Now click the on the link when you hover over the header \r\n5. Browser scrolls down.\r\n\r\n**Expected Behavior**:\r\n\r\nNo scrolling.\r\n\r\n**Actual Behavior**:\r\n\r\nWeird scrolling effect.\r\n\r\n![gif](https://user-images.githubusercontent.com/756703/43441027-a5a1e6be-9499-11e8-8856-57efb51fc61b.gif)\r\n\r\nBrowser: Version 67.0.3396.99 (Official Build) (64-bit)\r\n\r\nI'm not 100%, but maybe this is linked to this issue https://github.com/dotnet/docfx/issues/2508"},{"Id":"8029317768","Type":"PushEvent","CreatedAt":"2018-07-27T15:36:58","Actor":"oliverguhr","Repository":"oliverguhr/harmonograph","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/harmonograph/compare/2bae025d217bba18e2d064bc96abaa63e2039f78...d06125123ec7d0df275c9dcd99ee42e31db9a0e0","RelatedDescription":"Pushed to refs/heads/master at oliverguhr/harmonograph","RelatedBody":null},{"Id":"8029296827","Type":"CreateEvent","CreatedAt":"2018-07-27T15:32:57","Actor":"oliverguhr","Repository":"oliverguhr/harmonograph","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/harmonograph/tree/master","RelatedDescription":"Created branch \"master\" at oliverguhr/harmonograph","RelatedBody":null},{"Id":"8029296730","Type":"CreateEvent","CreatedAt":"2018-07-27T15:32:56","Actor":"oliverguhr","Repository":"oliverguhr/harmonograph","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":null,"RelatedDescription":"Created repository \"\" at oliverguhr/harmonograph","RelatedBody":null},{"Id":"8015016004","Type":"WatchEvent","CreatedAt":"2018-07-25T08:41:25","Actor":"oliverguhr","Repository":"akabekobeko/redmine-theme-minimalflat2","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred akabekobeko/redmine-theme-minimalflat2","RelatedBody":null},{"Id":"8012874472","Type":"IssuesEvent","CreatedAt":"2018-07-24T21:29:21","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/issues/8","RelatedDescription":"Opened issue \"Control Char \" (#8) at Code-Inside/KnowYourStack","RelatedBody":"Control char in this issue https://github.com/aspnet/Home/issues/3340 breaks jekyll\r\n\r\n``"},{"Id":"8012865431","Type":"PushEvent","CreatedAt":"2018-07-24T21:27:21","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/4ce8a23b60300cbde4156d209b314fbf7a87e27e...4cda74bbf2a14a300623d8a084faeb4007d7f0ef","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012862924","Type":"PushEvent","CreatedAt":"2018-07-24T21:26:48","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/1e41b56bcaaf14ebcb4647a8afbe34e62d978aac...4ce8a23b60300cbde4156d209b314fbf7a87e27e","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012859990","Type":"PushEvent","CreatedAt":"2018-07-24T21:26:10","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/8dacaabd82b31be5b5895a519334199231e0712b...1e41b56bcaaf14ebcb4647a8afbe34e62d978aac","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012851753","Type":"PushEvent","CreatedAt":"2018-07-24T21:24:18","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/577ce4279ed9f56b89676009ce46a6232126204d...8dacaabd82b31be5b5895a519334199231e0712b","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012847650","Type":"PushEvent","CreatedAt":"2018-07-24T21:23:25","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/51da9d8f7c293b3af9bc94702da478024118cbd0...577ce4279ed9f56b89676009ce46a6232126204d","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012840289","Type":"PushEvent","CreatedAt":"2018-07-24T21:21:49","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/74ad1278960ee6bf9881549dd17c99db23efce2c...51da9d8f7c293b3af9bc94702da478024118cbd0","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012795096","Type":"PushEvent","CreatedAt":"2018-07-24T21:12:06","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/8ab7ed00d6bf4a54bc54fce425b16b7c43675e33...74ad1278960ee6bf9881549dd17c99db23efce2c","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012747174","Type":"PushEvent","CreatedAt":"2018-07-24T21:02:11","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/9eb150f6543de579b86505dc4a8af6171f448b1e...8ab7ed00d6bf4a54bc54fce425b16b7c43675e33","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012732381","Type":"PushEvent","CreatedAt":"2018-07-24T20:59:16","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/16d124afdd3b548987c33a48e7169a57c44c1049...9eb150f6543de579b86505dc4a8af6171f448b1e","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012724729","Type":"PushEvent","CreatedAt":"2018-07-24T20:57:42","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/16f3e27d970a9a3c0ad28f8d2f681ce7df61989a...16d124afdd3b548987c33a48e7169a57c44c1049","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012714312","Type":"PushEvent","CreatedAt":"2018-07-24T20:55:37","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/f75dfcdf3b3624829b9f59beffc10c8aa0cc303e...16f3e27d970a9a3c0ad28f8d2f681ce7df61989a","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012705169","Type":"PushEvent","CreatedAt":"2018-07-24T20:53:50","Actor":"robertmuehsig","Repository":"Code-Inside/KnowYourStack","Organization":"Code-Inside","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/Code-Inside/KnowYourStack/compare/0804fd92244da8fb92e21cffac31417779993e49...f75dfcdf3b3624829b9f59beffc10c8aa0cc303e","RelatedDescription":"Pushed to refs/heads/master at Code-Inside/KnowYourStack","RelatedBody":null},{"Id":"8012656563","Type":"PushEvent","CreatedAt":"2018-07-24T20:44:09","Actor":"robertmuehsig","Repository":"ElectronNET/Electron.NET","Organization":"ElectronNET","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/ElectronNET/Electron.NET/compare/da643149bc50276e6b3b202f1dceff1e757ebda4...e305029563cdcfe4dec1a7203c7b664c832a9170","RelatedDescription":"Pushed to refs/heads/master at ElectronNET/Electron.NET","RelatedBody":null},{"Id":"8012646790","Type":"PushEvent","CreatedAt":"2018-07-24T20:42:10","Actor":"robertmuehsig","Repository":"ElectronNET/Electron.NET","Organization":"ElectronNET","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/ElectronNET/Electron.NET/compare/c2d482188224546b97ba17958e91d3bd577e87d2...da643149bc50276e6b3b202f1dceff1e757ebda4","RelatedDescription":"Pushed to refs/heads/master at ElectronNET/Electron.NET","RelatedBody":null},{"Id":"8012602448","Type":"PushEvent","CreatedAt":"2018-07-24T20:33:19","Actor":"robertmuehsig","Repository":"ElectronNET/Electron.NET","Organization":"ElectronNET","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/ElectronNET/Electron.NET/compare/344c5b7c131fd14f04792c33785f0337843f1856...c2d482188224546b97ba17958e91d3bd577e87d2","RelatedDescription":"Pushed to refs/heads/master at ElectronNET/Electron.NET","RelatedBody":null},{"Id":"8006535938","Type":"IssuesEvent","CreatedAt":"2018-07-23T21:29:06","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6200","RelatedDescription":"Opened issue \"\"Cancel\" buttons on Account page are doing nothing\" (#6200) at NuGet/NuGetGallery","RelatedBody":"I noticed that all those nice looking \"cancel\" buttons on the account page are doing nothing:\r\n\r\n![image](https://user-images.githubusercontent.com/756703/43103715-575c1ac6-8ecf-11e8-9c94-10c277e9c35d.png)\r\n\r\nThey are implemented as \"a-tags\" and styled as buttons inside each form like this:\r\n\r\n              ```\r\n      <div class=\"col-sm-6\">\r\n                        <a href=\"#\" role=\"button\" class=\"btn btn-default form-control\" id=\"cancel-change-password\">\r\n                            Cancel\r\n                        </a>\r\n                    </div>\r\n```\r\n\r\nI didn't find any Javascript event binded to those element ids either.\r\n\r\nWhen a user now clicks the cancel button nothing happens or the browser will just scroll up because of the \"#\" in the href.\r\n\r\nQuestion is: What would be the desired behavior when I click on \"cancel\"?\r\nI would assume that input fields are \"cleared\" and the \"form box\" should be collapsed like this:\r\n\r\n![image](https://user-images.githubusercontent.com/756703/43103929-f7385366-8ecf-11e8-9661-5f40f68147f0.png)\r\n\r\nWhat do you think? If you think this should be fixed I would be happy to assist with a PR :)"},{"Id":"8006448174","Type":"PushEvent","CreatedAt":"2018-07-23T21:09:47","Actor":"robertmuehsig","Repository":"robertmuehsig/NuGetGallery","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/robertmuehsig/NuGetGallery/compare/166d4c21134c11f0800aa7e0f0026a53cc583d48...e1a55f020302000d475940115127bba3ea80caa0","RelatedDescription":"Pushed to refs/heads/master at robertmuehsig/NuGetGallery","RelatedBody":null},{"Id":"7983088860","Type":"PullRequestEvent","CreatedAt":"2018-07-18T13:49:28","Actor":"oliverguhr","Repository":"Krockema/AkkaSim","Organization":null,"RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/Krockema/AkkaSim/pull/1","RelatedDescription":"Opened pull request \"just small typo fixes\" (#1) at Krockema/AkkaSim","RelatedBody":""},{"Id":"7983086105","Type":"PushEvent","CreatedAt":"2018-07-18T13:49:01","Actor":"oliverguhr","Repository":"oliverguhr/AkkaSim","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/AkkaSim/compare/a51bd3a59a5fc27fc7e2958b475f2417c72d9bc5...a110cfd957b9c457408e9cc1b5c6a7f2c534cefa","RelatedDescription":"Pushed to refs/heads/patch-1 at oliverguhr/AkkaSim","RelatedBody":null},{"Id":"7983067986","Type":"ForkEvent","CreatedAt":"2018-07-18T13:46:08","Actor":"oliverguhr","Repository":"Krockema/AkkaSim","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/AkkaSim","RelatedDescription":"Forked Krockema/AkkaSim to oliverguhr/AkkaSim","RelatedBody":null},{"Id":"7969445122","Type":"WatchEvent","CreatedAt":"2018-07-16T09:06:35","Actor":"oliverguhr","Repository":"annytab/a-stemmer","Organization":"annytab","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred annytab/a-stemmer","RelatedBody":null},{"Id":"7917311199","Type":"PushEvent","CreatedAt":"2018-07-04T09:26:56","Actor":"oliverguhr","Repository":"oliverguhr/config","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/config/compare/575a68222e76daded11f7e9e2e3f6cd291c5cb19...b735783f1a3f0eddcb0d58eb6cb78dbcd70b21d7","RelatedDescription":"Pushed to refs/heads/master at oliverguhr/config","RelatedBody":null},{"Id":"7917307916","Type":"PushEvent","CreatedAt":"2018-07-04T09:26:19","Actor":"oliverguhr","Repository":"oliverguhr/config","Organization":null,"RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/oliverguhr/config/compare/21b99a7cde70272c8aaa68e336fa6fb1bcda67eb...575a68222e76daded11f7e9e2e3f6cd291c5cb19","RelatedDescription":"Pushed to refs/heads/master at oliverguhr/config","RelatedBody":null},{"Id":"7740109400","Type":"WatchEvent","CreatedAt":"2018-05-28T19:33:29","Actor":"oliverguhr","Repository":"trekhleb/javascript-algorithms","Organization":null,"RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred trekhleb/javascript-algorithms","RelatedBody":null},{"Id":"7634445692","Type":"WatchEvent","CreatedAt":"2018-05-06T17:30:23","Actor":"oliverguhr","Repository":"gogits/gogs","Organization":"gogits","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred gogits/gogs","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1024287729822171136","CreatedAt":"2018-07-31T13:36:39+00:00","UserScreenname":"oliverguhr","Text":"Die Schadensregulierung der @AXADeutschland kann weder einen Dropbox Link noch eine Zip Datei öffnen. Jetzt schicke… https://t.co/3N1NvIWXF1","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":6,"FavoriteCount":0,"RawContent":null},{"Id":"1023896747691700224","CreatedAt":"2018-07-30T11:43:02+00:00","UserScreenname":"robert0muehsig","Text":"Da ist das Ding! Thanks ⁦@MVPAward⁩ ⁦@Microsoft⁩ #MVPBuzz https://t.co/MRzUhtohdK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":17,"FavoriteCount":0,"RawContent":null},{"Id":"1022395269026070528","CreatedAt":"2018-07-26T08:16:41+00:00","UserScreenname":"oliverguhr","Text":"Lambdas or loops? Which one do you prefer? #csharp #lambda https://t.co/VFlcd7SxLy","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1022360109534650370","CreatedAt":"2018-07-26T05:56:59+00:00","UserScreenname":"robert0muehsig","Text":"\"Loading this assembly would produce a different grant set from other instances. Exception from HRESULT: 0x80131401)\" 🤔","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"1021663992668925952","CreatedAt":"2018-07-24T07:50:52+00:00","UserScreenname":"oliverguhr","Text":"You can enable this awesome new title bar in #vscode. Just add \"window.titleBarStyle\": \"custom\" to your config. via… https://t.co/TnJ7d5cWMy","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1021637230836760577","CreatedAt":"2018-07-24T06:04:31+00:00","UserScreenname":"robert0muehsig","Text":"Dann mal alles Gute an den @SchelianHP :)","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"831405475858112512","CreatedAt":"2017-02-14T07:31:26+00:00","UserScreenname":"CodeInsideBlog","Text":"Blogged: Create NuGet packages with Cake https://t.co/zpOCwViCNT","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"829218338270228480","CreatedAt":"2017-02-08T06:40:32+00:00","UserScreenname":"CodeInsideBlog","Text":"Build &amp; run xUnit tests with Cake https://t.co/vfX3X5PNVb #dotnet #cake","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"798442723741147136","CreatedAt":"2016-11-15T08:29:14+00:00","UserScreenname":"CodeInsideBlog","Text":"Enable SSL with custom domains on @GitHub Pages via @Cloudflare https://t.co/SLfVDexgcR #ssl #Encrypt","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"793351192109809664","CreatedAt":"2016-11-01T07:17:18+00:00","UserScreenname":"CodeInsideBlog","Text":"Writing loops in T-SQL https://t.co/E9oU0EtQnf #mssql #sql","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"782821247948361728","CreatedAt":"2016-10-03T05:55:04+00:00","UserScreenname":"CodeInsideBlog","Text":"Lets convert a WPF app to UWP\n https://t.co/hqUIpCRKaC #UWP #Win10","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"712894405204643840","CreatedAt":"2016-03-24T06:50:45+00:00","UserScreenname":"CodeInsideBlog","Text":"Debugging .NET based Windows Error Reports (WER) https://t.co/xzvI282e1N","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"709284615916294144","CreatedAt":"2016-03-14T07:46:44+00:00","UserScreenname":"CodeInsideBlog","Text":"XML Autocompletion with AvalonEdit https://t.co/ntJBGY30oo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"706760908752740352","CreatedAt":"2016-03-07T08:38:26+00:00","UserScreenname":"CodeInsideBlog","Text":"Parsing XML Schemas in .NET https://t.co/a8wfhgAYlv","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"706424357019582464","CreatedAt":"2016-03-06T10:21:06+00:00","UserScreenname":"CodeInsideBlog","Text":"Using FontAwesome in #UWP apps https://t.co/DXFCjpE6VL #Windows #Win10Dev // cc @__charri","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"705644869385990146","CreatedAt":"2016-03-04T06:43:41+00:00","UserScreenname":"CodeInsideBlog","Text":"Using Travis CI for GitHub Pages builds https://t.co/dNmJ39LBzU","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"705288260424232960","CreatedAt":"2016-03-03T07:06:39+00:00","UserScreenname":"CodeInsideBlog","Text":"ExpensiveMeeting - a Universal Windows Platform OSS app using Template10 https://t.co/5ctyIhVUnQ #UWP #OSS #Meetings","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"702376436947161088","CreatedAt":"2016-02-24T06:16:06+00:00","UserScreenname":"CodeInsideBlog","Text":"Shipping Visual C++ 2015 redistributable DLLs with your app or how to do an app-local deployment https://t.co/0PDeUDmNpv","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"694210642908180486","CreatedAt":"2016-02-01T17:28:09+00:00","UserScreenname":"CodeInsideBlog","Text":"Working with FontIcons in #UWP https://t.co/XLkWIQpfx2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"683893416204316673","CreatedAt":"2016-01-04T06:11:11+00:00","UserScreenname":"CodeInsideBlog","Text":"Serving embedded resources with #ASPNET #WebApi https://t.co/CSu0btGF8N","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"671587232478838785","CreatedAt":"2015-12-01T07:10:48+00:00","UserScreenname":"CodeInsideBlog","Text":"Working with JumpLists in #WPF Apps https://t.co/kqm3K8Y3Vf #Windows","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"658538752588034048","CreatedAt":"2015-10-26T07:00:48+00:00","UserScreenname":"CodeInsideBlog","Text":"XML deserialize to abstract class, interface or base class https://t.co/cilTqdQjkb","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"638235807048966144","CreatedAt":"2015-08-31T06:24:08+00:00","UserScreenname":"CodeInsideBlog","Text":"FAKE: Running MSTest Tests with FAKE without knowing a tiny bit of F# http://t.co/PgMVGq2yKR #Fake #MSTest #YeahIKnowItsMSTest","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"631389692076933121","CreatedAt":"2015-08-12T09:00:07+00:00","UserScreenname":"CodeInsideBlog","Text":"Reg.exe or how to import .reg files without admin privileges http://t.co/qwEjgFLEaL","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"631389631880253440","CreatedAt":"2015-08-12T08:59:53+00:00","UserScreenname":"CodeInsideBlog","Text":"HowTo: Write to Azure Blob Storage http://t.co/67r6XsuWzZ #Azure","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null},{"Id":"631389556361830401","CreatedAt":"2015-08-12T08:59:35+00:00","UserScreenname":"CodeInsideBlog","Text":"Semantic Versioning in a nutshell http://t.co/Bw28QJLhol #SemVer","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":0,"FavoriteCount":0,"RawContent":null}]},"TwitterUserRobert":{"ResultType":"TwitterUser","Users":[{"Id":"14109602","CreatedAt":"2008-03-09T21:36:40+00:00","Name":"Robert Muehsig","Url":"http://t.co/4drS4Ug6BX","FollowersCount":1323,"Description":"Web Developer, Microsoft ASPNET MVP, Geek & Nerd  ¯\\_(ツ)_/¯","RawContent":null}]},"TwitterUserOliver":{"ResultType":"TwitterUser","Users":[{"Id":"19961277","CreatedAt":"2009-02-03T09:07:08+00:00","Name":"Oliver Guhr","Url":"http://t.co/akwMSqLW6n","FollowersCount":617,"Description":"Developer. Organisiert die .NET User Group Dresden","RawContent":null}]}},"RunOn":"2018-08-05T18:36:31.6223323Z","RunDurationInMilliseconds":5115}